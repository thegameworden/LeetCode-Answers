Dumping Data Here





Username: ethanworden
----------------------------------------------------------



Submission stas:
[
- All : 299
- Easy : 180
- Medium : 118
- Hard : 1
]



----------------------------------------------------------



Questions:
[
- Title Slug: two-sum
Question FrontEnd Id: 1
Title: Two Sum
Difficulty: Easy
Status: ac
Stats: {"totalAccepted": "9.4M", "totalSubmission": "18.9M", "totalAcceptedRaw": 9413173, "totalSubmissionRaw": 18924534, "acRate": "49.7%"}
Submissions: 1
ID: 925536526
Language Name: csharp
Language Verbose Name: C#
Question ID: 1
URL: 
Code: public class Solution {
    public int[] TwoSum(int[] nums, int target) {
        Dictionary<int, int> db = new Dictionary<int, int>();
        for(int i=0;i<nums.Length;i++){
            if(db.ContainsKey(nums[i])){
                return new int[] {db[nums[i]], i};
            }else if(!db.ContainsKey(target-nums[i])){
                db.Add(target-nums[i],i);
            }
        }
        
        return new int[2];
    }
}

Sample Test Case: [2,7,11,15]
9

- Title Slug: palindrome-number
Question FrontEnd Id: 9
Title: Palindrome Number
Difficulty: Easy
Status: ac
Stats: {"totalAccepted": "3.1M", "totalSubmission": "5.8M", "totalAcceptedRaw": 3094851, "totalSubmissionRaw": 5776478, "acRate": "53.6%"}
Submissions: 1
ID: 925570286
Language Name: csharp
Language Verbose Name: C#
Question ID: 9
URL: 
Code: public class Solution {
    public bool IsPalindrome(int x) {
        string str = x.ToString();
        for(int i=0;i<str.Length/2;i++){
            if(str[i]!= str[str.Length-i-1])return false;
        }
        return true;
    }
}

Sample Test Case: 121

- Title Slug: merge-two-sorted-lists
Question FrontEnd Id: 21
Title: Merge Two Sorted Lists
Difficulty: Easy
Status: ac
Stats: {"totalAccepted": "3.1M", "totalSubmission": "5M", "totalAcceptedRaw": 3148418, "totalSubmissionRaw": 5031878, "acRate": "62.6%"}
Submissions: 1
ID: 873111491
Language Name: csharp
Language Verbose Name: C#
Question ID: 21
URL: 
Code: /**
 * Definition for singly-linked list.
 * public class ListNode {
 *     public int val;
 *     public ListNode next;
 *     public ListNode(int val=0, ListNode next=null) {
 *         this.val = val;
 *         this.next = next;
 *     }
 * }
 */
public class Solution {
    public ListNode MergeTwoLists(ListNode list1, ListNode list2) {
  


        ListNode head = new ListNode(-1);
        ListNode merger =head;
        
        while(list1!=null || list2!=null){
            if(list1==null){
                merger.next = list2;
               break;
            }

            if(list2==null){
                merger.next = list1;
                break;
               
            }

            if(list1.val<=list2.val){
                merger.next=list1;
                list1=list1.next;
            }else{
                merger.next=list2;
                list2=list2.next;
            }
            merger=merger.next;
        }
 



        return head.next;
    }
}

Sample Test Case: [1,2,4]
[1,3,4]

- Title Slug: binary-tree-inorder-traversal
Question FrontEnd Id: 94
Title: Binary Tree Inorder Traversal
Difficulty: Easy
Status: ac
Stats: {"totalAccepted": "2M", "totalSubmission": "2.7M", "totalAcceptedRaw": 1972069, "totalSubmissionRaw": 2670191, "acRate": "73.9%"}
Submissions: 1
ID: 874424958
Language Name: csharp
Language Verbose Name: C#
Question ID: 94
URL: 
Code: /**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     public int val;
 *     public TreeNode left;
 *     public TreeNode right;
 *     public TreeNode(int val=0, TreeNode left=null, TreeNode right=null) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
public class Solution {
    List<int> inorder;
    public IList<int> InorderTraversal(TreeNode root) {
        inorder = new();
        traverse(root);
        return inorder;
    }

    private void traverse(TreeNode node){
        if(node==null)
        return;

        traverse(node.left);
        inorder.Add(node.val);
        traverse(node.right);
    }
}

Sample Test Case: [1,null,2,3]

- Title Slug: same-tree
Question FrontEnd Id: 100
Title: Same Tree
Difficulty: Easy
Status: ac
Stats: {"totalAccepted": "1.5M", "totalSubmission": "2.6M", "totalAcceptedRaw": 1499492, "totalSubmissionRaw": 2574772, "acRate": "58.2%"}
Submissions: 1
ID: 875194435
Language Name: csharp
Language Verbose Name: C#
Question ID: 100
URL: 
Code: /**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     public int val;
 *     public TreeNode left;
 *     public TreeNode right;
 *     public TreeNode(int val=0, TreeNode left=null, TreeNode right=null) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
public class Solution {
    public bool IsSameTree(TreeNode p, TreeNode q) {
        return Checker(p,q);
    }

    private bool Checker(TreeNode p, TreeNode q){
        if(p==null ^ q==null)
            return false;
        
        if(p==null && q==null)
        return true;

        if(p.val!=q.val)
        return false;

        return Checker(p.left,q.left) &&Checker(p.right,q.right);
    }
}

Sample Test Case: [1,2,3]
[1,2,3]

- Title Slug: binary-tree-level-order-traversal
Question FrontEnd Id: 102
Title: Binary Tree Level Order Traversal
Difficulty: Medium
Status: ac
Stats: {"totalAccepted": "1.8M", "totalSubmission": "2.7M", "totalAcceptedRaw": 1750661, "totalSubmissionRaw": 2717216, "acRate": "64.4%"}
Submissions: 1
ID: 928947246
Language Name: javascript
Language Verbose Name: JavaScript
Question ID: 102
URL: 
Code: /**
 * Definition for a binary tree node.
 * function TreeNode(val, left, right) {
 *     this.val = (val===undefined ? 0 : val)
 *     this.left = (left===undefined ? null : left)
 *     this.right = (right===undefined ? null : right)
 * }
 */
/**
 * @param {TreeNode} root
 * @return {number[][]}
 */
var levelOrder = function(root) {
    // If root is null return an empty array
    if(!root) return []
    
    var queue = [root] // initialize the queue with root
    const levels = [] // declare output array
    
    while(queue.length !== 0){
       const queueLength = queue.length // Get the length prior to dequeueing
       const level = [] // Declare this level
       const next = []
       // loop through to exhaust all options and only to include nodes at currLevel
      while(queue.length!==0){
           // Get next node
           const node = queue.shift()
           
           if(node.left){
               next.push(node.left)
           }
           if(node.right){
               next.push(node.right)
           }
           // After we add left and right for current, we add to currLevel
           level.push(node.val)
       }
       // Level has been finished. Push into output array
       levels.push(level)
       queue= next
   }
    return levels
}

Sample Test Case: [3,9,20,null,null,15,7]

- Title Slug: maximum-depth-of-binary-tree
Question FrontEnd Id: 104
Title: Maximum Depth of Binary Tree
Difficulty: Easy
Status: ac
Stats: {"totalAccepted": "2.3M", "totalSubmission": "3.1M", "totalAcceptedRaw": 2293066, "totalSubmissionRaw": 3101607, "acRate": "73.9%"}
Submissions: 1
ID: 874486122
Language Name: csharp
Language Verbose Name: C#
Question ID: 104
URL: 
Code: /**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     public int val;
 *     public TreeNode left;
 *     public TreeNode right;
 *     public TreeNode(int val=0, TreeNode left=null, TreeNode right=null) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
public class Solution {
    int depth;
    public int MaxDepth(TreeNode root) {
        traverse(0,root);
        return depth;
    }

    private void traverse(int currDepth, TreeNode node){
        if(node==null){
            if(currDepth>depth){
                depth=currDepth;
            }
            return;
        }

        traverse(currDepth+1,node.left);
         traverse(currDepth+1,node.right);
    }
}

Sample Test Case: [3,9,20,null,null,15,7]

- Title Slug: path-sum
Question FrontEnd Id: 112
Title: Path Sum
Difficulty: Easy
Status: ac
Stats: {"totalAccepted": "1.2M", "totalSubmission": "2.4M", "totalAcceptedRaw": 1157317, "totalSubmissionRaw": 2394707, "acRate": "48.3%"}
Submissions: 1
ID: 925206889
Language Name: csharp
Language Verbose Name: C#
Question ID: 112
URL: 
Code: /**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     public int val;
 *     public TreeNode left;
 *     public TreeNode right;
 *     public TreeNode(int val=0, TreeNode left=null, TreeNode right=null) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
public class Solution {
    public bool HasPathSum(TreeNode root, int targetSum) {
        if(root ==null) return false;
        int update = targetSum-root.val;
        if(update==0 && root.left==null && root.right==null) return true;

        return HasPathSum(root.left,update) || HasPathSum(root.right,update);
    }
/*
    public bool traverse(TreeNode node, int sum, int target){
        if(node ==null) return false;

        sum+=node.val;
        if(sum == target && node.left==null && node.right==null) return true;

        return traverse(node.left,sum,target) || traverse(node.right,sum,target);



    }*/
}

Sample Test Case: [5,4,8,11,null,13,4,7,2,null,null,null,1]
22

- Title Slug: gas-station
Question FrontEnd Id: 134
Title: Gas Station
Difficulty: Medium
Status: ac
Stats: {"totalAccepted": "580.4K", "totalSubmission": "1.3M", "totalAcceptedRaw": 580389, "totalSubmissionRaw": 1259533, "acRate": "46.1%"}
Submissions: 1
ID: 873077096
Language Name: csharp
Language Verbose Name: C#
Question ID: 134
URL: 
Code: public class Solution {
    public int CanCompleteCircuit(int[] gas, int[] cost) {
        int startingStation =0;
        int cTank=0;
        int tTank =0;
        for(int i=0;i<gas.Length;i++){
            tTank+=gas[i]-cost[i];
            cTank+=gas[i]-cost[i];
            if(cTank<0){
                cTank=0;
                startingStation=i+1;
            }
        }

        if(tTank>=0)
        return startingStation;

        return -1;
    }
}

Sample Test Case: [1,2,3,4,5]
[3,4,5,1,2]

- Title Slug: linked-list-cycle-ii
Question FrontEnd Id: 142
Title: Linked List Cycle II
Difficulty: Medium
Status: ac
Stats: {"totalAccepted": "1M", "totalSubmission": "2.1M", "totalAcceptedRaw": 1044487, "totalSubmissionRaw": 2138097, "acRate": "48.9%"}
Submissions: 1
ID: 873144849
Language Name: csharp
Language Verbose Name: C#
Question ID: 142
URL: 
Code: /**
 * Definition for singly-linked list.
 * public class ListNode {
 *     public int val;
 *     public ListNode next;
 *     public ListNode(int x) {
 *         val = x;
 *         next = null;
 *     }
 * }
 */
public class Solution {
    public ListNode DetectCycle(ListNode head) {
        List<ListNode> visited = new List<ListNode>();
        while(head!=null){
            if(visited.Contains(head))
            return head;

            visited.Add(head);
            head=head.next;
        }


        return null;
    }
}

Sample Test Case: [3,2,0,-4]
1

- Title Slug: binary-tree-preorder-traversal
Question FrontEnd Id: 144
Title: Binary Tree Preorder Traversal
Difficulty: Easy
Status: ac
Stats: {"totalAccepted": "1.3M", "totalSubmission": "1.9M", "totalAcceptedRaw": 1301351, "totalSubmissionRaw": 1944127, "acRate": "66.9%"}
Submissions: 1
ID: 874424163
Language Name: csharp
Language Verbose Name: C#
Question ID: 144
URL: 
Code: /**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     public int val;
 *     public TreeNode left;
 *     public TreeNode right;
 *     public TreeNode(int val=0, TreeNode left=null, TreeNode right=null) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
public class Solution {
    List<int> preorder;
    public IList<int> PreorderTraversal(TreeNode root) {
        preorder= new List<int>();
        traverse(root);
        return preorder;
    }

    private void traverse(TreeNode node){
        if(node==null)
        return;
        preorder.Add(node.val);
        traverse(node.left);
        traverse(node.right);
    }
}

Sample Test Case: [1,null,2,3]

- Title Slug: binary-tree-postorder-traversal
Question FrontEnd Id: 145
Title: Binary Tree Postorder Traversal
Difficulty: Easy
Status: ac
Stats: {"totalAccepted": "943.2K", "totalSubmission": "1.4M", "totalAcceptedRaw": 943166, "totalSubmissionRaw": 1385875, "acRate": "68.1%"}
Submissions: 1
ID: 874425540
Language Name: csharp
Language Verbose Name: C#
Question ID: 145
URL: 
Code: /**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     public int val;
 *     public TreeNode left;
 *     public TreeNode right;
 *     public TreeNode(int val=0, TreeNode left=null, TreeNode right=null) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
public class Solution {
    List<int> postorder;
    public IList<int> PostorderTraversal(TreeNode root) {
        postorder = new();
        traverse(root);
        return postorder;
    }

    private void traverse(TreeNode node){
        if(node==null)
        return;

        traverse(node.left);
        traverse(node.right);
        postorder.Add(node.val);
    }
}

Sample Test Case: [1,null,2,3]

- Title Slug: fraction-to-recurring-decimal
Question FrontEnd Id: 166
Title: Fraction to Recurring Decimal
Difficulty: Medium
Status: ac
Stats: {"totalAccepted": "205.7K", "totalSubmission": "845.5K", "totalAcceptedRaw": 205744, "totalSubmissionRaw": 845548, "acRate": "24.3%"}
Submissions: 1
ID: 928287010
Language Name: csharp
Language Verbose Name: C#
Question ID: 166
URL: 
Code: public class Solution {
    StringBuilder number;
    Dictionary<long, int> visited;
    public string FractionToDecimal(int numerator, int denominator) {
        if(numerator==0) return "0";
    visited= new();
    number = new();

        if(numerator<0 ^ denominator <0) number.Append('-');

    long n = numerator;
    long  d= denominator;
    n = Math.Abs(n);
    d = Math.Abs(d);
    number.Append((n/d).ToString());

        if(n%d ==0) return number.ToString();

    number.Append('.');
    
    division(n%d,d);

    return number.ToString();
    }

    private void division(long numerator, long denominator){
        if(numerator ==0) return;
        if(visited.ContainsKey(numerator)){
           number.Insert(visited[numerator], '(');
           number.Append(')');
           return;
        }
        visited.Add(numerator, number.Length);
        numerator*=10;
        number.Append((numerator/denominator).ToString());
        division((numerator%denominator),denominator);
    }
}


Sample Test Case: 1
2

- Title Slug: number-of-islands
Question FrontEnd Id: 200
Title: Number of Islands
Difficulty: Medium
Status: ac
Stats: {"totalAccepted": "2.1M", "totalSubmission": "3.7M", "totalAcceptedRaw": 2123978, "totalSubmissionRaw": 3722004, "acRate": "57.1%"}
Submissions: 1
ID: 925709688
Language Name: csharp
Language Verbose Name: C#
Question ID: 200
URL: 
Code: public class Solution {

    bool[][] visited;
    public int NumIslands(char[][] grid) {
        int count = 0;
        visited = new bool[grid.Length][];
        for(int i=0;i<visited.Length;i++){
            visited[i]= new bool[grid[0].Length];
        }
        for(int y=0;y<grid.Length;y++){
            for(int x=0;x<grid[0].Length;x++){
                if(grid[y][x]=='1' && !visited[y][x]){
                    traverse(grid, y, x);
                    count++;
                }
            }
        }


        return count;
    }

    private void traverse(char[][] grid, int y,int x){
        if(y<0 ||x<0 || y>= grid.Length || x>= grid[0].Length || grid[y][x]=='0' || visited[y][x]) return;

        visited[y][x]=true;
        traverse(grid,y+1,x);
        traverse(grid,y-1,x);
        traverse(grid,y,x+1);
        traverse(grid,y,x-1);

    }
}

Sample Test Case: [["1","1","1","1","0"],["1","1","0","1","0"],["1","1","0","0","0"],["0","0","0","0","0"]]

- Title Slug: isomorphic-strings
Question FrontEnd Id: 205
Title: Isomorphic Strings
Difficulty: Easy
Status: ac
Stats: {"totalAccepted": "869.1K", "totalSubmission": "2M", "totalAcceptedRaw": 869147, "totalSubmissionRaw": 2023821, "acRate": "42.9%"}
Submissions: 1
ID: 873084446
Language Name: csharp
Language Verbose Name: C#
Question ID: 205
URL: 
Code: public class Solution {
    public bool IsIsomorphic(string s, string t) {
        if(s.Length!=t.Length)
        return false;

        Dictionary<char,char> iso = new();
        Dictionary<char,char> invIso= new();
        for(int i=0;i<s.Length;i++){
            if(!iso.ContainsKey(s[i]) && !iso.ContainsValue(t[i])){
                iso.Add(s[i],t[i]);
                invIso.Add(t[i],s[i]);
            }else{
                if((iso.ContainsKey(s[i]) && iso[s[i]]!=t[i])|| (invIso.ContainsKey(t[i])&& invIso[t[i]]!=s[i]))
                return false;

            }
        }

        return true;
    }
}

Sample Test Case: "egg"
"add"

- Title Slug: reverse-linked-list
Question FrontEnd Id: 206
Title: Reverse Linked List
Difficulty: Easy
Status: ac
Stats: {"totalAccepted": "3M", "totalSubmission": "4.1M", "totalAcceptedRaw": 3021426, "totalSubmissionRaw": 4102687, "acRate": "73.6%"}
Submissions: 1
ID: 873138245
Language Name: csharp
Language Verbose Name: C#
Question ID: 206
URL: 
Code: /**
 * Definition for singly-linked list.
 * public class ListNode {
 *     public int val;
 *     public ListNode next;
 *     public ListNode(int val=0, ListNode next=null) {
 *         this.val = val;
 *         this.next = next;
 *     }
 * }
 */
public class Solution {
    public ListNode ReverseList(ListNode head) {
        if(head==null)
        return head;

        ListNode prev =null;
        while(head!=null){
            ListNode next= head.next;
            head.next=prev;
            prev = head;
            head = next;
            
        }
        return prev;



    }
}

Sample Test Case: [1,2,3,4,5]

- Title Slug: valid-anagram
Question FrontEnd Id: 242
Title: Valid Anagram
Difficulty: Easy
Status: ac
Stats: {"totalAccepted": "2.1M", "totalSubmission": "3.3M", "totalAcceptedRaw": 2092351, "totalSubmissionRaw": 3317363, "acRate": "63.1%"}
Submissions: 1
ID: 925524913
Language Name: csharp
Language Verbose Name: C#
Question ID: 242
URL: 
Code: public class Solution {
    public bool IsAnagram(string s, string t) {
         if(s.Length!= t.Length) return false;

        char[] sArr = s.ToArray();
        Array.Sort(sArr);

        char[] tArr = t.ToArray();
        Array.Sort(tArr);

        for(int i=0;i<s.Length;i++){
            if(sArr[i]!=tArr[i]) return false;
        }

        return true;


    }
}


/*
        if(s.Length!= t.Length) return false;

        Dictionary<char, int> sDictionary= new();
        Dictionary<char, int> tDictionary= new();

        for(int i=0;i<s.Length;i++){
            if(!sDictionary.ContainsKey(s[i])){
                sDictionary.Add(s[i],1);
            }else{
                sDictionary[s[i]]++;
            }
        }

        for(int i=0;i<t.Length;i++){
            if(!tDictionary.ContainsKey(t[i])){
                tDictionary.Add(t[i],1);
            }else{
                tDictionary[t[i]]++;
            }
        }

        if(sDictionary.Count != tDictionary.Count) return false;
        
        foreach(KeyValuePair<char,int> kvp in sDictionary){
            if(!tDictionary.ContainsKey(kvp.Key) || tDictionary[kvp.Key] != kvp.Value) return false;
        }
        return true;


*/

Sample Test Case: "anagram"
"nagaram"

- Title Slug: add-digits
Question FrontEnd Id: 258
Title: Add Digits
Difficulty: Easy
Status: ac
Stats: {"totalAccepted": "559.8K", "totalSubmission": "874.6K", "totalAcceptedRaw": 559786, "totalSubmissionRaw": 874600, "acRate": "64.0%"}
Submissions: 1
ID: 925245758
Language Name: csharp
Language Verbose Name: C#
Question ID: 258
URL: 
Code: public class Solution {
    public int AddDigits(int num) {
    if (num == 0)    
    return 0;
return 1 + (num -1 )%9;
}
}

Sample Test Case: 38

- Title Slug: missing-number
Question FrontEnd Id: 268
Title: Missing Number
Difficulty: Easy
Status: ac
Stats: {"totalAccepted": "1.5M", "totalSubmission": "2.3M", "totalAcceptedRaw": 1466782, "totalSubmissionRaw": 2341151, "acRate": "62.7%"}
Submissions: 1
ID: 932812170
Language Name: csharp
Language Verbose Name: C#
Question ID: 268
URL: 
Code: public class Solution {
    public int MissingNumber(int[] nums) {
        int n = nums.Length;
       int total= 0;
       for(int i=0;i<nums.Length;i++)
        total+=nums[i];

        return  (n*(n+1)/2)-total;
    }
}

Sample Test Case: [3,0,1]

- Title Slug: range-sum-query-mutable
Question FrontEnd Id: 307
Title: Range Sum Query - Mutable
Difficulty: Medium
Status: ac
Stats: {"totalAccepted": "245K", "totalSubmission": "602K", "totalAcceptedRaw": 245041, "totalSubmissionRaw": 602017, "acRate": "40.7%"}
Submissions: 1
ID: 907330542
Language Name: csharp
Language Verbose Name: C#
Question ID: 307
URL: 
Code: public class NumArray {
    int[] arr;
    int total;
    public NumArray(int[] nums) {
        arr= nums;
        total=0;
        for(int i=0;i<nums.Length;i++){
            total+=nums[i];
        }
       
    }
    
    public void Update(int index, int val) {
        total-=arr[index];
        total+=val;
        arr[index]=val;
    }
    
    public int SumRange(int left, int right) {
        
        if(arr.Length/2<right-left){
            int ret=total;
            for(int i=0;i<left;i++){
                ret-=arr[i];
            }
            
            for(int i=right+1;i<arr.Length;i++){
                ret-=arr[i];
            }
            return ret;
            
            
        }    
    
        int sum=0;
        for(int i=left;i<=right;i++){
            sum+=arr[i];
        }
        return sum;
    }
}

/**
 * Your NumArray object will be instantiated and called as such:
 * NumArray obj = new NumArray(nums);
 * obj.Update(index,val);
 * int param_2 = obj.SumRange(left,right);
 */

Sample Test Case: ["NumArray","sumRange","update","sumRange"]
[[[1,3,5]],[0,2],[1,2],[0,2]]

- Title Slug: power-of-three
Question FrontEnd Id: 326
Title: Power of Three
Difficulty: Easy
Status: ac
Stats: {"totalAccepted": "675.2K", "totalSubmission": "1.5M", "totalAcceptedRaw": 675188, "totalSubmissionRaw": 1482575, "acRate": "45.5%"}
Submissions: 1
ID: 874435978
Language Name: csharp
Language Verbose Name: C#
Question ID: 326
URL: 
Code: public class Solution {
    public bool IsPowerOfThree(int n) {
        return n>0 && 1162261467%n==0;
    }
}

Sample Test Case: 27

- Title Slug: is-subsequence
Question FrontEnd Id: 392
Title: Is Subsequence
Difficulty: Easy
Status: ac
Stats: {"totalAccepted": "822K", "totalSubmission": "1.7M", "totalAcceptedRaw": 821979, "totalSubmissionRaw": 1730212, "acRate": "47.5%"}
Submissions: 1
ID: 873086365
Language Name: csharp
Language Verbose Name: C#
Question ID: 392
URL: 
Code: public class Solution {
    public bool IsSubsequence(string s, string t) {
        if(s.Length>t.Length)
        return false;
        if(s.Length==0)
        return true;
        int sPointer=0;
        for(int i=0;i<t.Length;i++){
            if(t[i]== s[sPointer]){
                sPointer++;
                if(sPointer==s.Length)
                return true;
            }
        }

        return false;
        
    }
}

Sample Test Case: "abc"
"ahbgdc"

- Title Slug: can-place-flowers
Question FrontEnd Id: 605
Title: Can Place Flowers
Difficulty: Easy
Status: ac
Stats: {"totalAccepted": "424.9K", "totalSubmission": "1.3M", "totalAcceptedRaw": 424875, "totalSubmissionRaw": 1295020, "acRate": "32.8%"}
Submissions: 1
ID: 919119943
Language Name: csharp
Language Verbose Name: C#
Question ID: 605
URL: 
Code: public class Solution {
    public bool CanPlaceFlowers(int[] flowerbed, int n) {
        if(flowerbed.Length==1){
            if(flowerbed[0]==1 && n<1)
            return true;
            if(flowerbed[0]==0 && n<=1)
            return true;
            
            return false;
        }
        if(flowerbed[0]==0 && flowerbed[1]==0){
            flowerbed[0]=1;
            n--;
        }

        for(int i=1;i<flowerbed.Length-1;i++){
            if(flowerbed[i-1] ==0 && flowerbed[i+1]==0 && flowerbed[i]==0){
                flowerbed[i]=1;
                n--;
            }
        }

        if(flowerbed[flowerbed.Length-1]==0 && flowerbed[flowerbed.Length-2]==0){
            flowerbed[flowerbed.Length-1]=1;
            n--;
        }
        return n<=0;
    }



    
}

Sample Test Case: [1,0,0,0,1]
1

- Title Slug: maximum-swap
Question FrontEnd Id: 670
Title: Maximum Swap
Difficulty: Medium
Status: ac
Stats: {"totalAccepted": "193.5K", "totalSubmission": "404.4K", "totalAcceptedRaw": 193547, "totalSubmissionRaw": 404399, "acRate": "47.9%"}
Submissions: 1
ID: 932826892
Language Name: csharp
Language Verbose Name: C#
Question ID: 670
URL: 
Code: public class Solution {
    public int MaximumSwap(int num) {
        string swap = num.ToString();
        char[] sorted = swap.ToArray();
        int max = num;
        for(int i=0;i<sorted.Length-1;i++){
            for(int j=i+1;j<sorted.Length;j++){
                char c = sorted[j];
                sorted[j]= sorted[i];
                sorted[i]= c;
                int test = Convert.ToInt32(new string(sorted));
                if(test>max)
                    max=test;
                    
                sorted[i]= sorted[j];
                sorted[j]=c;
            }
        }

        return max;

    }
}

Sample Test Case: 2736

- Title Slug: min-cost-climbing-stairs
Question FrontEnd Id: 746
Title: Min Cost Climbing Stairs
Difficulty: Easy
Status: ac
Stats: {"totalAccepted": "794.1K", "totalSubmission": "1.3M", "totalAcceptedRaw": 794150, "totalSubmissionRaw": 1255188, "acRate": "63.3%"}
Submissions: 1
ID: 929332730
Language Name: csharp
Language Verbose Name: C#
Question ID: 747
URL: 
Code: public class Solution {
    public int MinCostClimbingStairs(int[] cost) {
        if(cost.Length==1) return cost[0];

        if(cost.Length ==2) return Math.Min(cost[0],cost[1]);

        int[] stairs = new int[cost.Length];

        stairs[0]= cost[0];
        stairs[1]= cost[1];

        for(int i=2;i<stairs.Length;i++){
            stairs[i]= Math.Min(stairs[i-1],stairs[i-2])+cost[i];
        }

        return Math.Min(stairs[stairs.Length-1],stairs[stairs.Length-2]);
    }
}

Sample Test Case: [10,15,20]

- Title Slug: find-anagram-mappings
Question FrontEnd Id: 760
Title: Find Anagram Mappings
Difficulty: Easy
Status: ac
Stats: {"totalAccepted": "92.1K", "totalSubmission": "110.6K", "totalAcceptedRaw": 92069, "totalSubmissionRaw": 110618, "acRate": "83.2%"}
Submissions: 1
ID: 906897853
Language Name: csharp
Language Verbose Name: C#
Question ID: 762
URL: 
Code: public class Solution {
    public int[] AnagramMappings(int[] nums1, int[] nums2) {
        Dictionary<int,int> map = new();//num, position on nums2
        for(int i=0;i<nums2.Length;i++){
            if(map.ContainsKey(nums2[i]))
                continue;
            map.Add(nums2[i],i);
        }
    for(int i=0;i<nums1.Length;i++){
        nums1[i]=map[nums1[i]]; 
    }
        return nums1;
    
    }

    
}

Sample Test Case: [12,28,46,32,50]
[50,12,32,46,28]

- Title Slug: binary-search
Question FrontEnd Id: 704
Title: Binary Search
Difficulty: Easy
Status: ac
Stats: {"totalAccepted": "1.7M", "totalSubmission": "3.1M", "totalAcceptedRaw": 1739721, "totalSubmissionRaw": 3098378, "acRate": "56.1%"}
Submissions: 1
ID: 925691458
Language Name: csharp
Language Verbose Name: C#
Question ID: 792
URL: 
Code: public class Solution {
    public int Search(int[] nums, int target) {
        int left = 0;
        int right = nums.Length-1;

        if(nums.Length==1 && nums[0]== target)
        return 0;

        while(left<=right){
            int mid = (left+right)/2;
            if(nums[mid]== target) return mid;

            if(nums[mid]>target){
                right = mid-1;
            }else{
                left = mid+1;
            }
        }
        return -1;
    }
}

Sample Test Case: [-1,0,3,5,9,12]
9

- Title Slug: subdomain-visit-count
Question FrontEnd Id: 811
Title: Subdomain Visit Count
Difficulty: Medium
Status: ac
Stats: {"totalAccepted": "208.1K", "totalSubmission": "275.6K", "totalAcceptedRaw": 208137, "totalSubmissionRaw": 275627, "acRate": "75.5%"}
Submissions: 1
ID: 933988753
Language Name: csharp
Language Verbose Name: C#
Question ID: 829
URL: 
Code: public class Solution {
     Dictionary<string, int> check;

    public IList<string> SubdomainVisits(string[] cpdomains) {
       check = new();
        for(int i=0;i<cpdomains.Length;i++){
            parse(cpdomains[i]);
        }

        List<string> ret = new();
        foreach(KeyValuePair<string,int> kvp in check){
            ret.Add($"{kvp.Value} {kvp.Key}");
        }
        return ret;
    }

    private void parse(string str){
        string[] split = str.Split(' ');
        int num = Convert.ToInt32(split[0]);

        string[] domains = split[1].Split('.');

        string checker = "";
        for(int i=domains.Length-1;i>=0;i--){
            checker=domains[i]+ checker;
            if(check.ContainsKey(checker)){
                check[checker]+= num;
            }else{
                check.Add(checker,num);
            }

            checker= "."+checker;
        }
        
    }
}

Sample Test Case: ["9001 discuss.leetcode.com"]

- Title Slug: binary-tree-pruning
Question FrontEnd Id: 814
Title: Binary Tree Pruning
Difficulty: Medium
Status: ac
Stats: {"totalAccepted": "224.5K", "totalSubmission": "310.1K", "totalAcceptedRaw": 224490, "totalSubmissionRaw": 310061, "acRate": "72.4%"}
Submissions: 1
ID: 879050117
Language Name: csharp
Language Verbose Name: C#
Question ID: 832
URL: 
Code: /**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     public int val;
 *     public TreeNode left;
 *     public TreeNode right;
 *     public TreeNode(int val=0, TreeNode left=null, TreeNode right=null) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
public class Solution {
    public TreeNode PruneTree(TreeNode root) {
        
        return Prune(root) ? root :null;

    }

    private bool Prune(TreeNode node){
        if(node==null){
            return false;
        }
        bool left = Prune(node.left);
        bool right = Prune(node.right);
        if(!left) node.left = null;
        if(!right) node.right = null;

        return node.val==1 ||left || right;
        
        
    }
}

Sample Test Case: [1,null,0,0,1]

- Title Slug: lemonade-change
Question FrontEnd Id: 860
Title: Lemonade Change
Difficulty: Easy
Status: ac
Stats: {"totalAccepted": "127.2K", "totalSubmission": "240.6K", "totalAcceptedRaw": 127169, "totalSubmissionRaw": 240637, "acRate": "52.8%"}
Submissions: 1
ID: 921624069
Language Name: csharp
Language Verbose Name: C#
Question ID: 890
URL: 
Code: public class Solution {
    public bool LemonadeChange(int[] bills) {
          int five = 0, ten = 0;
        foreach(int i in bills) {
            if (i == 5) five++;
            else if (i == 10) {five--; ten++;}
            else if (ten > 0) {ten--; five--;}
            else five -= 3;
            if (five < 0) return false;
        }
        return true;

        }


    }

Sample Test Case: [5,5,5,10,20]

- Title Slug: leaf-similar-trees
Question FrontEnd Id: 872
Title: Leaf-Similar Trees
Difficulty: Easy
Status: ac
Stats: {"totalAccepted": "252.8K", "totalSubmission": "373.9K", "totalAcceptedRaw": 252812, "totalSubmissionRaw": 373923, "acRate": "67.6%"}
Submissions: 1
ID: 925671508
Language Name: csharp
Language Verbose Name: C#
Question ID: 904
URL: 
Code: /**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     public int val;
 *     public TreeNode left;
 *     public TreeNode right;
 *     public TreeNode(int val=0, TreeNode left=null, TreeNode right=null) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
public class Solution {
    List<int> tree1;
    List<int> tree2;
    public bool LeafSimilar(TreeNode root1, TreeNode root2) {
        tree1 =new();
        tree2= new();
        traverse(root1,tree1);
        traverse(root2,tree2);

        if(tree1.Count!=tree2.Count) return false;

        for(int i=0;i<tree1.Count;i++){
            if(tree1[i]!= tree2[i]) return false;
        }
        return true;
    }

    private void traverse(TreeNode node, List<int> tree){
        if(node==null) return;

        if(node.left== null && node.right == null)
            tree.Add(node.val);

        traverse(node.left,tree);
        traverse(node.right,tree);
    }
}

Sample Test Case: [3,5,1,6,2,9,8,null,null,7,4]
[3,5,1,6,7,4,2,null,null,null,null,null,null,9,8]

- Title Slug: middle-of-the-linked-list
Question FrontEnd Id: 876
Title: Middle of the Linked List
Difficulty: Easy
Status: ac
Stats: {"totalAccepted": "1.3M", "totalSubmission": "1.7M", "totalAcceptedRaw": 1294153, "totalSubmissionRaw": 1709171, "acRate": "75.7%"}
Submissions: 1
ID: 873142181
Language Name: csharp
Language Verbose Name: C#
Question ID: 908
URL: 
Code: /**
 * Definition for singly-linked list.
 * public class ListNode {
 *     public int val;
 *     public ListNode next;
 *     public ListNode(int val=0, ListNode next=null) {
 *         this.val = val;
 *         this.next = next;
 *     }
 * }
 */
public class Solution {
    public ListNode MiddleNode(ListNode head) {
        ListNode fast = head;
        ListNode slow= head;


        while(fast.next!=null && fast.next.next!=null){
            fast=fast.next.next;
            slow=slow.next;
        }

        if(fast.next!=null)
        return slow.next;

        return slow;

    }
}

Sample Test Case: [1,2,3,4,5]

- Title Slug: fruit-into-baskets
Question FrontEnd Id: 904
Title: Fruit Into Baskets
Difficulty: Medium
Status: ac
Stats: {"totalAccepted": "330.6K", "totalSubmission": "756.5K", "totalAcceptedRaw": 330584, "totalSubmissionRaw": 756452, "acRate": "43.7%"}
Submissions: 1
ID: 903834691
Language Name: csharp
Language Verbose Name: C#
Question ID: 940
URL: 
Code: public class Solution {
    public int TotalFruit(int[] fruits) {
        int max=0;
        for(int i=0;i<fruits.Length;i++){
            if(fruits.Length-i <max) return max;
            max=Math.Max(max,countFruit(i,fruits));
        }
        return max;
    }

    private int countFruit(int x, int[] fruits){
        int count=0;
        HashSet<int> baskets= new HashSet<int>();
        for(int i=x;i<fruits.Length;i++){
            baskets.Add(fruits[i]);
            if(baskets.Count>2) break;

            count++;
        }
        return count;
    }
}

Sample Test Case: [1,2,1]

- Title Slug: n-repeated-element-in-size-2n-array
Question FrontEnd Id: 961
Title: N-Repeated Element in Size 2N Array
Difficulty: Easy
Status: ac
Stats: {"totalAccepted": "204.7K", "totalSubmission": "269K", "totalAcceptedRaw": 204660, "totalSubmissionRaw": 269032, "acRate": "76.1%"}
Submissions: 1
ID: 932823836
Language Name: csharp
Language Verbose Name: C#
Question ID: 1001
URL: 
Code: public class Solution {
    public int RepeatedNTimes(int[] nums) {
        int n = nums.Length/2;
        Dictionary<int,int> d = new();
        for(int i=0;i<nums.Length;i++){
            if(d.ContainsKey(nums[i])){
                d[nums[i]]++;
                if(d[nums[i]]==n)return nums[i];
            }else{
                d.Add(nums[i],1);
            }
        }
        return -1;
    }
}

Sample Test Case: [1,2,3,3]

- Title Slug: cousins-in-binary-tree
Question FrontEnd Id: 993
Title: Cousins in Binary Tree
Difficulty: Easy
Status: ac
Stats: {"totalAccepted": "240.9K", "totalSubmission": "440.8K", "totalAcceptedRaw": 240871, "totalSubmissionRaw": 440837, "acRate": "54.6%"}
Submissions: 1
ID: 925677774
Language Name: csharp
Language Verbose Name: C#
Question ID: 1035
URL: 
Code: /**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     public int val;
 *     public TreeNode left;
 *     public TreeNode right;
 *     public TreeNode(int val=0, TreeNode left=null, TreeNode right=null) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
public class Solution {
    int xDepth;
    int yDepth;
    TreeNode xParent;
    TreeNode yParent;
    int xVal;
    int yVal;
    public bool IsCousins(TreeNode root, int x, int y) {
        xDepth=0;
        yDepth=0;
        xParent = null;
        yParent = null;
        xVal=x;
        yVal=y;
        traverse(root, 0);
        return xParent!=yParent && xDepth == yDepth; 
    }

    private void traverse(TreeNode node, int depth){
        if(node==null) return;

        if((node.left!=null && node.left.val == xVal) || (node.right!=null && node.right.val == xVal)){
            xDepth= depth+1;
            xParent = node;
        }

        if((node.left!=null && node.left.val == yVal) || (node.right!=null && node.right.val == yVal)){
            yDepth= depth+1;
            yParent = node;
        }       
        depth++;
        traverse(node.left,depth);
        traverse(node.right, depth);

    }
}

Sample Test Case: [1,2,3,4]
4
3

- Title Slug: find-common-characters
Question FrontEnd Id: 1002
Title: Find Common Characters
Difficulty: Easy
Status: ac
Stats: {"totalAccepted": "177.2K", "totalSubmission": "258.5K", "totalAcceptedRaw": 177160, "totalSubmissionRaw": 258521, "acRate": "68.5%"}
Submissions: 1
ID: 874483951
Language Name: csharp
Language Verbose Name: C#
Question ID: 1044
URL: 
Code: public class Solution {
    public IList<string> CommonChars(string[] words) {
     List<string> common = new();

     Dictionary<char,int> word1 = new();
     for(int i=0;i<words[0].Length;i++){
         if(word1.ContainsKey(words[0][i])){
             word1[words[0][i]]++;
         }else{
             word1.Add(words[0][i],1);
         }
     }

    for(int i=1;i<words.Length;i++){
        foreach(KeyValuePair<char,int> kvp in word1){
            int counter= 0;
            for(int j=0;j<words[i].Length;j++){
                if(words[i][j]==kvp.Key)
                counter++;
            }

            word1[kvp.Key]=Math.Min(counter,kvp.Value);
        }
    }

    foreach(KeyValuePair<char,int> kvp in word1){
        for(int i=0;i<kvp.Value;i++){
            common.Add(Char.ToString(kvp.Key));
        }
    }


     return common;

    }

    }

Sample Test Case: ["bella","label","roller"]

- Title Slug: remove-outermost-parentheses
Question FrontEnd Id: 1021
Title: Remove Outermost Parentheses
Difficulty: Easy
Status: ac
Stats: {"totalAccepted": "215.6K", "totalSubmission": "267.1K", "totalAcceptedRaw": 215591, "totalSubmissionRaw": 267079, "acRate": "80.7%"}
Submissions: 1
ID: 881514017
Language Name: csharp
Language Verbose Name: C#
Question ID: 1078
URL: 
Code: public class Solution {
    public string RemoveOuterParentheses(string s) {
        Stack<char> prim = new();
        StringBuilder strb = new StringBuilder();
        StringBuilder ret = new StringBuilder();
        for(int i=0;i<s.Length;i++){
            //Console.WriteLine($"{s[i]}  {strb.Length}");
            if(prim.Count==0 && strb.Length !=0){
              //  Console.WriteLine(strb.ToString());
                strb.Remove(0,1);
                strb.Remove(strb.Length-1,1);
                ret.Append(strb.ToString());
                strb= new StringBuilder();
            }
                strb.Append(s[i]);
                if(s[i]=='('){
                    prim.Push('(');
                }else{
                    prim.Pop();
                }
        }
        if(strb.Length!=0){
         strb.Remove(0,1);
                strb.Remove(strb.Length-1,1);
                ret.Append(strb.ToString());
                strb= new StringBuilder();
        
        }
        
        return ret.ToString();
    }
}

Sample Test Case: "(()())(())"

- Title Slug: divisor-game
Question FrontEnd Id: 1025
Title: Divisor Game
Difficulty: Easy
Status: ac
Stats: {"totalAccepted": "200.2K", "totalSubmission": "296.1K", "totalAcceptedRaw": 200222, "totalSubmissionRaw": 296109, "acRate": "67.6%"}
Submissions: 1
ID: 881515551
Language Name: csharp
Language Verbose Name: C#
Question ID: 1086
URL: 
Code: public class Solution {
    public bool DivisorGame(int n) {
        return n%2==0;
    }
}

Sample Test Case: 2

- Title Slug: remove-vowels-from-a-string
Question FrontEnd Id: 1119
Title: Remove Vowels from a String
Difficulty: Easy
Status: ac
Stats: {"totalAccepted": "94.4K", "totalSubmission": "103.9K", "totalAcceptedRaw": 94368, "totalSubmissionRaw": 103919, "acRate": "90.8%"}
Submissions: 1
ID: 918470931
Language Name: csharp
Language Verbose Name: C#
Question ID: 1089
URL: 
Code: public class Solution {
    public string RemoveVowels(string s) {
        char[] vowels = new char[]{'a','e','i','o','u'};
        StringBuilder sb = new StringBuilder();
        for(int i=0;i<s.Length;i++){
            if(!vowels.Contains(s[i])) sb.Append(s[i]);
        }
        return sb.ToString();
    }
}

Sample Test Case: "leetcodeisacommunityforcoders"

- Title Slug: armstrong-number
Question FrontEnd Id: 1134
Title: Armstrong Number
Difficulty: Easy
Status: ac
Stats: {"totalAccepted": "32K", "totalSubmission": "41.2K", "totalAcceptedRaw": 32027, "totalSubmissionRaw": 41203, "acRate": "77.7%"}
Submissions: 1
ID: 918468904
Language Name: csharp
Language Verbose Name: C#
Question ID: 1090
URL: 
Code: public class Solution {
    public bool IsArmstrong(int n) {
        int check =0;
        int test = n;
        int power = n.ToString().Length;
        
        while(n>0){
            int num = n%10;
            check+= (int)Math.Pow(num, power);
            n/=10;
        }
        return check==test;
    }
}

Sample Test Case: 153

- Title Slug: flower-planting-with-no-adjacent
Question FrontEnd Id: 1042
Title: Flower Planting With No Adjacent
Difficulty: Medium
Status: ac
Stats: {"totalAccepted": "66.3K", "totalSubmission": "131.1K", "totalAcceptedRaw": 66336, "totalSubmissionRaw": 131073, "acRate": "50.6%"}
Submissions: 1
ID: 906965929
Language Name: csharp
Language Verbose Name: C#
Question ID: 1120
URL: 
Code: public class Solution {
    public int[] GardenNoAdj(int n, int[][] paths) {
        Dictionary<int,List<int>> garden = new();
        for(int i=0;i<paths.Length;i++){
            if(garden.ContainsKey(paths[i][0])){
                garden[paths[i][0]].Add(paths[i][1]);
            }else{
                garden.Add(paths[i][0], new List<int>{paths[i][1]});
            }
            
            if(garden.ContainsKey(paths[i][1])){
                garden[paths[i][1]].Add(paths[i][0]);
            }else{
                garden.Add(paths[i][1], new List<int>{paths[i][0]});
            }
                
        }
        
           int[] ret = new int[n];
          for (int i = 1; i <= n; i++) {
        // Get the set of used flower types by neighboring gardens
        HashSet<int> used = new HashSet<int>();
        if (garden.ContainsKey(i)) {
            foreach (int j in garden[i]) {
                if (ret[j - 1] > 0) used.Add(ret[j - 1]);
            }
        }
        // Assign the lowest unused flower type to the current garden
        for (int j = 1; j <= 4; j++) {
            if (!used.Contains(j)) {
                ret[i - 1] = j;
                break;
            }
        }
    }

    return ret;
    }
}

Sample Test Case: 3
[[1,2],[2,3],[3,1]]

- Title Slug: letter-tile-possibilities
Question FrontEnd Id: 1079
Title: Letter Tile Possibilities
Difficulty: Medium
Status: ac
Stats: {"totalAccepted": "84.2K", "totalSubmission": "110.8K", "totalAcceptedRaw": 84196, "totalSubmissionRaw": 110750, "acRate": "76.0%"}
Submissions: 1
ID: 906964498
Language Name: csharp
Language Verbose Name: C#
Question ID: 1160
URL: 
Code: public class Solution {
    public int NumTilePossibilities(string tiles) {
         Dictionary<char, int> freq = new Dictionary<char, int>();
    foreach (char c in tiles) {
        if (freq.ContainsKey(c)) {
            freq[c]++;
        } else {
            freq[c] = 1;
        }
    }

    // Recursively calculate the number of possible sequences
    return CountPossibilities(freq);
    }
    
    private int CountPossibilities(Dictionary<char, int> freq) {
    int count = 0;
    foreach (char c in freq.Keys) {
        if (freq[c] > 0) {
            // Add the current letter to the sequence
            count++;

            // Decrement the frequency of the current letter and recursively count possibilities
            freq[c]--;
            count += CountPossibilities(freq);

            // Restore the frequency of the current letter
            freq[c]++;
        }
    }
    return count;
}
}

Sample Test Case: "AAB"

- Title Slug: delete-nodes-and-return-forest
Question FrontEnd Id: 1110
Title: Delete Nodes And Return Forest
Difficulty: Medium
Status: ac
Stats: {"totalAccepted": "180.3K", "totalSubmission": "260.3K", "totalAcceptedRaw": 180346, "totalSubmissionRaw": 260343, "acRate": "69.3%"}
Submissions: 1
ID: 907550070
Language Name: csharp
Language Verbose Name: C#
Question ID: 1207
URL: 
Code: /**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     public int val;
 *     public TreeNode left;
 *     public TreeNode right;
 *     public TreeNode(int val=0, TreeNode left=null, TreeNode right=null) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
public class Solution {
    List<TreeNode> forest;
    public IList<TreeNode> DelNodes(TreeNode root, int[] to_delete) {
    forest = new List<TreeNode>();
        if(!to_delete.Contains(root.val)) forest.Add(root);
        delete(root,null, to_delete);
        
        return forest;
    }
    
    private void delete(TreeNode node, TreeNode parent, int[] to_delete){
        if(node == null) return;
        
        Console.WriteLine(node.val);
        
        if(to_delete.Contains(node.val)){
            addNodeToForest(node.left, to_delete);
            addNodeToForest(node.right, to_delete);
            
            if(parent != null) {
                if(parent.left == node) parent.left = null;
                else parent.right = null;
            }
        }
        delete(node.left, node, to_delete);
        delete(node.right, node, to_delete);
        
        
    }
    
     private void addNodeToForest(TreeNode node, int[] to_delete) {
        if(node != null && !to_delete.Contains(node.val)) {
            forest.Add(node);
        }
    }
    
}

Sample Test Case: [1,2,3,4,5,6,7]
[3,5]

- Title Slug: deepest-leaves-sum
Question FrontEnd Id: 1302
Title: Deepest Leaves Sum
Difficulty: Medium
Status: ac
Stats: {"totalAccepted": "272.1K", "totalSubmission": "314.1K", "totalAcceptedRaw": 272098, "totalSubmissionRaw": 314123, "acRate": "86.6%"}
Submissions: 1
ID: 906909000
Language Name: csharp
Language Verbose Name: C#
Question ID: 1254
URL: 
Code: /**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     public int val;
 *     public TreeNode left;
 *     public TreeNode right;
 *     public TreeNode(int val=0, TreeNode left=null, TreeNode right=null) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
public class Solution {
    public int DeepestLeavesSum(TreeNode root) {
        Queue<TreeNode> q1 = new();
        int deepestSum=-1;
        q1.Enqueue(root);
        while(q1.Count!=0){
            int size = q1.Count;
            deepestSum=0;
            while(size>0){
                TreeNode node = q1.Dequeue();
                deepestSum+=node.val;
            
                if(node.left!=null)
                q1.Enqueue(node.left);
                if(node.right!=null)
                q1.Enqueue(node.right);
                size--;
            }
        }
        return deepestSum;
        
    }
}

Sample Test Case: [1,2,3,4,5,null,6,7,null,null,null,null,8]

- Title Slug: three-consecutive-odds
Question FrontEnd Id: 1550
Title: Three Consecutive Odds
Difficulty: Easy
Status: ac
Stats: {"totalAccepted": "65.8K", "totalSubmission": "103.7K", "totalAcceptedRaw": 65802, "totalSubmissionRaw": 103713, "acRate": "63.4%"}
Submissions: 1
ID: 918466541
Language Name: csharp
Language Verbose Name: C#
Question ID: 1293
URL: 
Code: public class Solution {
    public bool ThreeConsecutiveOdds(int[] arr) {
      for(int i=0;i<arr.Length-2;i++){
          if(arr[i]%2==1 && arr[i+1]%2==1 && arr[i+2]%2==1) return true;
          if(arr[i+2]%2==0){
            i+=2;
            continue;
          }
          if(arr[i+1]%2==0){
            i++;
            continue;
          }
      }  

      return false;
    }
}

Sample Test Case: [2,6,4,1]

- Title Slug: maximum-number-of-balloons
Question FrontEnd Id: 1189
Title: Maximum Number of Balloons
Difficulty: Easy
Status: ac
Stats: {"totalAccepted": "145.2K", "totalSubmission": "238.2K", "totalAcceptedRaw": 145211, "totalSubmissionRaw": 238249, "acRate": "60.9%"}
Submissions: 1
ID: 933976341
Language Name: csharp
Language Verbose Name: C#
Question ID: 1297
URL: 
Code: public class Solution {
    public int MaxNumberOfBalloons(string text) {
        Dictionary<char,int> count = new();
        count.Add('b',0);
        count.Add('a',0);
        count.Add('l',0);
        count.Add('o',0);
        count.Add('n',0);
        for(int i=0;i<text.Length;i++){
            if(count.ContainsKey(text[i])){
                count[text[i]]++;
            }
        }
        return Math.Min(count['b'],Math.Min(count['a'],Math.Min(count['l']/2,Math.Min(count['o']/2,count['n']))));
    }
}

Sample Test Case: "nlaebolko"

- Title Slug: cells-with-odd-values-in-a-matrix
Question FrontEnd Id: 1252
Title: Cells with Odd Values in a Matrix
Difficulty: Easy
Status: ac
Stats: {"totalAccepted": "94.3K", "totalSubmission": "120.1K", "totalAcceptedRaw": 94294, "totalSubmissionRaw": 120118, "acRate": "78.5%"}
Submissions: 1
ID: 912492120
Language Name: csharp
Language Verbose Name: C#
Question ID: 1378
URL: 
Code: public class Solution {
    int[][] matrix;
    public int OddCells(int m, int n, int[][] indices) {
        matrix = new int[m][];
        for(int i=0;i<m;i++){
            matrix[i]= new int[n];
        }
        //increment(indices);
        //return countOdds();
        for(int i=0;i<indices.Length;i++){   
            int y= indices[i][0];
            int x = indices[i][1];
            for(int j=0;j<matrix.Length;j++){
                matrix[j][x]++;
            }
            for(int j=0;j<matrix[0].Length;j++){
                matrix[y][j]++;
            }
        }
        int counter=0;
        for(int y=0;y<matrix.Length;y++){
            for(int x = 0;x<matrix[y].Length;x++){
               
                if(matrix[y][x]%2==1)counter++;
            }
         
        }
        return counter;

       
    }

    private int countOdds(){
        int counter=0;
        for(int y=0;y<matrix.Length;y++){
            for(int x = 0;x<matrix[y].Length;x++){
               
                if(matrix[y][x]%2==1)counter++;
            }
         
        }
        return counter;
    }

    private void increment(int[][] indices){
        for(int i=0;i<indices.Length;i++){
           
            int y= indices[i][0];
            int x = indices[i][1];
           
            for(int j=0;j<matrix.Length;j++){
                matrix[j][x]++;
            }
            for(int j=0;j<matrix[0].Length;j++){
                matrix[y][j]++;
            }
           
        }
    }

}

Sample Test Case: 2
3
[[0,1],[1,1]]

- Title Slug: calculate-amount-paid-in-taxes
Question FrontEnd Id: 2303
Title: Calculate Amount Paid in Taxes
Difficulty: Easy
Status: ac
Stats: {"totalAccepted": "29.3K", "totalSubmission": "45.8K", "totalAcceptedRaw": 29271, "totalSubmissionRaw": 45770, "acRate": "64.0%"}
Submissions: 1
ID: 875231501
Language Name: csharp
Language Verbose Name: C#
Question ID: 1382
URL: 
Code: public class Solution {
    public double CalculateTax(int[][] brackets, int income) {
        double tax = 0;
        int pointer=0;
        int lower=0;
        while(income>0){
           if(income-brackets[pointer][0]+lower<=0){
               
               tax+=income*((double)brackets[pointer][1]/100);
               break;
           }else{
            tax+=(brackets[pointer][0]-lower)*((double)brackets[pointer][1]/100);
            income-=brackets[pointer][0]-lower;
           }

           Console.WriteLine($"Money leftover: {income}");
           lower=brackets[pointer][0];
           pointer++;

        }
        return tax;



    }
}
/*
[12,25]
[7,10]
[3,50] 

7
*/

Sample Test Case: [[3,50],[7,10],[12,25]]
10

- Title Slug: count-square-submatrices-with-all-ones
Question FrontEnd Id: 1277
Title: Count Square Submatrices with All Ones
Difficulty: Medium
Status: ac
Stats: {"totalAccepted": "192.7K", "totalSubmission": "258.5K", "totalAcceptedRaw": 192687, "totalSubmissionRaw": 258493, "acRate": "74.5%"}
Submissions: 1
ID: 907888698
Language Name: csharp
Language Verbose Name: C#
Question ID: 1402
URL: 
Code: public class Solution {
    public int CountSquares(int[][] matrix) {
        int size = 1;
        int count=0;
        while(size<=Math.Min(matrix.Length,matrix[0].Length)){

            for(int y=0;y<=matrix.Length-size;y++){
                for(int x=0;x<=matrix[y].Length-size;x++){
                    if(allOnes(matrix,y,x,size))
                        count++;
                    
                }
            }
                
           size++; 
        }
        
        return count;
    }
    
    
    private bool allOnes(int[][] matrix, int y, int x, int size){
        for(int i=y;i<y+size;i++){
            for(int j=x;j<x+size;j++){
                if(matrix[i][j]!=1)
                    return false;
            }
        }
        return true;
    }
}

Sample Test Case: [[0,1,1,1],[1,1,1,1],[0,1,1,1]]

- Title Slug: all-elements-in-two-binary-search-trees
Question FrontEnd Id: 1305
Title: All Elements in Two Binary Search Trees
Difficulty: Medium
Status: ac
Stats: {"totalAccepted": "188.2K", "totalSubmission": "235.7K", "totalAcceptedRaw": 188151, "totalSubmissionRaw": 235683, "acRate": "79.8%"}
Submissions: 1
ID: 911854072
Language Name: csharp
Language Verbose Name: C#
Question ID: 1427
URL: 
Code: /**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     public int val;
 *     public TreeNode left;
 *     public TreeNode right;
 *     public TreeNode(int val=0, TreeNode left=null, TreeNode right=null) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
public class Solution {
    List<int> ret;

    public IList<int> GetAllElements(TreeNode root1, TreeNode root2) {
        ret = new List<int>();
        traverse(root1);
        traverse(root2);
        ret.Sort();
        return ret;
    }


    private void traverse(TreeNode node){
        if(node== null) return;
        traverse(node.left);
        ret.Add(node.val);
        traverse(node.right);
    }
}

Sample Test Case: [2,1,4]
[1,0,3]

- Title Slug: find-the-k-beauty-of-a-number
Question FrontEnd Id: 2269
Title: Find the K-Beauty of a Number
Difficulty: Easy
Status: ac
Stats: {"totalAccepted": "36K", "totalSubmission": "62.5K", "totalAcceptedRaw": 36021, "totalSubmissionRaw": 62481, "acRate": "57.7%"}
Submissions: 1
ID: 874509014
Language Name: csharp
Language Verbose Name: C#
Question ID: 1430
URL: 
Code: public class Solution {
    public int DivisorSubstrings(int num, int k) {
        int kBeauty=0;
        int kSize = (int)Math.Pow(10,k);
        int main = num;
        while(num>=(int)Math.Pow(10,k-1)){
            int test = num%kSize;
            Console.WriteLine(test);
            if(test!=0 && main%test==0){
            kBeauty++;
            }
            num/=10;
        }
        return kBeauty;
    }
}

Sample Test Case: 240
2

- Title Slug: reduce-array-size-to-the-half
Question FrontEnd Id: 1338
Title: Reduce Array Size to The Half
Difficulty: Medium
Status: ac
Stats: {"totalAccepted": "170.7K", "totalSubmission": "246K", "totalAcceptedRaw": 170710, "totalSubmissionRaw": 245978, "acRate": "69.4%"}
Submissions: 1
ID: 928138001
Language Name: csharp
Language Verbose Name: C#
Question ID: 1464
URL: 
Code: public class Solution {
    public int MinSetSize(int[] arr) {
        Dictionary<int, int> counters = new();
        for(int i=0;i<arr.Length;i++){
            if(counters.ContainsKey(arr[i]))
            counters[arr[i]]++;
            else
                counters.Add(arr[i],1);
        }

        PriorityQueue<int,int> q = new();
        foreach(KeyValuePair<int,int> kvp in counters){
            q.Enqueue(kvp.Value,-kvp.Value);
        }

        int counter =0;
        int half = arr.Length/2;
        while(half>0){
            half-=q.Dequeue();
            counter++;
        }
        return counter;
    }
}

Sample Test Case: [3,3,3,3,5,5,5,2,2,7]

- Title Slug: check-if-n-and-its-double-exist
Question FrontEnd Id: 1346
Title: Check If N and Its Double Exist
Difficulty: Easy
Status: ac
Stats: {"totalAccepted": "278.9K", "totalSubmission": "762.7K", "totalAcceptedRaw": 278879, "totalSubmissionRaw": 762680, "acRate": "36.6%"}
Submissions: 1
ID: 910611014
Language Name: csharp
Language Verbose Name: C#
Question ID: 1468
URL: 
Code: public class Solution {
    public bool CheckIfExist(int[] arr) {
        for(int i=0;i<arr.Length;i++){
            if(Array.IndexOf(arr,arr[i]*2)!=i && Array.IndexOf(arr, arr[i]*2)!=-1)
            return true;
        }
        return false;
    }
}

Sample Test Case: [10,2,5,3]

- Title Slug: count-number-of-teams
Question FrontEnd Id: 1395
Title: Count Number of Teams
Difficulty: Medium
Status: ac
Stats: {"totalAccepted": "100.4K", "totalSubmission": "149.7K", "totalAcceptedRaw": 100439, "totalSubmissionRaw": 149705, "acRate": "67.1%"}
Submissions: 1
ID: 933983580
Language Name: csharp
Language Verbose Name: C#
Question ID: 1511
URL: 
Code: public class Solution {
    public int NumTeams(int[] rating) {
        int count=0;
        for(int i=0;i<rating.Length-2;i++){
            for(int j=i+1;j<rating.Length-1;j++){
                for(int k=j+1;k<rating.Length;k++){
                    if((rating[i]<rating[j] && rating[j]<rating[k]) || (rating[i]>rating[j] && rating[j]>rating[k]))
                        count++;
                }
            }
        }
        return count;
    }
}

Sample Test Case: [2,5,3,4,1]

- Title Slug: minimum-subsequence-in-non-increasing-order
Question FrontEnd Id: 1403
Title: Minimum Subsequence in Non-Increasing Order
Difficulty: Easy
Status: ac
Stats: {"totalAccepted": "61.1K", "totalSubmission": "84.6K", "totalAcceptedRaw": 61121, "totalSubmissionRaw": 84582, "acRate": "72.3%"}
Submissions: 1
ID: 925698165
Language Name: csharp
Language Verbose Name: C#
Question ID: 1519
URL: 
Code: public class Solution {
    public IList<int> MinSubsequence(int[] nums) {
        Array.Sort(nums);
        int total = 0;
        for(int i=0;i<nums.Length;i++){
            total+= nums[i];
        }

        int pointer = nums.Length-1;
        int sub =0;
        List<int> ret = new();
        while(sub<= total-sub){
            sub+= nums[pointer];
            ret.Add(nums[pointer]);
            pointer--;
        }

        return ret;



    } 
}

Sample Test Case: [4,3,10,9,8]

- Title Slug: count-good-nodes-in-binary-tree
Question FrontEnd Id: 1448
Title: Count Good Nodes in Binary Tree
Difficulty: Medium
Status: ac
Stats: {"totalAccepted": "313.4K", "totalSubmission": "421.9K", "totalAcceptedRaw": 313389, "totalSubmissionRaw": 421918, "acRate": "74.3%"}
Submissions: 1
ID: 933422577
Language Name: csharp
Language Verbose Name: C#
Question ID: 1544
URL: 
Code: /**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     public int val;
 *     public TreeNode left;
 *     public TreeNode right;
 *     public TreeNode(int val=0, TreeNode left=null, TreeNode right=null) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
public class Solution {
    int count;
    public int GoodNodes(TreeNode root) {
       if(root==null) return 0;
       count=0;

       traverse(root,root.val);
       return count;
    }
    private void traverse(TreeNode node, int max){
        if(node==null) return;
        if(max<= node.val){
            count++;
            max = node.val;
        }

        traverse(node.left,max);
        traverse(node.right,max);
    }
}

Sample Test Case: [3,1,4,3,null,1,5]

- Title Slug: shuffle-the-array
Question FrontEnd Id: 1470
Title: Shuffle the Array
Difficulty: Easy
Status: ac
Stats: {"totalAccepted": "519.8K", "totalSubmission": "584.4K", "totalAcceptedRaw": 519773, "totalSubmissionRaw": 584354, "acRate": "88.9%"}
Submissions: 1
ID: 892414162
Language Name: csharp
Language Verbose Name: C#
Question ID: 1580
URL: 
Code: public class Solution {
    public int[] Shuffle(int[] nums, int n) {
       int[] ret = new int[2*n];
        int x=0;
        int y = n;
        int position=0;
        while(position<ret.Length){
            if(position%2==0){
                ret[position]=nums[x];
                x++;
            }else{
                ret[position]=nums[y];
                y++;
            }
            position++;
        }
        return ret;
       
    }
}

Sample Test Case: [2,5,1,3,4,7]
3

- Title Slug: count-good-triplets
Question FrontEnd Id: 1534
Title: Count Good Triplets
Difficulty: Easy
Status: ac
Stats: {"totalAccepted": "96.5K", "totalSubmission": "119.3K", "totalAcceptedRaw": 96513, "totalSubmissionRaw": 119336, "acRate": "80.9%"}
Submissions: 1
ID: 874467034
Language Name: csharp
Language Verbose Name: C#
Question ID: 1656
URL: 
Code: public class Solution {
    public int CountGoodTriplets(int[] arr, int a, int b, int c) {
        int good = 0;

        for(int i=0;i<arr.Length-2;i++){
            for(int j=i+1;j<arr.Length-1;j++){
                for(int k=j+1;k<arr.Length;k++){
                    if(Math.Abs(arr[i]-arr[j])<=a &&Math.Abs(arr[j]-arr[k])<=b &&Math.Abs(arr[i]-arr[k])<=c)
                    good++;
                }
            }
        }

        return good;
    }
}

Sample Test Case: [3,0,1,1,9,7]
7
2
3

- Title Slug: find-the-index-of-the-large-integer
Question FrontEnd Id: 1533
Title: Find the Index of the Large Integer
Difficulty: Medium
Status: ac
Stats: {"totalAccepted": "10.2K", "totalSubmission": "18.3K", "totalAcceptedRaw": 10235, "totalSubmissionRaw": 18260, "acRate": "56.1%"}
Submissions: 1
ID: 892411513
Language Name: csharp
Language Verbose Name: C#
Question ID: 1672
URL: 
Code: /**
 * // This is ArrayReader's API interface.
 * // You should not implement it, or speculate about its implementation
 * class ArrayReader {
 *     // Compares the sum of arr[l..r] with the sum of arr[x..y] 
 *     // return 1 if sum(arr[l..r]) > sum(arr[x..y])
 *     // return 0 if sum(arr[l..r]) == sum(arr[x..y])
 *     // return -1 if sum(arr[l..r]) < sum(arr[x..y])
 *     public int CompareSub(int l, int r, int x, int y) {}
 *
 *     // Returns the length of the array
 *     public int Length() {}
 * }
 */

class Solution {
    public int GetIndex(ArrayReader reader) {
        
        int l=0;
        int y= reader.Length()-1;
        

        while(l<y){
            int third = (y-l+2)/3;
            if(third==0){
                if(reader.CompareSub(l,l,y,y)>0){
                    return l;
                }
                return y;
            }
            int checker = reader.CompareSub(l,l+third-1,y-third+1,y);
           
            if(checker==1){
                y=l+third-1;

            }
            if(checker ==0){
                l=l+third;
                y=y-third;
            }

            if(checker ==-1){
                l=y-third+1;
            }

        }
        return l;
    }
}

Sample Test Case: [7,7,7,7,10,7,7,7]

- Title Slug: minimum-operations-to-make-array-equal
Question FrontEnd Id: 1551
Title: Minimum Operations to Make Array Equal
Difficulty: Medium
Status: ac
Stats: {"totalAccepted": "82K", "totalSubmission": "100.6K", "totalAcceptedRaw": 82035, "totalSubmissionRaw": 100561, "acRate": "81.6%"}
Submissions: 1
ID: 932835082
Language Name: csharp
Language Verbose Name: C#
Question ID: 1674
URL: 
Code: public class Solution {
    public int MinOperations(int n) {
      return (n/2)*(n-(n/2));
    }
}
/*
1:3
2:5
3:7
4:9
5:11
6:13

*/

Sample Test Case: 3

- Title Slug: matrix-diagonal-sum
Question FrontEnd Id: 1572
Title: Matrix Diagonal Sum
Difficulty: Easy
Status: ac
Stats: {"totalAccepted": "177.6K", "totalSubmission": "221K", "totalAcceptedRaw": 177563, "totalSubmissionRaw": 221024, "acRate": "80.3%"}
Submissions: 1
ID: 923392034
Language Name: csharp
Language Verbose Name: C#
Question ID: 1677
URL: 
Code: public class Solution {
    public int DiagonalSum(int[][] mat) {
        int ret = 0;
        for(int i=0;i<mat.Length;i++){
            ret+=mat[i][i]+mat[mat.Length-1-i][i];
        }

        if(mat.Length%2==1)
            ret-=mat[mat.Length/2][mat.Length/2];
        return ret;
    }
}

Sample Test Case: [[1,2,3],[4,5,6],[7,8,9]]

- Title Slug: largest-substring-between-two-equal-characters
Question FrontEnd Id: 1624
Title: Largest Substring Between Two Equal Characters
Difficulty: Easy
Status: ac
Stats: {"totalAccepted": "41.7K", "totalSubmission": "70.6K", "totalAcceptedRaw": 41719, "totalSubmissionRaw": 70608, "acRate": "59.1%"}
Submissions: 1
ID: 923398887
Language Name: csharp
Language Verbose Name: C#
Question ID: 1746
URL: 
Code: public class Solution {
    public int MaxLengthBetweenEqualCharacters(string s) {
        int max = -1;
        for(int i=0;i<s.Length-1;i++){
            for(int j=i+1;j<s.Length;j++){
                if(s[i]==s[j] && (j-i-1)>max)
                max = j-i-1;
            }
        }

        return max;
    }
}

Sample Test Case: "aa"

- Title Slug: decode-xored-array
Question FrontEnd Id: 1720
Title: Decode XORed Array
Difficulty: Easy
Status: ac
Stats: {"totalAccepted": "110.5K", "totalSubmission": "128.7K", "totalAcceptedRaw": 110469, "totalSubmissionRaw": 128740, "acRate": "85.8%"}
Submissions: 1
ID: 912505617
Language Name: csharp
Language Verbose Name: C#
Question ID: 1839
URL: 
Code: public class Solution {
    public int[] Decode(int[] encoded, int first) {
        int[] ret = new int[encoded.Length+1];
        ret[0]= first;
        for(int i=1;i<ret.Length;i++){
           //ret[i]= (encoded[i-1]&~ret[i-1]) | (~encoded[i-1] & ret[i-1]);

            ret[i]= encoded[i-1] ^ ret[i-1];
            //is in c and not in a  <- is in b
            //not in c and in a <- is in b
            /*
            b = (c && !a) || (!c && a) 

            */
        }
        return ret;

    }
}
/*

[_,1,2,3] encoded

[1,0,2,1] arr

10
01
11

1 xor _ = 1

a XOR b = c

c ___ a = b



a=111
b=111
c=000

a=000
b=111
c=111
*/

Sample Test Case: [1,2,3]
1

- Title Slug: maximum-number-of-balls-in-a-box
Question FrontEnd Id: 1742
Title: Maximum Number of Balls in a Box
Difficulty: Easy
Status: ac
Stats: {"totalAccepted": "51.4K", "totalSubmission": "69.8K", "totalAcceptedRaw": 51360, "totalSubmissionRaw": 69751, "acRate": "73.6%"}
Submissions: 1
ID: 921629234
Language Name: csharp
Language Verbose Name: C#
Question ID: 1844
URL: 
Code: public class Solution {
    public int CountBalls(int lowLimit, int highLimit) {
        Dictionary<int,int> boxes = new();
        int max =0;
        for(int i=lowLimit;i<=highLimit;i++){
            int num = i;
            int box = 0; 
            while(num>0){
                int adder = num%10;
                box+=adder;
                num/=10;
            }
            if(!boxes.ContainsKey(box)){
                boxes.Add(box,1);
            }else{
                boxes[box]++;
            }
            max= Math.Max(max,boxes[box]);
        }
        return max;
    }
}

Sample Test Case: 1
10

- Title Slug: minimum-number-of-operations-to-move-all-balls-to-each-box
Question FrontEnd Id: 1769
Title: Minimum Number of Operations to Move All Balls to Each Box
Difficulty: Medium
Status: ac
Stats: {"totalAccepted": "99.7K", "totalSubmission": "117.1K", "totalAcceptedRaw": 99741, "totalSubmissionRaw": 117101, "acRate": "85.2%"}
Submissions: 1
ID: 912524769
Language Name: csharp
Language Verbose Name: C#
Question ID: 1895
URL: 
Code: public class Solution {
    public int[] MinOperations(string boxes) {
        int[] ret = new int[boxes.Length];
        for(int i=0;i<ret.Length;i++){
            int counter=0;
            for(int j=0;j<boxes.Length;j++){
                if(boxes[j]=='1'){
                    counter+= Math.Abs(j-i);
                }
            }
            ret[i]=counter;
        }
        return ret;
    }
}
/*
start each box{
    go through each box. if has ball(s) get distance to current box, and add.
}

*/

Sample Test Case: "110"

- Title Slug: find-center-of-star-graph
Question FrontEnd Id: 1791
Title: Find Center of Star Graph
Difficulty: Easy
Status: ac
Stats: {"totalAccepted": "133.7K", "totalSubmission": "160K", "totalAcceptedRaw": 133658, "totalSubmissionRaw": 159975, "acRate": "83.5%"}
Submissions: 1
ID: 925223494
Language Name: csharp
Language Verbose Name: C#
Question ID: 1916
URL: 
Code: public class Solution {
    public int FindCenter(int[][] edges) {
        int n = edges.Length;
       Dictionary<int,int> graph = new();
       for(int i=0;i<edges.Length;i++){
           int edgeA = edges[i][0];
           int edgeB = edges[i][1];
           if(!graph.ContainsKey(edgeA)){
               graph.Add(edgeA,1);
           }else{
               graph[edgeA]++;
               if(graph[edgeA]== n)
               return edgeA;
           }
            
            if(!graph.ContainsKey(edgeB)){
               graph.Add(edgeB,1);
           }else{
               graph[edgeB]++;
               if(graph[edgeB]== n)
               return edgeB;
           }


       }

        return -1; 
    }
}

/*

1- 2 5 3 4
*/

Sample Test Case: [[1,2],[2,3],[4,2]]

- Title Slug: maximum-number-of-consecutive-values-you-can-make
Question FrontEnd Id: 1798
Title: Maximum Number of Consecutive Values You Can Make
Difficulty: Medium
Status: ac
Stats: {"totalAccepted": "13.7K", "totalSubmission": "24.4K", "totalAcceptedRaw": 13654, "totalSubmissionRaw": 24418, "acRate": "55.9%"}
Submissions: 1
ID: 928150629
Language Name: csharp
Language Verbose Name: C#
Question ID: 1930
URL: 
Code: public class Solution {
    public int GetMaximumConsecutive(int[] coins) {
       Array.Sort(coins);
       if(coins[0]>1) return 1;
       int sum = coins[0];
        for(int i=1;i<coins.Length;i++){
            if(coins[i] >sum+1) break;
            sum+= coins[i];
        }

        return sum+1;
    }

}

Sample Test Case: [1,3]

- Title Slug: queries-on-number-of-points-inside-a-circle
Question FrontEnd Id: 1828
Title: Queries on Number of Points Inside a Circle
Difficulty: Medium
Status: ac
Stats: {"totalAccepted": "59.5K", "totalSubmission": "68.9K", "totalAcceptedRaw": 59451, "totalSubmissionRaw": 68871, "acRate": "86.3%"}
Submissions: 1
ID: 879025386
Language Name: csharp
Language Verbose Name: C#
Question ID: 1939
URL: 
Code: public class Solution {
    public int[] CountPoints(int[][] points, int[][] queries) {
        int[] ret = new int[queries.Length];

        for(int i=0;i<ret.Length;i++){
            foreach(int[] point in points){
                if(InCircle(point,queries[i])){
                    ret[i]++;
                }
            }

        }
        return ret;
    }


    private bool InCircle(int[] point, int[] circle){
    /*    int x = point[0];
        int y = point[1];
        int cx = circle[0];
        int cy = circle[1];
        double rad = (double)circle[2];
        double distance = Math.Sqrt(Math.Pow(x-cx,2)+Math.Pow(y-cy,2));
        return distance <=circle[2];

*/
        return Math.Sqrt(Math.Pow(point[0]-circle[0],2)+Math.Pow(point[1]-circle[1],2)) <=circle[2];
    }
}

Sample Test Case: [[1,3],[3,3],[5,3],[2,2]]
[[2,3,1],[4,3,1],[1,1,2]]

- Title Slug: longer-contiguous-segments-of-ones-than-zeros
Question FrontEnd Id: 1869
Title: Longer Contiguous Segments of Ones than Zeros
Difficulty: Easy
Status: ac
Stats: {"totalAccepted": "38K", "totalSubmission": "63K", "totalAcceptedRaw": 38016, "totalSubmissionRaw": 62952, "acRate": "60.4%"}
Submissions: 1
ID: 910009142
Language Name: csharp
Language Verbose Name: C#
Question ID: 1999
URL: 
Code: public class Solution {
    public bool CheckZeroOnes(string s) {
        int longestOne= 0;
        int longestZero=0;
        bool isOne=false;
        int counter=0;
        for(int i=0;i<s.Length;i++){
           if((isOne && s[i]=='1') || (!isOne && s[i]=='0')){
               counter++;
           }else{
               if(isOne && counter>longestOne)longestOne=counter;
                if(!isOne && counter>longestZero)longestZero=counter;
               counter=0;
                i--;
                isOne= !isOne;
           }
            
        }
        if(counter!=0){
             if(isOne && counter>longestOne)longestOne=counter;
                if(!isOne && counter>longestZero)longestZero=counter;
        }
        return longestOne>longestZero;
    }
}

Sample Test Case: "1101"

- Title Slug: maximum-value-after-insertion
Question FrontEnd Id: 1881
Title: Maximum Value after Insertion
Difficulty: Medium
Status: ac
Stats: {"totalAccepted": "23.3K", "totalSubmission": "62.9K", "totalAcceptedRaw": 23302, "totalSubmissionRaw": 62896, "acRate": "37.0%"}
Submissions: 1
ID: 879062501
Language Name: csharp
Language Verbose Name: C#
Question ID: 2011
URL: 
Code: public class Solution {
    public string MaxValue(string n, int x) {
        
        StringBuilder ret = new StringBuilder();
        if(n.Length==1){
            if(Convert.ToInt32(n)-48<x){
                ret.Append(n);
                ret.Append(Convert.ToString(x));
                return ret.ToString();
            }
            ret.Append(Convert.ToString(x));
            ret.Append(n);
            return ret.ToString();
        }
        bool neg = n[0]=='-';
        int start=0;
        if(neg){
            ret.Append(n[start]);
            start++;
            while(start<n.Length){
                Console.WriteLine(Convert.ToInt32(n[start])-48);
                
            if(Convert.ToInt32(n[start])-48<=x){
                Console.WriteLine(n[start]);
                ret.Append(n[start]);
                start++;
            }else{
                break;
            }
            
        }
            ret.Append(x);
            ret.Append(n.Substring(start,n.Length-start));
            return ret.ToString();
        }

        while(start<n.Length){
              if(Convert.ToInt32(n[start])-48>=x){
                  ret.Append(n[start]);
                  start++;
              }else{
                  break;
              }
        }

          ret.Append(x);
            ret.Append(n.Substring(start,n.Length-start));
            return ret.ToString();

    }
}

Sample Test Case: "99"
9

- Title Slug: number-of-strings-that-appear-as-substrings-in-word
Question FrontEnd Id: 1967
Title: Number of Strings That Appear as Substrings in Word
Difficulty: Easy
Status: ac
Stats: {"totalAccepted": "48.2K", "totalSubmission": "60.2K", "totalAcceptedRaw": 48239, "totalSubmissionRaw": 60179, "acRate": "80.2%"}
Submissions: 1
ID: 918470074
Language Name: csharp
Language Verbose Name: C#
Question ID: 2099
URL: 
Code: public class Solution {
    public int NumOfStrings(string[] patterns, string word) {
        int count=0;
        for(int i=0;i<patterns.Length;i++){
            if(word.IndexOf(patterns[i])!=-1) count++;
        }
        return count;
    }
}

Sample Test Case: ["a","abc","bc","d"]
"abc"

- Title Slug: number-of-pairs-of-interchangeable-rectangles
Question FrontEnd Id: 2001
Title: Number of Pairs of Interchangeable Rectangles
Difficulty: Medium
Status: ac
Stats: {"totalAccepted": "24.5K", "totalSubmission": "52.9K", "totalAcceptedRaw": 24475, "totalSubmissionRaw": 52937, "acRate": "46.2%"}
Submissions: 1
ID: 932818180
Language Name: csharp
Language Verbose Name: C#
Question ID: 2129
URL: 
Code: public class Solution {
    public long InterchangeableRectangles(int[][] rectangles) {
        Dictionary<decimal, long> d = new();
        for(int i=0;i<rectangles.Length;i++){
            if(d.ContainsKey((decimal)rectangles[i][0]/(decimal)rectangles[i][1])){
                d[(decimal)rectangles[i][0]/(decimal)rectangles[i][1]]++;
            }else{
                d.Add(((decimal)rectangles[i][0]/(decimal)rectangles[i][1]),1);
            }
        }

        long ret =0;
        foreach(KeyValuePair<decimal,long> kvp in d){
            if(kvp.Value!=1){
                long n=kvp.Value-1;
                ret+= (n*(n+1)/2);
            }
        }
        return ret;

    }
}
/*
2:1
3:3
4:6
5:10
*/

Sample Test Case: [[4,8],[3,6],[10,20],[15,30]]

- Title Slug: simple-bank-system
Question FrontEnd Id: 2043
Title: Simple Bank System
Difficulty: Medium
Status: ac
Stats: {"totalAccepted": "18.4K", "totalSubmission": "28.2K", "totalAcceptedRaw": 18384, "totalSubmissionRaw": 28178, "acRate": "65.2%"}
Submissions: 1
ID: 878325067
Language Name: csharp
Language Verbose Name: C#
Question ID: 2169
URL: 
Code: public class Bank {
    long[] bankAcc;
    public Bank(long[] balance) {
        bankAcc = balance;
        Console.WriteLine(bankAcc[0]);
    }
    
    public bool Transfer(int account1, int account2, long money) {
        account1--;
        account2--;
        if(account1<0 ||account1>= bankAcc.Length || account2<0 || account2 >=bankAcc.Length ||money>bankAcc[account1]){
            return false;
        }
        bankAcc[account1]-=money;
        bankAcc[account2]+=money;
        return true;

    }
    
    public bool Deposit(int account, long money) {
        account--;
        if(account<0 || account>=bankAcc.Length){
            return false;
        }
        bankAcc[account]+=money;
        return true;
    }
    
    public bool Withdraw(int account, long money) {
        account--;
        if(account<0 || account>=bankAcc.Length || bankAcc[account]<money){
            return false;
        }
        bankAcc[account]-=money;
        return true;
    }
}

/**
 * Your Bank object will be instantiated and called as such:
 * Bank obj = new Bank(balance);
 * bool param_1 = obj.Transfer(account1,account2,money);
 * bool param_2 = obj.Deposit(account,money);
 * bool param_3 = obj.Withdraw(account,money);
 */

Sample Test Case: ["Bank","withdraw","transfer","deposit","transfer","withdraw"]
[[[10,100,20,50,30]],[3,10],[5,1,20],[5,20],[3,4,15],[10,50]]

- Title Slug: k-radius-subarray-averages
Question FrontEnd Id: 2090
Title: K Radius Subarray Averages
Difficulty: Medium
Status: ac
Stats: {"totalAccepted": "23.3K", "totalSubmission": "54.6K", "totalAcceptedRaw": 23306, "totalSubmissionRaw": 54561, "acRate": "42.7%"}
Submissions: 1
ID: 929325343
Language Name: csharp
Language Verbose Name: C#
Question ID: 2211
URL: 
Code: public class Solution {
    public int[] GetAverages(int[] nums, int k) {
        int div = 2*k+1;
        int[] ret = new int[nums.Length];

        ulong total=0;
        for(int i=0;i<div;i++){
            if(div>nums.Length) break;
            total+=(ulong)nums[i];
        }
        
       
        for(int i=0;i<ret.Length-1;i++){
            if(i<k || i> nums.Length-k-1)
            { 
               
                ret[i]=-1;

            }else{
               
                ret[i]=(int)(total/(ulong)div);
                if(i+k+1<nums.Length){
                total=total+(ulong)(-nums[i-k]+nums[i+k+1]);
                }
            }
        }

         if(k==0) ret[ret.Length-1] = nums[nums.Length-1];
            else ret[ret.Length-1] = -1;

        Console.WriteLine(nums.Length);
        Console.WriteLine(ret[ret.Length-1]);
        return ret;

    }
}


/*
ends: if i <=k Or i> nums.Length-k
                set = -1;

otherwise find average...
find average...
first average (calculate)

(nums[0]-> nums[k+1] (mid) -> nums[k+1+k])/(2k+1) 
7+4+3+9+1+8+5 / ( 2(3) +1)
= 5 int

next...
multiply average by 2k+1, - nums[i-k-1], + nums[i+k]



*/

Sample Test Case: [7,4,3,9,1,8,5,2,6]
3

- Title Slug: number-of-laser-beams-in-a-bank
Question FrontEnd Id: 2125
Title: Number of Laser Beams in a Bank
Difficulty: Medium
Status: ac
Stats: {"totalAccepted": "45.5K", "totalSubmission": "55.6K", "totalAcceptedRaw": 45511, "totalSubmissionRaw": 55591, "acRate": "81.9%"}
Submissions: 1
ID: 923389465
Language Name: csharp
Language Verbose Name: C#
Question ID: 2244
URL: 
Code: public class Solution {
    public int NumberOfBeams(string[] bank) {
        int total=0;
        if(bank.Length==1) return total;
        int topCount =getLaserCount(bank,0);

        

        for(int i=1;i<bank.Length;i++){
            int check=getLaserCount(bank,i);
            if(check>0){
                total+=check*topCount;
                topCount=check;
            }
        }
        return total;
    }

    private int getLaserCount(string[] bank, int index){
        int ret = 0;
        for(int i=0;i<bank[index].Length;i++){
            if(bank[index][i]=='1')
            ret++;
        }
        return ret;
    }
}

/*
total =0
topRow
followingRow
total+= topRowBeams*followingRowBeams

...

return total;

*/

Sample Test Case: ["011001","000000","010100","001000"]

- Title Slug: minimum-cost-of-buying-candies-with-discount
Question FrontEnd Id: 2144
Title: Minimum Cost of Buying Candies With Discount
Difficulty: Easy
Status: ac
Stats: {"totalAccepted": "35.7K", "totalSubmission": "58.7K", "totalAcceptedRaw": 35713, "totalSubmissionRaw": 58717, "acRate": "60.8%"}
Submissions: 1
ID: 911865696
Language Name: csharp
Language Verbose Name: C#
Question ID: 2248
URL: 
Code: public class Solution {
    public int MinimumCost(int[] cost) {
        PriorityQueue<int,int> q = new();
        for(int i=0;i<cost.Length;i++){
            q.Enqueue(cost[i],-cost[i]);
        }
        int min=0;
        while(q.Count>=3){
            min += q.Dequeue();
            min+=q.Dequeue();
            q.Dequeue();
        }

        while(q.Count!=0){
            min+=q.Dequeue();
        }
        return min;

    }
}

Sample Test Case: [1,2,3]

- Title Slug: find-all-lonely-numbers-in-the-array
Question FrontEnd Id: 2150
Title: Find All Lonely Numbers in the Array
Difficulty: Medium
Status: ac
Stats: {"totalAccepted": "34.5K", "totalSubmission": "57.2K", "totalAcceptedRaw": 34545, "totalSubmissionRaw": 57238, "acRate": "60.4%"}
Submissions: 1
ID: 874457792
Language Name: csharp
Language Verbose Name: C#
Question ID: 2270
URL: 
Code: public class Solution {
    public IList<int> FindLonely(int[] nums) {
        Dictionary<int,int> lonelyCheck = new();
        for(int i=0;i<nums.Length;i++){
             if(lonelyCheck.ContainsKey(nums[i])){
             lonelyCheck[nums[i]]++;
             }else{
                 lonelyCheck.Add(nums[i],1);
             }
        }
        List<int> lonely = new List<int>();
        foreach(KeyValuePair<int,int> kvp in lonelyCheck){
            if(kvp.Value==1 && !lonelyCheck.ContainsKey(kvp.Key-1)&& !lonelyCheck.ContainsKey(kvp.Key+1))
            lonely.Add(kvp.Key);
        }

        return lonely;
    }
}

Sample Test Case: [10,6,5,8]

- Title Slug: smallest-value-of-the-rearranged-number
Question FrontEnd Id: 2165
Title: Smallest Value of the Rearranged Number
Difficulty: Medium
Status: ac
Stats: {"totalAccepted": "28.3K", "totalSubmission": "55K", "totalAcceptedRaw": 28285, "totalSubmissionRaw": 55038, "acRate": "51.4%"}
Submissions: 1
ID: 929343637
Language Name: csharp
Language Verbose Name: C#
Question ID: 2284
URL: 
Code: public class Solution {
    
    public long Minimize(string str) {
        var count = new Dictionary<char, int>();
        foreach (char c in str) {
            if (count.ContainsKey(c)) {
                count[c]++;
            }
            else {
                count[c] = 1;
            }
        }
 
        char smallest = count.Keys.Where(k => k != '0').Min();
        var ans = new List<char> { smallest };
        count[smallest]--;
 
        foreach (char c in "0123456789") {
            while (count.ContainsKey(c) && count[c] > 0) {
                ans.Add(c);
                count[c]--;
            }
        }
 
        return long.Parse(new string(ans.ToArray()));
    }
    
    public long Maximize(string str) {
        var count = new Dictionary<char, int>();
        foreach (char c in str) {
            if (count.ContainsKey(c)) {
                count[c]++;
            }
            else {
                count[c] = 1;
            }
        }
 
        var ans = new List<char>();
        foreach (char c in "9876543210") {
            while (count.ContainsKey(c) && count[c] > 0) {
                ans.Add(c);
                count[c]--;
            }
        }
 
        return long.Parse(new string(ans.ToArray()));
    }
    
    public long SmallestNumber(long num) {
        if (num == 0) {
            return 0;
        }
        
        string values = Math.Abs(num).ToString();
        return num >= 0 ? Minimize(values) : -Maximize(values);
    }
}

Sample Test Case: 310

- Title Slug: minimum-bit-flips-to-convert-number
Question FrontEnd Id: 2220
Title: Minimum Bit Flips to Convert Number
Difficulty: Easy
Status: ac
Stats: {"totalAccepted": "38.7K", "totalSubmission": "47K", "totalAcceptedRaw": 38710, "totalSubmissionRaw": 46974, "acRate": "82.4%"}
Submissions: 1
ID: 923401317
Language Name: csharp
Language Verbose Name: C#
Question ID: 2323
URL: 
Code: public class Solution {
    public int MinBitFlips(int start, int goal) {
        string num = Convert.ToString((start^goal),2);
        int count = 0;
        for(int i=0;i<num.Length;i++){
            if(num[i]=='1')
            count++;
        }
        return count;
    }
}

Sample Test Case: 10
7

- Title Slug: count-prefixes-of-a-given-string
Question FrontEnd Id: 2255
Title: Count Prefixes of a Given String
Difficulty: Easy
Status: ac
Stats: {"totalAccepted": "40.2K", "totalSubmission": "55.5K", "totalAcceptedRaw": 40244, "totalSubmissionRaw": 55489, "acRate": "72.5%"}
Submissions: 1
ID: 911859259
Language Name: csharp
Language Verbose Name: C#
Question ID: 2341
URL: 
Code: public class Solution {
    public int CountPrefixes(string[] words, string s) {
       int count=0;
        for(int i=0;i<words.Length;i++){
            if(s.StartsWith(words[i])) count++;
        }

        return count;
    }
}

Sample Test Case: ["a","b","c","ab","bc","abc"]
"abc"

- Title Slug: minimum-health-to-beat-game
Question FrontEnd Id: 2214
Title: Minimum Health to Beat Game
Difficulty: Medium
Status: ac
Stats: {"totalAccepted": "27.8K", "totalSubmission": "47.9K", "totalAcceptedRaw": 27767, "totalSubmissionRaw": 47913, "acRate": "58.0%"}
Submissions: 1
ID: 874431547
Language Name: csharp
Language Verbose Name: C#
Question ID: 2354
URL: 
Code: public class Solution {
    public long MinimumHealth(int[] damage, int armor) {

        int optimalLevel=damage[0];
        for(int i=1;i<damage.Length;i++){
            if(damage[i]>optimalLevel)
            optimalLevel=damage[i];
        }

        long health = 0;
        bool armorUsed=false;
        for(int i=0;i<damage.Length;i++){
            if(damage[i]==optimalLevel && !armorUsed){
                if(damage[i]>armor)
                health+=damage[i]-armor;

                armorUsed=true;
            }else{
                health+=damage[i];
            }

        }
        return health+1;
    }
}

Sample Test Case: [2,7,4,3]
4

- Title Slug: evaluate-boolean-binary-tree
Question FrontEnd Id: 2331
Title: Evaluate Boolean Binary Tree
Difficulty: Easy
Status: ac
Stats: {"totalAccepted": "45.6K", "totalSubmission": "58.1K", "totalAcceptedRaw": 45564, "totalSubmissionRaw": 58091, "acRate": "78.4%"}
Submissions: 1
ID: 928136607
Language Name: csharp
Language Verbose Name: C#
Question ID: 2416
URL: 
Code: /**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     public int val;
 *     public TreeNode left;
 *     public TreeNode right;
 *     public TreeNode(int val=0, TreeNode left=null, TreeNode right=null) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
public class Solution {
    public bool EvaluateTree(TreeNode root) {
        if (root.left == null && root.right == null) return root.val == 1;
        if(root.val==2) return EvaluateTree(root.left) || EvaluateTree(root.right);
        else return EvaluateTree(root.left) && EvaluateTree(root.right);
    }
}

Sample Test Case: [2,1,3,null,null,0,1]

- Title Slug: make-array-zero-by-subtracting-equal-amounts
Question FrontEnd Id: 2357
Title: Make Array Zero by Subtracting Equal Amounts
Difficulty: Easy
Status: ac
Stats: {"totalAccepted": "65.4K", "totalSubmission": "90.4K", "totalAcceptedRaw": 65445, "totalSubmissionRaw": 90375, "acRate": "72.4%"}
Submissions: 1
ID: 910614342
Language Name: csharp
Language Verbose Name: C#
Question ID: 2436
URL: 
Code: public class Solution {
    public int MinimumOperations(int[] nums) {
        int counter =0;
        int check = notAllZero(nums);
        while(check!=-1){
            int min= nums[check];
            for(int i=check;i<nums.Length;i++){
                if(nums[i]<min && nums[i]!=0) min = nums[i];
            }
            for(int i=0;i<nums.Length;i++){
                if(nums[i]!=0) nums[i]-=min;
            }
            counter++;
           check= notAllZero(nums);
        }
        return counter;
    }
    private int notAllZero(int[] nums){
        for(int i=0;i<nums.Length;i++){
            if(nums[i]!=0)return i;
        }
        return -1;
    }
}

Sample Test Case: [1,5,0,3,5]

- Title Slug: optimal-partition-of-string
Question FrontEnd Id: 2405
Title: Optimal Partition of String
Difficulty: Medium
Status: ac
Stats: {"totalAccepted": "110.3K", "totalSubmission": "137.7K", "totalAcceptedRaw": 110266, "totalSubmissionRaw": 137677, "acRate": "80.1%"}
Submissions: 1
ID: 927675032
Language Name: csharp
Language Verbose Name: C#
Question ID: 2487
URL: 
Code: public class Solution {
    public int PartitionString(string s) {
        int min =1;
      HashSet<char> unique= new();
        for(int i=0;i<s.Length;i++){
            if(!unique.Add(s[i])){
                min++;
                unique.Clear();
                unique.Add(s[i]);
            }
        }

        return min;
    }
}

Sample Test Case: "abacaba"

- Title Slug: maximum-matching-of-players-with-trainers
Question FrontEnd Id: 2410
Title: Maximum Matching of Players With Trainers
Difficulty: Medium
Status: ac
Stats: {"totalAccepted": "24K", "totalSubmission": "39.3K", "totalAcceptedRaw": 24028, "totalSubmissionRaw": 39273, "acRate": "61.2%"}
Submissions: 1
ID: 879053224
Language Name: csharp
Language Verbose Name: C#
Question ID: 2497
URL: 
Code: public class Solution {
    public int MatchPlayersAndTrainers(int[] players, int[] trainers) {
        PriorityQueue<int,int> qPlay = new();
        PriorityQueue<int,int> qTr = new();
        foreach(int i in players){
            qPlay.Enqueue(i,-i);
        }
        foreach(int i in trainers){
            qTr.Enqueue(i,-i);
        }
        int max=0;
        while(qPlay.Count!=0 && qTr.Count!=0){
            if(qPlay.Peek() <= qTr.Peek()){
                max++;
                qPlay.Dequeue();
                qTr.Dequeue();
            }else{
            qPlay.Dequeue();
            }

        }
        return max;
    }   
}

Sample Test Case: [4,7,9]
[8,2,5,8]

- Title Slug: circular-sentence
Question FrontEnd Id: 2490
Title: Circular Sentence
Difficulty: Easy
Status: ac
Stats: {"totalAccepted": "27.4K", "totalSubmission": "42.7K", "totalAcceptedRaw": 27415, "totalSubmissionRaw": 42732, "acRate": "64.2%"}
Submissions: 1
ID: 911882150
Language Name: csharp
Language Verbose Name: C#
Question ID: 2580
URL: 
Code: public class Solution {
    public bool IsCircularSentence(string sentence) {
        string[] words = sentence.Split(' ');
        for(int i=0;i<words.Length-1;i++){
            if(words[i][words[i].Length-1]!= words[i+1][0]) return false;
        }

        return sentence[0]== sentence[sentence.Length-1];

    }
}

Sample Test Case: "leetcode exercises sound delightful"

- Title Slug: count-the-digits-that-divide-a-number
Question FrontEnd Id: 2520
Title: Count the Digits That Divide a Number
Difficulty: Easy
Status: ac
Stats: {"totalAccepted": "39.9K", "totalSubmission": "47K", "totalAcceptedRaw": 39919, "totalSubmissionRaw": 47030, "acRate": "84.9%"}
Submissions: 1
ID: 911858003
Language Name: csharp
Language Verbose Name: C#
Question ID: 2608
URL: 
Code: public class Solution {
    public int CountDigits(int num) {
        int count=0;
        int digit= num;

        while(digit >0){
            int checker= digit%10;
            if(num%checker==0) count++;
            digit/=10;
        }
        return count;

    }
}

Sample Test Case: 7

- Title Slug: maximum-count-of-positive-integer-and-negative-integer
Question FrontEnd Id: 2529
Title: Maximum Count of Positive Integer and Negative Integer
Difficulty: Easy
Status: ac
Stats: {"totalAccepted": "49.9K", "totalSubmission": "67.2K", "totalAcceptedRaw": 49850, "totalSubmissionRaw": 67202, "acRate": "74.2%"}
Submissions: 1
ID: 873716815
Language Name: csharp
Language Verbose Name: C#
Question ID: 2614
URL: 
Code: public class Solution {
    public int MaximumCount(int[] nums) {
        List<int> lst = new List<int>();
        for(int i=0;i<nums.Length;i++){
            if(nums[i]!=0)
                lst.Add(nums[i]);
        }
        
        int left=0;
        int right = lst.Count-1;
        while(left<=right){
            int middle = (left+right)/2;
            if(nums[middle]<0){
                left=middle+1;
            }else{
                right=middle-1;
            }
        }
        
        
        return Math.Max(left, lst.Count-left);
    }
}

Sample Test Case: [-2,-1,-1,1,2,3]

- Title Slug: maximal-score-after-applying-k-operations
Question FrontEnd Id: 2530
Title: Maximal Score After Applying K Operations
Difficulty: Medium
Status: ac
Stats: {"totalAccepted": "21.4K", "totalSubmission": "49.2K", "totalAcceptedRaw": 21397, "totalSubmissionRaw": 49172, "acRate": "43.5%"}
Submissions: 1
ID: 873730374
Language Name: csharp
Language Verbose Name: C#
Question ID: 2616
URL: 
Code: public class Solution {
    public long MaxKelements(int[] nums, int k) {
      
        PriorityQueue<int,int> q = new(Comparer<int>.Create((x, y) => y - x));
        for(int i=0;i<nums.Length;i++){
            q.Enqueue(nums[i],nums[i]);
        }
        
         long score=0;
        for(int i=0;i<k;i++){
            if(q.Count!=0){
            int adder = q.Dequeue();
            int reQ = (int) Math.Ceiling((decimal)adder/3);
                
            score+=adder;
            q.Enqueue(reQ,reQ);        
        
                
            }
        }
        
            
        return score;
    }
}

Sample Test Case: [10,10,10,10,10]
5

- Title Slug: categorize-box-according-to-criteria
Question FrontEnd Id: 2525
Title: Categorize Box According to Criteria
Difficulty: Easy
Status: ac
Stats: {"totalAccepted": "22.6K", "totalSubmission": "65.9K", "totalAcceptedRaw": 22550, "totalSubmissionRaw": 65886, "acRate": "34.2%"}
Submissions: 1
ID: 873595400
Language Name: csharp
Language Verbose Name: C#
Question ID: 2619
URL: 
Code: public class Solution {
    public string CategorizeBox(int length, int width, int height, int mass) {
    bool heavy= mass>=100;
    bool bulky = length>=10000|| width>=10000|| height>=10000|| CheckVolume(length,width,height);
       
        //Console.WriteLine($"Testing: {heavy} {bulky}");
        if(heavy&&bulky)
            return "Both";
        if(heavy)
            return "Heavy";
        if(bulky)
            return "Bulky";
        
        return "Neither";
            
       
        }
    
         private bool CheckVolume(int length, int width, int height){
              //Console.WriteLine($"VolumeCheck: {CountDigits(length)}+{CountDigits(width)}+{CountDigits(height)}");
            if(CountDigits(length)+CountDigits(width)+CountDigits(height)>=9){
                return true;
            }
             
            return false;
         }
        private double CountDigits(int num){
            return Math.Log10(num);
        }
    }

Sample Test Case: 1000
35
700
300

- Title Slug: find-consecutive-integers-from-a-data-stream
Question FrontEnd Id: 2526
Title: Find Consecutive Integers from a Data Stream
Difficulty: Medium
Status: ac
Stats: {"totalAccepted": "16.4K", "totalSubmission": "36.1K", "totalAcceptedRaw": 16436, "totalSubmissionRaw": 36138, "acRate": "45.5%"}
Submissions: 1
ID: 873595501
Language Name: csharp
Language Verbose Name: C#
Question ID: 2620
URL: 
Code: public class DataStream {
    List<int> stream;
    int streamVal;
    int lastRange;
    int latestWrong;
    public DataStream(int val, int k) {
        streamVal=val;
        lastRange=k;
        stream= new List<int>();
        latestWrong=-1;
    }
    
    public bool Consec(int num) {
        stream.Add(num);
        if(num!=streamVal){
            latestWrong=stream.Count;
        }
        
        if(stream.Count<lastRange)
            return false;
        
        if(latestWrong>stream.Count-lastRange)
            return false;
        
        return true;
    }
}

/**
 * Your DataStream object will be instantiated and called as such:
 * DataStream obj = new DataStream(value, k);
 * bool param_1 = obj.Consec(num);
 */

Sample Test Case: ["DataStream","consec","consec","consec","consec"]
[[4,3],[4],[4],[4],[3]]

- Title Slug: find-xor-beauty-of-array
Question FrontEnd Id: 2527
Title: Find Xor-Beauty of Array
Difficulty: Medium
Status: ac
Stats: {"totalAccepted": "14.1K", "totalSubmission": "20K", "totalAcceptedRaw": 14050, "totalSubmissionRaw": 19969, "acRate": "70.4%"}
Submissions: 1
ID: 873599605
Language Name: csharp
Language Verbose Name: C#
Question ID: 2621
URL: 
Code: public class Solution {
    public int XorBeauty(int[] nums) {
        int beauty=0;
        for(int i=0;i<nums.Length;i++){
            beauty^=nums[i];
        }

        return beauty;
    }
}

Sample Test Case: [1,4]

- Title Slug: difference-between-element-sum-and-digit-sum-of-an-array
Question FrontEnd Id: 2535
Title: Difference Between Element Sum and Digit Sum of an Array
Difficulty: Easy
Status: ac
Stats: {"totalAccepted": "58.2K", "totalSubmission": "68.6K", "totalAcceptedRaw": 58176, "totalSubmissionRaw": 68556, "acRate": "84.9%"}
Submissions: 1
ID: 878330524
Language Name: csharp
Language Verbose Name: C#
Question ID: 2624
URL: 
Code: public class Solution {
    public int DifferenceOfSum(int[] nums) {
        int eSum=0;
        int dSum=0;
        for(int i=0;i<nums.Length;i++){
            int num = nums[i];
            eSum+=num;
            while(num>0){
                dSum+=num%10;
                num/=10;
            }
        }
        
        return Math.Abs(eSum-dSum);
    }
}

Sample Test Case: [1,15,6,3]

- Title Slug: increment-submatrices-by-one
Question FrontEnd Id: 2536
Title: Increment Submatrices by One
Difficulty: Medium
Status: ac
Stats: {"totalAccepted": "16.9K", "totalSubmission": "34.9K", "totalAcceptedRaw": 16892, "totalSubmissionRaw": 34870, "acRate": "48.4%"}
Submissions: 1
ID: 878336341
Language Name: csharp
Language Verbose Name: C#
Question ID: 2625
URL: 
Code: public class Solution {
    public int[][] RangeAddQueries(int n, int[][] queries) {
        int[][] mat = new int[n][];
        for(int i=0;i<n;i++){
            mat[i]= new int[n];
        }
        
        for(int i=0;i<queries.Length;i++){
            /*
            int row1= queries[i][0];
            int col1 = queries[i][1];
            int row2 = queries[i][2];
            int col2 = queries[i][3];
            */
            for(int y=queries[i][0];y<=queries[i][2];y++){
                for(int x= queries[i][1];x<=queries[i][3];x++){
                    mat[y][x]++;
                }
            }
            
        }
        
        return mat;
    }
}

Sample Test Case: 3
[[1,1,2,2],[0,0,1,1]]

- Title Slug: sort-the-students-by-their-kth-score
Question FrontEnd Id: 2545
Title: Sort the Students by Their Kth Score
Difficulty: Medium
Status: ac
Stats: {"totalAccepted": "31K", "totalSubmission": "36.1K", "totalAcceptedRaw": 30965, "totalSubmissionRaw": 36091, "acRate": "85.8%"}
Submissions: 1
ID: 912521112
Language Name: csharp
Language Verbose Name: C#
Question ID: 2631
URL: 
Code: public class Solution {
    public int[][] SortTheStudents(int[][] score, int k)=>
        score.OrderByDescending(s => s[k]).ToArray();

}

Sample Test Case: [[10,6,9,1],[7,5,11,2],[4,8,3,15]]
2

- Title Slug: count-total-number-of-colored-cells
Question FrontEnd Id: 2579
Title: Count Total Number of Colored Cells
Difficulty: Medium
Status: ac
Stats: {"totalAccepted": "18.9K", "totalSubmission": "32.9K", "totalAcceptedRaw": 18884, "totalSubmissionRaw": 32901, "acRate": "57.4%"}
Submissions: 1
ID: 928142545
Language Name: csharp
Language Verbose Name: C#
Question ID: 2649
URL: 
Code: public class Solution {
    public long ColoredCells(int n) {
        if(n ==1) return 1;

        long ret =1;
        for(int i=1;i<n;i++){
            ret+= 4*i;
        }
        return ret;
        

    }
}

/*
1: 1
2: 1 + 4(1)
3: 1 + 4 + 4(2) 
4: 1 + 4 + 8 + 4(3)
5: .   .   .    .   + 4(4)

*/

Sample Test Case: 1

- Title Slug: form-smallest-number-from-two-digit-arrays
Question FrontEnd Id: 2605
Title: Form Smallest Number From Two Digit Arrays
Difficulty: Easy
Status: ac
Stats: {"totalAccepted": "21.6K", "totalSubmission": "40.4K", "totalAcceptedRaw": 21620, "totalSubmissionRaw": 40391, "acRate": "53.5%"}
Submissions: 1
ID: 925963047
Language Name: csharp
Language Verbose Name: C#
Question ID: 2668
URL: 
Code: public class Solution {
    public int MinNumber(int[] nums1, int[] nums2) {
        List<int> both = new();
        
        for(int i=0;i<nums1.Length;i++){
            if(nums2.Contains(nums1[i])){
                both.Add(nums1[i]);
            }
        }
        
        if(both.Count!=0){
            int min = 10;
            for(int i=0;i<both.Count;i++){
                if(min>both[i])
                    min=both[i];
                
               
            }
             return min;
        }
        
        int min1=10;
        int min2=10;
        for(int i=0;i<nums1.Length;i++){
            if(min1>nums1[i])
                min1= nums1[i];
        }
        for(int i=0;i<nums2.Length;i++){
            if(min2>nums2[i])
                min2= nums2[i];
        }
        
        int ret=0;
        if(min1<= min2){
            ret = (min1*10)+min2;
        }else{
             ret = (min2*10)+min1;
        }
        return ret;
        
    }
}

Sample Test Case: [4,1,3]
[5,7]

- Title Slug: count-distinct-numbers-on-board
Question FrontEnd Id: 2549
Title: Count Distinct Numbers on Board
Difficulty: Easy
Status: ac
Stats: {"totalAccepted": "27.3K", "totalSubmission": "45.5K", "totalAcceptedRaw": 27278, "totalSubmissionRaw": 45485, "acRate": "60.0%"}
Submissions: 1
ID: 911889453
Language Name: csharp
Language Verbose Name: C#
Question ID: 2679
URL: 
Code: public class Solution {
    public int DistinctIntegers(int n) {
        if(n==1) return 1;
        return n-1;
    }
}

Sample Test Case: 5

- Title Slug: take-gifts-from-the-richest-pile
Question FrontEnd Id: 2558
Title: Take Gifts From the Richest Pile
Difficulty: Easy
Status: ac
Stats: {"totalAccepted": "28.1K", "totalSubmission": "42.2K", "totalAcceptedRaw": 28140, "totalSubmissionRaw": 42219, "acRate": "66.7%"}
Submissions: 1
ID: 921626965
Language Name: csharp
Language Verbose Name: C#
Question ID: 2692
URL: 
Code: public class Solution {
    public long PickGifts(int[] gifts, int k) {
        PriorityQueue<int,int> piles = new(); 
        long ret = 0;
        for(int i=0;i<gifts.Length;i++){
            piles.Enqueue(i,-gifts[i]);
            ret+= gifts[i];
        }
        for(int i=0;i<k;i++){
            int takeFrom= piles.Dequeue();
            ret-=gifts[takeFrom];
            gifts[takeFrom]= (int)Math.Sqrt(gifts[takeFrom]);
            ret+=gifts[takeFrom];
            piles.Enqueue(takeFrom,-gifts[takeFrom]);
        }
        
        return ret;
    }
}

Sample Test Case: [25,64,9,4,100]
4

- Title Slug: find-the-maximum-divisibility-score
Question FrontEnd Id: 2644
Title: Find the Maximum Divisibility Score
Difficulty: Easy
Status: ac
Stats: {"totalAccepted": "14.5K", "totalSubmission": "30.3K", "totalAcceptedRaw": 14506, "totalSubmissionRaw": 30303, "acRate": "47.9%"}
Submissions: 1
ID: 934481919
Language Name: csharp
Language Verbose Name: C#
Question ID: 2694
URL: 
Code: public class Solution {
    public int MaxDivScore(int[] nums, int[] divisors) {
        List<int[]> list= new();
        for(int i=0;i<divisors.Length;i++){
            int count=0;
            for(int j=0;j<nums.Length;j++){
                if(nums[j]%divisors[i]==0) count++;
            }
          list.Add(new int[]{count,divisors[i]});
            
        }
        
        list.Sort(compare);
        return list[0][1];
        
    }
    
    private static int compare(int[] x,int[] y){
        if(x==null){
            if(y==null)
                return 0;
            return 0;
        }else if(y==null){
            return 1;
        }else{
            if(x[0]>y[0])
                return -1;
            if(x[0]<y[0])
                return 1;
            
            return x[1].CompareTo(y[1]);
        }
    }
}

Sample Test Case: [4,7,9,3,9]
[5,2,3]

- Title Slug: merge-two-2d-arrays-by-summing-values
Question FrontEnd Id: 2570
Title: Merge Two 2D Arrays by Summing Values
Difficulty: Easy
Status: ac
Stats: {"totalAccepted": "24.2K", "totalSubmission": "33K", "totalAcceptedRaw": 24193, "totalSubmissionRaw": 32956, "acRate": "73.4%"}
Submissions: 1
ID: 923396975
Language Name: csharp
Language Verbose Name: C#
Question ID: 2707
URL: 
Code: public class Solution {
    public int[][] MergeArrays(int[][] nums1, int[][] nums2) {
        SortedDictionary<int,int> sorter = new();
        for(int i=0;i<nums1.Length;i++){
            sorter.Add(nums1[i][0],nums1[i][1]);
        }
        for(int i=0;i<nums2.Length;i++){
            if(sorter.ContainsKey(nums2[i][0])){
                sorter[nums2[i][0]]+=nums2[i][1];
            }else{
                sorter.Add(nums2[i][0],nums2[i][1]);
            }
        }
        
        int[][] ret = new int[sorter.Count][];
        int pointer=0;
        foreach(KeyValuePair<int,int> kvp in sorter){
            ret[pointer]= new int[]{kvp.Key,kvp.Value};
            pointer++;
        }

        return ret;

    }
}

Sample Test Case: [[1,2],[2,3],[4,5]]
[[1,4],[3,2],[4,1]]

- Title Slug: find-the-longest-balanced-substring-of-a-binary-string
Question FrontEnd Id: 2609
Title: Find the Longest Balanced Substring of a Binary String
Difficulty: Easy
Status: ac
Stats: {"totalAccepted": "20.8K", "totalSubmission": "45.6K", "totalAcceptedRaw": 20821, "totalSubmissionRaw": 45571, "acRate": "45.7%"}
Submissions: 1
ID: 926288494
Language Name: csharp
Language Verbose Name: C#
Question ID: 2723
URL: 
Code: public class Solution {
    public int FindTheLongestBalancedSubstring(string s) {
        int longest=0;
        for(int i=0;i<s.Length-1;i++){
            if(s[i]=='1')continue;
            int counter=1;
            bool one = false;
            for(int j=i+1;j<s.Length;j++){
               // Console.WriteLine(s[j]);
                if(s[j]=='0'){
                    if(!one){
                    counter++;
                    }else{
                    break;
                    }
                    
                }else if(s[j]=='1'){
                   // Console.WriteLine($"found a 1, counter is currently {counter}");
                    counter--;
                    one=true;
                    if(counter==0){
                       // Console.WriteLine($"Possible answer of range [{i} - {j}]");
                        longest=Math.Max(longest,j-i+1);
                    }
                }else{
                    break;
                }
                
                
                
            }
        }
       // Console.WriteLine("-------------");
        
        return longest;
    }
}

Sample Test Case: "01000111"

- Title Slug: convert-an-array-into-a-2d-array-with-conditions
Question FrontEnd Id: 2610
Title: Convert an Array Into a 2D Array With Conditions
Difficulty: Medium
Status: ac
Stats: {"totalAccepted": "21.2K", "totalSubmission": "24.7K", "totalAcceptedRaw": 21228, "totalSubmissionRaw": 24704, "acRate": "85.9%"}
Submissions: 1
ID: 926296351
Language Name: csharp
Language Verbose Name: C#
Question ID: 2724
URL: 
Code: public class Solution {
    public IList<IList<int>> FindMatrix(int[] nums) {
        Dictionary<int,int> counter = new();
        for(int i=0;i<nums.Length;i++){
            if(!counter.ContainsKey(nums[i])){
                counter.Add(nums[i],1);
            }else{
                counter[nums[i]]++;
            }
        }
        
        int unique = counter.Count;
        
        List<IList<int>> ret = new();
        while(unique>0){
            List<int> adder = new();
            foreach(KeyValuePair<int,int> kvp in counter){
                if(kvp.Value!=0){
                    adder.Add(kvp.Key);
                    counter[kvp.Key]--;
                    if(counter[kvp.Key]==0)unique--;
                }
            }
            ret.Add(adder);
        }
        return ret;
    }
}

Sample Test Case: [1,3,4,1,2,3,1]

- Title Slug: minimum-additions-to-make-valid-string
Question FrontEnd Id: 2645
Title: Minimum Additions to Make Valid String
Difficulty: Medium
Status: ac
Stats: {"totalAccepted": "12K", "totalSubmission": "26.1K", "totalAcceptedRaw": 12001, "totalSubmissionRaw": 26131, "acRate": "45.9%"}
Submissions: 1
ID: 934506547
Language Name: csharp
Language Verbose Name: C#
Question ID: 2736
URL: 
Code: public class Solution {
    public int AddMinimum(string word) {
        int count =0;

        if(word[0]!='a'){
           // Console.WriteLine((int)(word[0]-'a'));
          //  Console.WriteLine("added from beginning");
            count+= (int)(word[0]-'a');
        }
        
        for(int i=1;i<word.Length;i++){
            char prev = word[i-1];
           // Console.WriteLine($"prev: {prev} -> {word[i]}");
            if(prev==word[i]){
                count+=2;
                continue;
            }
            
            if(prev=='c' && word[i]=='a' || (int)word[i]-(int)prev==1)
                continue;
            
            count++;
            }
         
         return count+ (99-(int)word[word.Length-1]);
        }
    
        
        
        
    }


Sample Test Case: "b"

- Title Slug: row-with-maximum-ones
Question FrontEnd Id: 2643
Title: Row With Maximum Ones
Difficulty: Easy
Status: ac
Stats: {"totalAccepted": "16.1K", "totalSubmission": "21.3K", "totalAcceptedRaw": 16075, "totalSubmissionRaw": 21251, "acRate": "75.6%"}
Submissions: 1
ID: 934471599
Language Name: csharp
Language Verbose Name: C#
Question ID: 2737
URL: 
Code: public class Solution {
    public int[] RowAndMaximumOnes(int[][] mat) {
        int max=0;
        int ret=-1;
        for(int i=mat.Length-1;i>=0;i--){
            int count=0;
            for(int j=0;j<mat[i].Length;j++){
                if(mat[i][j]==1){
                    count++;
                }
            }
            if(max<=count){
                ret=i;
                max=count;
            }
        }
        return new int[]{ret,max};
    }
}

Sample Test Case: [[0,1],[1,0]]

- Title Slug: counter
Question FrontEnd Id: 2620
Title: Counter
Difficulty: Easy
Status: ac
Stats: {"totalAccepted": "7.3K", "totalSubmission": "8.2K", "totalAcceptedRaw": 7286, "totalSubmissionRaw": 8188, "acRate": "89.0%"}
Submissions: 1
ID: 933958641
Language Name: javascript
Language Verbose Name: JavaScript
Question ID: 2732
URL: 
Code: /**
 * @param {number} n
 * @return {Function} counter
 */
var createCounter = function(n) {
    return function() {
        
        return n++;
    };
};

/** 
 * const counter = createCounter(10)
 * counter() // 10
 * counter() // 11
 * counter() // 12
 */

Sample Test Case: 10
["call","call","call"]

]



----------------------------------------------------------



Contest Overview:
Attended contests count: 12
Current rating: 1504
Global ranking: 156432/386520
Top percentage: 41%



----------------------------------------------------------



Contests:
[
- Contest Name: Weekly Contest 280
Attended: True
Trend direction: DOWN
Problems solved: 1
Total problems: 4
Finish time in seconds: 00:07:32
Rating: 1494
Ranking: 9224

- Contest Name: Biweekly Contest 74
Attended: True
Trend direction: DOWN
Problems solved: 1
Total problems: 4
Finish time in seconds: 00:03:46
Rating: 1484
Ranking: 8394

- Contest Name: Weekly Contest 285
Attended: True
Trend direction: DOWN
Problems solved: 0
Total problems: 4
Finish time in seconds: 00:00:00
Rating: 1431
Ranking: 15296

- Contest Name: Weekly Contest 289
Attended: True
Trend direction: DOWN
Problems solved: 2
Total problems: 4
Finish time in seconds: 01:40:49
Rating: 1422
Ranking: 11061

- Contest Name: Biweekly Contest 94
Attended: True
Trend direction: UP
Problems solved: 1
Total problems: 4
Finish time in seconds: 00:32:40
Rating: 1433
Ranking: 6448

- Contest Name: Weekly Contest 326
Attended: True
Trend direction: UP
Problems solved: 2
Total problems: 4
Finish time in seconds: 00:16:01
Rating: 1438
Ranking: 6846

- Contest Name: Biweekly Contest 95
Attended: True
Trend direction: UP
Problems solved: 2
Total problems: 4
Finish time in seconds: 01:13:11
Rating: 1442
Ranking: 9407

- Contest Name: Weekly Contest 327
Attended: True
Trend direction: UP
Problems solved: 2
Total problems: 4
Finish time in seconds: 00:25:37
Rating: 1458
Ranking: 7901

- Contest Name: Weekly Contest 328
Attended: True
Trend direction: UP
Problems solved: 2
Total problems: 4
Finish time in seconds: 00:08:59
Rating: 1507
Ranking: 4000

- Contest Name: Biweekly Contest 101
Attended: True
Trend direction: DOWN
Problems solved: 1
Total problems: 4
Finish time in seconds: 00:20:56
Rating: 1488
Ranking: 12199

- Contest Name: Weekly Contest 339
Attended: True
Trend direction: UP
Problems solved: 2
Total problems: 4
Finish time in seconds: 00:23:36
Rating: 1502
Ranking: 7971

- Contest Name: Weekly Contest 340
Attended: True
Trend direction: UP
Problems solved: 1
Total problems: 4
Finish time in seconds: 00:36:37
Rating: 1504
Ranking: 9058

]
Dumping Data Here





Username: ethanworden
----------------------------------------------------------



Submission stas:
[
- All : 299
- Easy : 180
- Medium : 118
- Hard : 1
]



----------------------------------------------------------



Questions:
[
- Title Slug: two-sum
Question FrontEnd Id: 1
Title: Two Sum
Difficulty: Easy
Status: ac
Stats: {"totalAccepted": "9.4M", "totalSubmission": "18.9M", "totalAcceptedRaw": 9413173, "totalSubmissionRaw": 18924534, "acRate": "49.7%"}
Submissions: 1
ID: 872161096
Language Name: csharp
Language Verbose Name: C#
Question ID: 1
URL: 
Code: public class Solution {
    public int[] TwoSum(int[] nums, int target) {
        Dictionary<int, int> db = new Dictionary<int, int>();
        for(int i=0;i<nums.Length;i++){
            if(db.ContainsKey(nums[i])){
                return new int[] {db[nums[i]], i};
            }else if(db.ContainsKey(target-nums[i])){
                continue;
            }else{
                db.Add(target-nums[i],i);
            }
        }
        
        return new int[2];
    }
}

Sample Test Case: [2,7,11,15]
9

- Title Slug: add-two-numbers
Question FrontEnd Id: 2
Title: Add Two Numbers
Difficulty: Medium
Status: ac
Stats: {"totalAccepted": "3.6M", "totalSubmission": "8.8M", "totalAcceptedRaw": 3550062, "totalSubmissionRaw": 8787249, "acRate": "40.4%"}
Submissions: 1
ID: 646413347
Language Name: csharp
Language Verbose Name: C#
Question ID: 2
URL: 
Code: /**
 * Definition for singly-linked list.
 * public class ListNode {
 *     public int val;
 *     public ListNode next;
 *     public ListNode(int val=0, ListNode next=null) {
 *         this.val = val;
 *         this.next = next;
 *     }
 * }
 */
public class Solution {
    public ListNode AddTwoNumbers(ListNode l1, ListNode l2) {
        int carry=0;
        ListNode head = l1;
        ListNode previous = l1;
        while(l1!= null && l2!= null){
            l1.val= l1.val+l2.val+ carry;
            carry=0;
            
            if(l1.val>9){
                l1.val-=10;
                carry=1;
            }
            previous=l1;
            l1=l1.next;
            l2=l2.next;
            
            
        }
        
        if(l1==null && l2!=null){
            
            previous.next=l2;
            l1=previous.next;
        }
        
        while(l1!=null){

            l1.val+=carry;

            carry=0;
            if(l1.val>9){
                l1.val-=10;
                carry=1;
            }
            previous=l1;
            l1=l1.next;
        }
        
        if(carry==1){
          previous.next = new ListNode(1);  
        }
        
        
        
        
        
        return head;
        
        
        
        
    }
}

Sample Test Case: [2,4,3]
[5,6,4]

- Title Slug: longest-substring-without-repeating-characters
Question FrontEnd Id: 3
Title: Longest Substring Without Repeating Characters
Difficulty: Medium
Status: ac
Stats: {"totalAccepted": "4.4M", "totalSubmission": "13M", "totalAcceptedRaw": 4413139, "totalSubmissionRaw": 13042433, "acRate": "33.8%"}
Submissions: 1
ID: 457748800
Language Name: csharp
Language Verbose Name: C#
Question ID: 3
URL: 
Code: public class Solution {
    public int LengthOfLongestSubstring(string s) {
        Dictionary<char,int> test= new Dictionary<char,int>();
        int count=0;
        int temp=0;
        
        
        if(s.Length ==1){
            return 1;
        }
        
        for(int i=0;i<s.Length;i++){
            Console.WriteLine(s[i]);
            for(int k=i;k<s.Length;k++){
              if(!test.ContainsKey(s[k])){
                  test.Add(s[k],1);
                  temp++;
              }else{
                  test.Clear();
                  if(temp>count){
                      count=temp;
                  }
                  temp=0;
                  break;
              }
                
                   }
                   
               }
                  
             return count;    
            }
               
        }
        

Sample Test Case: "abcabcbb"

- Title Slug: median-of-two-sorted-arrays
Question FrontEnd Id: 4
Title: Median of Two Sorted Arrays
Difficulty: Hard
Status: ac
Stats: {"totalAccepted": "1.9M", "totalSubmission": "5.1M", "totalAcceptedRaw": 1867883, "totalSubmissionRaw": 5149690, "acRate": "36.3%"}
Submissions: 1
ID: 604658944
Language Name: csharp
Language Verbose Name: C#
Question ID: 4
URL: 
Code: public class Solution {
    public double FindMedianSortedArrays(int[] nums1, int[] nums2) {
        double[] final = new double [nums1.Length+nums2.Length];
        
        for(int i=0;i<final.Length;i++){
            if(i<nums1.Length){
                final[i]=nums1[i];
            }else{
                final[i]=nums2[i-nums1.Length];
            }
        }
        
        Array.Sort(final);
        
        double ret;
        
        if(final.Length%2==0){
            ret= final[final.Length/2]+final[final.Length/2-1];
            ret=ret/2;
        }else{
            ret= final[final.Length/2];
        }
            return ret;
        
        
        
        
    }
}

Sample Test Case: [1,3]
[2]

- Title Slug: reverse-integer
Question FrontEnd Id: 7
Title: Reverse Integer
Difficulty: Medium
Status: ac
Stats: {"totalAccepted": "2.5M", "totalSubmission": "9.3M", "totalAcceptedRaw": 2546501, "totalSubmissionRaw": 9270357, "acRate": "27.5%"}
Submissions: 1
ID: 459395238
Language Name: csharp
Language Verbose Name: C#
Question ID: 7
URL: 
Code: public class Solution {
    public int Reverse(int x) {
        int reverse=0;
        int pop;
        while(x!=0){
            pop = x%10;
            x=x/10;
            if (reverse > Int32.MaxValue/10 || (reverse == Int32.MaxValue / 10 && pop > 7)) return 0;
            if (reverse < Int32.MinValue/10 || (reverse == Int32.MinValue / 10 && pop < -8)) return 0;
            reverse = reverse * 10 + pop;
            
        }
        return reverse;
    }
}

Sample Test Case: 123

- Title Slug: palindrome-number
Question FrontEnd Id: 9
Title: Palindrome Number
Difficulty: Easy
Status: ac
Stats: {"totalAccepted": "3.1M", "totalSubmission": "5.8M", "totalAcceptedRaw": 3094851, "totalSubmissionRaw": 5776478, "acRate": "53.6%"}
Submissions: 1
ID: 459440606
Language Name: csharp
Language Verbose Name: C#
Question ID: 9
URL: 
Code: public class Solution {
    public bool IsPalindrome(int x) {
        int num = x;
        int digit;
        int reverse=0;
        
        while(num>0){
            digit = num%10;
            reverse=reverse*10 +digit;
            num=num/10;
        }
        
        
        Console.WriteLine(reverse);
        if(x==reverse)
            return true;
        
        return false;
        
    }
}

Sample Test Case: 121

- Title Slug: container-with-most-water
Question FrontEnd Id: 11
Title: Container With Most Water
Difficulty: Medium
Status: ac
Stats: {"totalAccepted": "2.1M", "totalSubmission": "3.8M", "totalAcceptedRaw": 2050354, "totalSubmissionRaw": 3797214, "acRate": "54.0%"}
Submissions: 1
ID: 460194117
Language Name: csharp
Language Verbose Name: C#
Question ID: 11
URL: 
Code: public class Solution {
    public int MaxArea(int[] height) {
        int max = 0;
        
        
        for(int i =0;i<height.Length-1;i++){
            for(int j=i+1;j<height.Length;j++){
                max= Math.Max(max,Math.Min(height[i],height[j])* (j-i));
            }
        }
        return max;
    }
}

Sample Test Case: [1,8,6,2,5,4,8,3,7]

- Title Slug: integer-to-roman
Question FrontEnd Id: 12
Title: Integer to Roman
Difficulty: Medium
Status: ac
Stats: {"totalAccepted": "971.7K", "totalSubmission": "1.6M", "totalAcceptedRaw": 971676, "totalSubmissionRaw": 1565433, "acRate": "62.1%"}
Submissions: 1
ID: 620548427
Language Name: csharp
Language Verbose Name: C#
Question ID: 12
URL: 
Code: public class Solution {
    
    Dictionary<int, string> map = new Dictionary<int, string>();

    public string IntToRoman(int num) {
        FillHashTable();
        
        StringBuilder sb = new StringBuilder("");
        int[] keys = map.Keys.ToArray();
        int i = 0;
        int key = keys[0];
        while(num > 0){
            int dif = num - key;
            if(dif >= 0)
            {
                sb.Append(map[key]);
                num -= key;
            }
            else
            {
                i++;
                key = keys[i];
            }
        }
        return sb.ToString();
    }
    private void FillHashTable(){
        map.Add(1000, "M");
        map.Add(900, "CM");
        map.Add(500, "D");
        map.Add(400, "CD");
        map.Add(100, "C");
        map.Add(90, "XC");
        map.Add(50, "L");
        map.Add(40, "XL");
        map.Add(10, "X");
        map.Add(9, "IX");
        map.Add(5, "V");
        map.Add(4, "IV");
        map.Add(1, "I");
    }
}

Sample Test Case: 3

- Title Slug: roman-to-integer
Question FrontEnd Id: 13
Title: Roman to Integer
Difficulty: Easy
Status: ac
Stats: {"totalAccepted": "2.6M", "totalSubmission": "4.4M", "totalAcceptedRaw": 2563322, "totalSubmissionRaw": 4374860, "acRate": "58.6%"}
Submissions: 1
ID: 655395820
Language Name: csharp
Language Verbose Name: C#
Question ID: 13
URL: 
Code: public class Solution {
    public int RomanToInt(string s) {
        Dictionary<char,int> romanConvert = new Dictionary<char,int>();
        romanConvert.Add('M',1000);
        romanConvert.Add('D',500);
        romanConvert.Add('C',100);
        romanConvert.Add('L',50);
        romanConvert.Add('X',10);
        romanConvert.Add('V',5);
        romanConvert.Add('I',1);
        
        
        int ret = romanConvert[s[0]];
        if(s.Length==1){
            return ret;
        }
        
        
        for(int i=1;i<s.Length;i++){
            Console.WriteLine($"Current total: {ret}");
            Console.WriteLine(romanConvert[s[i]]);
            if(romanConvert[s[i-1]]<romanConvert[s[i]]){
               Console.WriteLine("subtracting");
                ret-=2*(romanConvert[s[i-1]]);
                ret+=romanConvert[s[i]];
            }else{
                Console.WriteLine("adding");
                ret+=romanConvert[s[i]];
            }
        }
        
        return ret;
    }
}

Sample Test Case: "III"

- Title Slug: longest-common-prefix
Question FrontEnd Id: 14
Title: Longest Common Prefix
Difficulty: Easy
Status: ac
Stats: {"totalAccepted": "2.3M", "totalSubmission": "5.7M", "totalAcceptedRaw": 2310819, "totalSubmissionRaw": 5651978, "acRate": "40.9%"}
Submissions: 1
ID: 655357000
Language Name: csharp
Language Verbose Name: C#
Question ID: 14
URL: 
Code: public class Solution {
    public string LongestCommonPrefix(string[] strs) {
        if(strs.Length==0){
            return "";
        }
        
        string prefix = strs[0];
        
        for(int i=1;i<strs.Length;i++){
            while(strs[i].IndexOf(prefix)!=0){
                prefix=prefix.Substring(0,prefix.Length-1);
                if(prefix.Length==0){
                    return "";
                }
            }
        }
        return prefix;
    }
}

Sample Test Case: ["flower","flow","flight"]

- Title Slug: 3sum
Question FrontEnd Id: 15
Title: 3Sum
Difficulty: Medium
Status: ac
Stats: {"totalAccepted": "2.6M", "totalSubmission": "8M", "totalAcceptedRaw": 2600790, "totalSubmissionRaw": 7973948, "acRate": "32.6%"}
Submissions: 1
ID: 633320998
Language Name: csharp
Language Verbose Name: C#
Question ID: 15
URL: 
Code: public class Solution {
    public IList<IList<int>> ThreeSum(int[] nums) {
        Array.Sort(nums);
        List<IList<int>> res = new List<IList<int>>();
        for(int i=0;i<nums.Length;i++){
            if(i==0||nums[i-1]!=nums[i]){
                twoSum(nums,i,res);
            }
        }
        return res;
    }
    
    private void twoSum(int[] nums, int i, List<IList<int>> res){
        int lo = i+1;
        int hi = nums.Length-1;
        while(lo<hi){
        int sum= nums[i]+nums[lo]+nums[hi];
        if(sum<0) lo++;
            else if(sum>0)hi--;
            else{
                List<int> adder = new List<int>();
                adder.Add(nums[i]);
                adder.Add(nums[lo++]);
                adder.Add(nums[hi--]);
                res.Add(adder);
                
                while(lo<hi && nums[lo]== nums[lo-1]){
                    lo++;
                }
            }
        }
        
    }
}

Sample Test Case: [-1,0,1,2,-1,-4]

- Title Slug: 3sum-closest
Question FrontEnd Id: 16
Title: 3Sum Closest
Difficulty: Medium
Status: ac
Stats: {"totalAccepted": "1M", "totalSubmission": "2.2M", "totalAcceptedRaw": 1017511, "totalSubmissionRaw": 2225471, "acRate": "45.7%"}
Submissions: 1
ID: 620584361
Language Name: csharp
Language Verbose Name: C#
Question ID: 16
URL: 
Code: public class Solution {
    public int ThreeSumClosest(int[] nums, int target)
        {

            int n = nums.Length;
            int min = Int32.MaxValue;
            int prevSum = Int32.MaxValue;
            // Sort.
            Array.Sort(nums);
            // -4,-1,1,2
            for (int i = 0; i < n; i++)
            {
                int low = i + 1;
                int high = n - 1;
                while (low < high)
                {
                    int sum = nums[low] + nums[high] + nums[i];
                    // get the distance from target
                    int distance = Math.Abs(target - sum);

                    if (sum < target || low > i + 1 && nums[low] == nums[low - 1])
                        low++;
                    else if (sum > target || high < n - 1 && nums[high] == nums[high + 1])
                        high--;
                    else
                        return sum;

                    if (distance < Math.Abs(min))
                    {
                        min = distance;
                        prevSum = sum;
                    }



                    //min = Math.Min(abs(target-sum), min);
                }
            }
            return prevSum;
        }
}

Sample Test Case: [-1,2,1,-4]
1

- Title Slug: letter-combinations-of-a-phone-number
Question FrontEnd Id: 17
Title: Letter Combinations of a Phone Number
Difficulty: Medium
Status: ac
Stats: {"totalAccepted": "1.5M", "totalSubmission": "2.7M", "totalAcceptedRaw": 1528521, "totalSubmissionRaw": 2699676, "acRate": "56.6%"}
Submissions: 1
ID: 460249165
Language Name: csharp
Language Verbose Name: C#
Question ID: 17
URL: 
Code: public class Solution {
    public IList<string> LetterCombinations(string digits) {
        var dict = new Dictionary<char, string>
            {
                {'2', "abc"},
                {'3', "def"},
                {'4', "ghi"},
                {'5', "jkl"},
                {'6', "mno"},
                {'7', "pqrs"},
                {'8', "tuv"},
                {'9', "wxyz"}
            };

            var list = new List<string>();
        
            if(!string.IsNullOrEmpty(digits))
                Backtrack(list, digits, dict, new List<char>(), 0);

            return list;
    }
    
    void Backtrack(List<string> list, string digits, Dictionary<char, string> dict, List<char> temp, int start)
        {
            if (temp.Count == digits.Length) list.Add(string.Join("", temp));

            for (var i = start; i < digits.Length; i++)
            {
                for (var j = 0; j < dict[digits[i]].Length; j++)
                {
                    temp.Add(dict[digits[i]][j]);

                    Backtrack(list, digits, dict, temp, i + 1);

                    temp.RemoveAt(temp.Count - 1);
                }

            }
        }
}

Sample Test Case: "23"

- Title Slug: valid-parentheses
Question FrontEnd Id: 20
Title: Valid Parentheses
Difficulty: Easy
Status: ac
Stats: {"totalAccepted": "3.3M", "totalSubmission": "8M", "totalAcceptedRaw": 3253399, "totalSubmissionRaw": 8035055, "acRate": "40.5%"}
Submissions: 1
ID: 748256213
Language Name: csharp
Language Verbose Name: C#
Question ID: 20
URL: 
Code: public class Solution {
    public bool IsValid(string s) {
        Stack<char> input = new Stack<char>();
        
        HashSet<char> open= new HashSet<char>();
        open.Add('(');
        open.Add('[');
        open.Add('{');
        HashSet<char> close = new HashSet<char>();
        close.Add(')');
        close.Add(']');
        close.Add('}');
        
        for(int i=0;i<s.Length;i++){
            if(open.Contains(s[i])){
                input.Push(s[i]);
            }else{
                if(input.Count==0)
                    return false;
                
                if(valid(input.Peek(),s[i])){
                    input.Pop();
                }else{return false;}
            }
        }
        
        if(input.Count!=0)
            return false;
        
        return true;
        
    }
    
    private bool valid(char peek, char input){
        if((peek=='('&& input == ')')||(peek=='{'&& input == '}')||(peek=='['&& input == ']'))
            return true;
        return false;
    }
}

Sample Test Case: "()"

- Title Slug: merge-two-sorted-lists
Question FrontEnd Id: 21
Title: Merge Two Sorted Lists
Difficulty: Easy
Status: ac
Stats: {"totalAccepted": "3.1M", "totalSubmission": "5M", "totalAcceptedRaw": 3148418, "totalSubmissionRaw": 5031878, "acRate": "62.6%"}
Submissions: 1
ID: 524012095
Language Name: csharp
Language Verbose Name: C#
Question ID: 21
URL: 
Code: /**
 * Definition for singly-linked list.
 * public class ListNode {
 *     public int val;
 *     public ListNode next;
 *     public ListNode(int val=0, ListNode next=null) {
 *         this.val = val;
 *         this.next = next;
 *     }
 * }
 */
public class Solution {
    public ListNode MergeTwoLists(ListNode l1, ListNode l2) {
        if(l1 == null)
            return l2;
        if(l2 == null)
            return l1;

        var x = l1.next;
        var y = l2.next;

        if(l2.val > l1.val)
        {
            l1.next = MergeTwoLists(x, l2);
            return l1;
        }
        else
        {
            l2.next = MergeTwoLists(y,l1);
            return l2;
        }
    }
}

Sample Test Case: [1,2,4]
[1,3,4]

- Title Slug: remove-duplicates-from-sorted-array
Question FrontEnd Id: 26
Title: Remove Duplicates from Sorted Array
Difficulty: Easy
Status: ac
Stats: {"totalAccepted": "2.9M", "totalSubmission": "5.6M", "totalAcceptedRaw": 2910519, "totalSubmissionRaw": 5638263, "acRate": "51.6%"}
Submissions: 1
ID: 629125401
Language Name: csharp
Language Verbose Name: C#
Question ID: 26
URL: 
Code: public class Solution {
   public int RemoveDuplicates(int[] nums) {

  if(nums.Length==0)return 0;
  
  int index=1;
  
  for(int i=0;i<nums.Length-1;i++){
    
    if(nums[i]!=nums[i+1]){
      nums[index++]=nums[i+1];
    }
    
  }
  
    return index;
}
}

Sample Test Case: [1,1,2]

- Title Slug: remove-element
Question FrontEnd Id: 27
Title: Remove Element
Difficulty: Easy
Status: ac
Stats: {"totalAccepted": "1.7M", "totalSubmission": "3.3M", "totalAcceptedRaw": 1749002, "totalSubmissionRaw": 3294602, "acRate": "53.1%"}
Submissions: 1
ID: 858950163
Language Name: csharp
Language Verbose Name: C#
Question ID: 27
URL: 
Code: public class Solution {
    public int RemoveElement(int[] nums, int val) {
        int latestNonVal=0;
        int size= nums.Length;
        for(int i=0;i<nums.Length;i++){
            if(nums[i]!=val){
                
                nums[latestNonVal]=nums[i];
                latestNonVal++;
            }else{
                size--;
            }
        }
        return size;
    }
}

Sample Test Case: [3,2,2,3]
3

- Title Slug: find-the-index-of-the-first-occurrence-in-a-string
Question FrontEnd Id: 28
Title: Find the Index of the First Occurrence in a String
Difficulty: Easy
Status: ac
Stats: {"totalAccepted": "1.7M", "totalSubmission": "4.3M", "totalAcceptedRaw": 1687573, "totalSubmissionRaw": 4309547, "acRate": "39.2%"}
Submissions: 1
ID: 678012826
Language Name: csharp
Language Verbose Name: C#
Question ID: 28
URL: 
Code: public class Solution {
    public int StrStr(string haystack, string needle) {
        return haystack.IndexOf(needle);
    }
}

Sample Test Case: "sadbutsad"
"sad"

- Title Slug: search-in-rotated-sorted-array
Question FrontEnd Id: 33
Title: Search in Rotated Sorted Array
Difficulty: Medium
Status: ac
Stats: {"totalAccepted": "2M", "totalSubmission": "5.1M", "totalAcceptedRaw": 1996370, "totalSubmissionRaw": 5117226, "acRate": "39.0%"}
Submissions: 1
ID: 762780570
Language Name: csharp
Language Verbose Name: C#
Question ID: 33
URL: 
Code: public class Solution {
    public int Search(int[] nums, int target) {
        return Array.IndexOf(nums,target);
    }
}

Sample Test Case: [4,5,6,7,0,1,2]
0

- Title Slug: find-first-and-last-position-of-element-in-sorted-array
Question FrontEnd Id: 34
Title: Find First and Last Position of Element in Sorted Array
Difficulty: Medium
Status: ac
Stats: {"totalAccepted": "1.5M", "totalSubmission": "3.6M", "totalAcceptedRaw": 1507374, "totalSubmissionRaw": 3596356, "acRate": "41.9%"}
Submissions: 1
ID: 633381478
Language Name: csharp
Language Verbose Name: C#
Question ID: 34
URL: 
Code: public class Solution {
    public int[] SearchRange(int[] nums, int target) {
         int[] index = new int[2]{-1,-1};
       index[0] = Array.IndexOf(nums,target);
        index[1] = Array.LastIndexOf(nums,target);      
        return index;
    }
}

Sample Test Case: [5,7,7,8,8,10]
8

- Title Slug: search-insert-position
Question FrontEnd Id: 35
Title: Search Insert Position
Difficulty: Easy
Status: ac
Stats: {"totalAccepted": "2.1M", "totalSubmission": "4.9M", "totalAcceptedRaw": 2145734, "totalSubmissionRaw": 4936508, "acRate": "43.5%"}
Submissions: 1
ID: 632105045
Language Name: csharp
Language Verbose Name: C#
Question ID: 35
URL: 
Code: public class Solution {
    public int SearchInsert(int[] nums, int target) {
        int ret= Array.BinarySearch(nums,target);
        if(ret<0){
            return ~ret;
        }
        return ret;
    }
}

Sample Test Case: [1,3,5,6]
5

- Title Slug: valid-sudoku
Question FrontEnd Id: 36
Title: Valid Sudoku
Difficulty: Medium
Status: ac
Stats: {"totalAccepted": "1.1M", "totalSubmission": "1.8M", "totalAcceptedRaw": 1071021, "totalSubmissionRaw": 1842245, "acRate": "58.1%"}
Submissions: 1
ID: 638364157
Language Name: csharp
Language Verbose Name: C#
Question ID: 36
URL: 
Code: public class Solution {
    public bool IsValidSudoku(char[][] board) {
        return checkRows(board) && checkColumns(board) && checkSubBoxes(board);
    }
    
    private bool checkRows(char[][] board){
        for(int i=0;i<board.Length;i++){
            if(!checkRow(board,i)){
                return false;
            }
        }
        return true;
        
    }
    
    private bool checkRow(char[][] board, int row){
        List<char> checker = new List<char>();
        for(int i=0;i<board[row].Length;i++){
            if(board[row][i]!='.'){
            if(checker.Contains(board[row][i])){
                
                return false;
            }else{
                checker.Add(board[row][i]);
            }
            }
        }
        return true;
    }
    
    
    private bool checkColumns(char[][] board){
        for(int i=0;i<board[0].Length;i++){
            if(!checkCol(board,i)){
             
                return false;
            }
        }
        return true;
        
    }
    
     private bool checkCol(char[][] board, int col){
        List<char> checker = new List<char>();
        for(int i=0;i<board.Length;i++){
            if(board[i][col]!='.'){
            if(checker.Contains(board[i][col])){
                return false;
            }else{
                checker.Add(board[i][col]);
            }
            }
        }
        return true;
    }
    
    
    private bool checkSubBoxes(char[][] board){
        for(int y = 0;y<board.Length;y=y+3){
           for(int x=0;x<board.Length;x=x+3){
               if(!checkSubBox(board,x,y)){
                    
                   return false;
               }
           }
        }
        return true;
        
        
    }
    
    private bool checkSubBox(char[][] board, int x, int y){
        List<char> checker = new List<char>();
        for(int i=y;i<y+3;i++){
            for(int j=x;j<x+3;j++){
                if(board[i][j]!='.'){
                if(checker.Contains(board[i][j])){
                    return false;
                }else{
                    checker.Add(board[i][j]);
                }
                }
            }
        }
        
        return true;
    }
}

Sample Test Case: [["5","3",".",".","7",".",".",".","."],["6",".",".","1","9","5",".",".","."],[".","9","8",".",".",".",".","6","."],["8",".",".",".","6",".",".",".","3"],["4",".",".","8",".","3",".",".","1"],["7",".",".",".","2",".",".",".","6"],[".","6",".",".",".",".","2","8","."],[".",".",".","4","1","9",".",".","5"],[".",".",".",".","8",".",".","7","9"]]

- Title Slug: rotate-image
Question FrontEnd Id: 48
Title: Rotate Image
Difficulty: Medium
Status: ac
Stats: {"totalAccepted": "1.3M", "totalSubmission": "1.8M", "totalAcceptedRaw": 1256928, "totalSubmissionRaw": 1768236, "acRate": "71.1%"}
Submissions: 1
ID: 636790240
Language Name: csharp
Language Verbose Name: C#
Question ID: 48
URL: 
Code: public class Solution {
    public void Rotate(int[][] matrix) {
       transpose(matrix);
        reflect(matrix);
    }
    
    private void transpose(int[][] matrix){
        int n = matrix.Length;
        for(int i=0;i<n;i++){
            for(int j=i+1;j<n;j++){
                int temp = matrix[j][i];
                matrix[j][i]=matrix[i][j];
                matrix[i][j]=temp;
            }
        }
    }
    
    private void reflect(int[][] matrix){
        int n = matrix.Length;
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < n / 2; j++) {
                int tmp = matrix[i][j];
                matrix[i][j] = matrix[i][n - j - 1];
                matrix[i][n - j - 1] = tmp;
            }
        }
    }
}

Sample Test Case: [[1,2,3],[4,5,6],[7,8,9]]

- Title Slug: group-anagrams
Question FrontEnd Id: 49
Title: Group Anagrams
Difficulty: Medium
Status: ac
Stats: {"totalAccepted": "1.9M", "totalSubmission": "2.9M", "totalAcceptedRaw": 1918391, "totalSubmissionRaw": 2872898, "acRate": "66.8%"}
Submissions: 1
ID: 748264845
Language Name: csharp
Language Verbose Name: C#
Question ID: 49
URL: 
Code: public class Solution {
    public IList<IList<string>> GroupAnagrams(string[] strs) {
        Dictionary<string,List<string>> groups = new Dictionary<string,List<string>>();
        for(int i=0;i<strs.Length;i++){
            char[] temp = strs[i].ToCharArray();
            Array.Sort(temp);
            string sorted = new string(temp);
            if(groups.ContainsKey(sorted)){
                groups[sorted].Add(strs[i]);
            }else{
                groups.Add(sorted,new List<string>{strs[i]});
            }
        }
        
        List<IList<string>> ret = new List<IList<string>>();
        foreach(KeyValuePair<string,List<string>> kvp in groups){
            ret.Add(kvp.Value);
        }
        
        return ret;
    }
}

Sample Test Case: ["eat","tea","tan","ate","nat","bat"]

- Title Slug: powx-n
Question FrontEnd Id: 50
Title: Pow(x, n)
Difficulty: Medium
Status: ac
Stats: {"totalAccepted": "1.2M", "totalSubmission": "3.6M", "totalAcceptedRaw": 1180063, "totalSubmissionRaw": 3568498, "acRate": "33.1%"}
Submissions: 1
ID: 647882959
Language Name: csharp
Language Verbose Name: C#
Question ID: 50
URL: 
Code: public class Solution {
    public double MyPow(double x, int n) {
        /*
        if(n==0){
            return 1;
        }
        
        double ret=1;
        for(int i=1;i<=Math.Abs(n);i++){
            ret=ret*x;
        }
        
        if(n<0){
            ret=1/ret;
        }
        
        return ret;
    */
        
        return Math.Pow(x, (double)n);
    }
}

Sample Test Case: 2.00000
10

- Title Slug: maximum-subarray
Question FrontEnd Id: 53
Title: Maximum Subarray
Difficulty: Medium
Status: ac
Stats: {"totalAccepted": "3.1M", "totalSubmission": "6.2M", "totalAcceptedRaw": 3108794, "totalSubmissionRaw": 6195899, "acRate": "50.2%"}
Submissions: 1
ID: 634538453
Language Name: csharp
Language Verbose Name: C#
Question ID: 53
URL: 
Code: public class Solution {
    private int[] numsArray;
    public int MaxSubArray(int[] nums) {
        numsArray= nums;
        return findBestSubarray(0,numsArray.Length-1);
    }
    private int findBestSubarray(int left,int right){
        if(left>right){
            return Int32.MinValue;
        }
        int mid = (left+right)/2;
        int curr=0;
        int bestLeftSum = 0;
        int bestRightSum = 0;
        for(int i=mid-1;i>=left;i--){
            curr+=numsArray[i];
              bestLeftSum = Math.Max(bestLeftSum, curr);
        }
        curr = 0;
        for(int i =mid+1;i<=right;i++){
            curr += numsArray[i];
            bestRightSum = Math.Max(bestRightSum, curr);
        }
        
        int bestCombinedSum = numsArray[mid] + bestLeftSum + bestRightSum;
        
         int leftHalf = findBestSubarray(left, mid - 1);
        int rightHalf = findBestSubarray(mid + 1, right);
        
        return Math.Max(bestCombinedSum, Math.Max(leftHalf, rightHalf));
    }
    
}

Sample Test Case: [-2,1,-3,4,-1,2,1,-5,4]

- Title Slug: merge-intervals
Question FrontEnd Id: 56
Title: Merge Intervals
Difficulty: Medium
Status: ac
Stats: {"totalAccepted": "1.9M", "totalSubmission": "4M", "totalAcceptedRaw": 1850567, "totalSubmissionRaw": 4005935, "acRate": "46.2%"}
Submissions: 1
ID: 636149911
Language Name: csharp
Language Verbose Name: C#
Question ID: 56
URL: 
Code: public class Solution {
    public int[][] Merge(int[][] intervals) {
        if (intervals == null || intervals.Length == 0 || intervals.Length == 1)
            return intervals;
        
        List<int[]> res = new List<int[]>();
        
        intervals = intervals.OrderBy(x => x[0]).ToArray();
        
        int s = intervals[0][0],
            e = intervals[0][1];
        
        for (int i = 1; i < intervals.Length; i++)
            if (intervals[i][0] > e)
            {
                res.Add(new int[] { s, e });
                s = intervals[i][0];
                e = intervals[i][1];
            }
            else
                e = Math.Max(e, intervals[i][1]);
        
        res.Add(new int[] { s, e });
        
        return res.ToArray();
    }
}

Sample Test Case: [[1,3],[2,6],[8,10],[15,18]]

- Title Slug: length-of-last-word
Question FrontEnd Id: 58
Title: Length of Last Word
Difficulty: Easy
Status: ac
Stats: {"totalAccepted": "1.1M", "totalSubmission": "2.5M", "totalAcceptedRaw": 1094916, "totalSubmissionRaw": 2542657, "acRate": "43.1%"}
Submissions: 1
ID: 669274694
Language Name: csharp
Language Verbose Name: C#
Question ID: 58
URL: 
Code: public class Solution {
    public int LengthOfLastWord(string s) {
        s=s.Trim();
        string[] ret = s.Split(' ');
        
        return ret[ret.Length-1].Length;
    }
}

Sample Test Case: "Hello World"

- Title Slug: spiral-matrix-ii
Question FrontEnd Id: 59
Title: Spiral Matrix II
Difficulty: Medium
Status: ac
Stats: {"totalAccepted": "433.3K", "totalSubmission": "642.4K", "totalAcceptedRaw": 433278, "totalSubmissionRaw": 642368, "acRate": "67.5%"}
Submissions: 1
ID: 748186664
Language Name: csharp
Language Verbose Name: C#
Question ID: 59
URL: 
Code: public class Solution {
    public int[][] GenerateMatrix(int n) {
        int[][] result = new int[n][];
        for(int i=0;i<n;i++){
            result[i]= new int[n];
        }
        
        int cnt = 1;
        int[][] dir = {
            new int[]{0,1},
            new int[]{1,0},
            new int[]{0,-1},
            new int[]{-1,0}
        };
        
        int d = 0;
        int x=0;
        int y=0;
        while(cnt<=n*n){
            result[y][x]=cnt;
            cnt++;
            int r= floorMod(y+dir[d][0],n);
            int c= floorMod(x+dir[d][1],n); 
            
            if(result[r][c]!=0)
                d=(d+1)%4;
            y+=dir[d][0];
            x+=dir[d][1];
        }
        return result;
    }
    
    private int floorMod(int x, int y){
        return ((x%y)+y)%y;
    }
}

Sample Test Case: 3

- Title Slug: plus-one
Question FrontEnd Id: 66
Title: Plus One
Difficulty: Easy
Status: ac
Stats: {"totalAccepted": "1.6M", "totalSubmission": "3.8M", "totalAcceptedRaw": 1642769, "totalSubmissionRaw": 3758495, "acRate": "43.7%"}
Submissions: 1
ID: 858998082
Language Name: csharp
Language Verbose Name: C#
Question ID: 66
URL: 
Code: public class Solution {
    public int[] PlusOne(int[] digits) {
        List<int> ret = new List<int>();
        Array.Reverse(digits);
        
        digits[0]++;
        int carry=0;
        for(int i=0;i<digits.Length;i++){
            if(digits[i]+carry>=10){
                
                digits[i]=(digits[i]+carry)%10;
                carry=1;
            }else{
                digits[i]+=carry;
                carry=0;
            }
            ret.Add(digits[i]);
        }
        
        if(carry==1)
            ret.Add(1);
        
        int[] retArr=  ret.ToArray();
        Array.Reverse(retArr);
        return retArr;
        
    

    }
}

Sample Test Case: [1,2,3]

- Title Slug: climbing-stairs
Question FrontEnd Id: 70
Title: Climbing Stairs
Difficulty: Easy
Status: ac
Stats: {"totalAccepted": "2.3M", "totalSubmission": "4.4M", "totalAcceptedRaw": 2308033, "totalSubmissionRaw": 4422690, "acRate": "52.2%"}
Submissions: 1
ID: 764725671
Language Name: csharp
Language Verbose Name: C#
Question ID: 70
URL: 
Code: public class Solution {
    public int ClimbStairs(int n) {
        if(n<=2){
            return n;
        }
        
        int[] stairs = new int[n];
        
        stairs[0]=1;
        stairs[1]=2;
        
        for(int i=2;i<n;i++){
            stairs[i]=stairs[i-1]+stairs[i-2];
        }
        return stairs[n-1];
    }
    
}

Sample Test Case: 2

- Title Slug: search-a-2d-matrix
Question FrontEnd Id: 74
Title: Search a 2D Matrix
Difficulty: Medium
Status: ac
Stats: {"totalAccepted": "1.2M", "totalSubmission": "2.5M", "totalAcceptedRaw": 1193452, "totalSubmissionRaw": 2497935, "acRate": "47.8%"}
Submissions: 1
ID: 634537856
Language Name: csharp
Language Verbose Name: C#
Question ID: 74
URL: 
Code: public class Solution {
    public bool SearchMatrix(int[][] matrix, int target) {
        int m= matrix.Length;
        if(m==0)return false;
        
        int n = matrix[0].Length;
        
        int left=0;
        int right = m*n-1;
        
        while(left<=right){
             int pivotIdx= (left+right)/2;
             int pivotElement= matrix[pivotIdx/n][pivotIdx%n];
            if(target==pivotElement){
                return true;
            }else{
                if(target<pivotElement){
                    right = pivotIdx-1;
                }else{
                    left=pivotIdx+1;
                }
            }
        }
        return false;
    }
}

Sample Test Case: [[1,3,5,7],[10,11,16,20],[23,30,34,60]]
3

- Title Slug: sort-colors
Question FrontEnd Id: 75
Title: Sort Colors
Difficulty: Medium
Status: ac
Stats: {"totalAccepted": "1.4M", "totalSubmission": "2.4M", "totalAcceptedRaw": 1397599, "totalSubmissionRaw": 2382517, "acRate": "58.7%"}
Submissions: 1
ID: 634539646
Language Name: csharp
Language Verbose Name: C#
Question ID: 75
URL: 
Code: public class Solution {
    public void SortColors(int[] nums) {
        Array.Sort(nums);
    }
}

Sample Test Case: [2,0,2,1,1,0]

- Title Slug: word-search
Question FrontEnd Id: 79
Title: Word Search
Difficulty: Medium
Status: ac
Stats: {"totalAccepted": "1.3M", "totalSubmission": "3.1M", "totalAcceptedRaw": 1259668, "totalSubmissionRaw": 3129050, "acRate": "40.3%"}
Submissions: 1
ID: 619879055
Language Name: csharp
Language Verbose Name: C#
Question ID: 79
URL: 
Code: public class Solution {
    public bool Exist(char[][] board, string word) {
        int width = board[0].Length;
        int height = board.Length;
        bool[][] check = new bool[height][];
        
        for(int i=0;i<height;i++){
            check[i]=new bool[width];
        }
        
        
        bool traverse(int x, int y, int cPos){
            if(cPos==word.Length){
                return true;
            }
         if(x<0||y<0|| x>=width ||y>=height|| check[y][x]==true|| board[y][x]!= word[cPos]){
             
             return false;
         }
            check[y][x]=true;
            bool ret = traverse(x+1,y,cPos+1)|| traverse(x-1,y,cPos+1)||traverse(x,y+1,cPos+1)|| traverse(x,y-1,cPos+1);
            check[y][x]=false;
          return ret;
            
        }
        
        
       for(int i=0;i<width;i++){
           for(int j=0;j<height;j++){
               if(traverse(i,j,0)==true)
                   return true;
           }
       }
        
        return false;
    }
}

Sample Test Case: [["A","B","C","E"],["S","F","C","S"],["A","D","E","E"]]
"ABCCED"

- Title Slug: remove-duplicates-from-sorted-list-ii
Question FrontEnd Id: 82
Title: Remove Duplicates from Sorted List II
Difficulty: Medium
Status: ac
Stats: {"totalAccepted": "594.3K", "totalSubmission": "1.3M", "totalAcceptedRaw": 594275, "totalSubmissionRaw": 1293378, "acRate": "45.9%"}
Submissions: 1
ID: 656752425
Language Name: csharp
Language Verbose Name: C#
Question ID: 82
URL: 
Code: /**
 * Definition for singly-linked list.
 * public class ListNode {
 *     public int val;
 *     public ListNode next;
 *     public ListNode(int val=0, ListNode next=null) {
 *         this.val = val;
 *         this.next = next;
 *     }
 * }
 */
public class Solution {
    public ListNode DeleteDuplicates(ListNode head) {
       
        ListNode sent= new ListNode(0,head);
         ListNode prev = sent;
        
        while(head!=null){
            
            if(head.next!=null && head.val==head.next.val){
                while(head.next!=null && head.val==head.next.val){
                    head=head.next;
                }
                prev.next=head.next;
            }
            
            else{
                prev=prev.next;
            }
          head=head.next;
            
        }
        
        
        return sent.next;
    }
}

Sample Test Case: [1,2,3,3,4,4,5]

- Title Slug: merge-sorted-array
Question FrontEnd Id: 88
Title: Merge Sorted Array
Difficulty: Easy
Status: ac
Stats: {"totalAccepted": "2M", "totalSubmission": "4.2M", "totalAcceptedRaw": 1966156, "totalSubmissionRaw": 4212057, "acRate": "46.7%"}
Submissions: 1
ID: 872161562
Language Name: csharp
Language Verbose Name: C#
Question ID: 88
URL: 
Code: public class Solution {
    public void Merge(int[] nums1, int m, int[] nums2, int n) {
        for(int i=0;i<nums2.Length;i++){
            nums1[m+i]=nums2[i];
        }
        
        Array.Sort(nums1);
    }
}

Sample Test Case: [1,2,3,0,0,0]
3
[2,5,6]
3

- Title Slug: binary-tree-inorder-traversal
Question FrontEnd Id: 94
Title: Binary Tree Inorder Traversal
Difficulty: Easy
Status: ac
Stats: {"totalAccepted": "2M", "totalSubmission": "2.7M", "totalAcceptedRaw": 1972069, "totalSubmissionRaw": 2670191, "acRate": "73.9%"}
Submissions: 1
ID: 654820078
Language Name: csharp
Language Verbose Name: C#
Question ID: 94
URL: 
Code: /**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     public int val;
 *     public TreeNode left;
 *     public TreeNode right;
 *     public TreeNode(int val=0, TreeNode left=null, TreeNode right=null) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
public class Solution {
    List<int> ret;
    public IList<int> InorderTraversal(TreeNode root) {
        ret = new List<int>();
        
        inorderTrav(root);
        return ret;
    }
    
    private void inorderTrav(TreeNode node){
        if(node == null)
            return;
        
        inorderTrav(node.left);
        ret.Add(node.val);
        inorderTrav(node.right);
    }
}

Sample Test Case: [1,null,2,3]

- Title Slug: same-tree
Question FrontEnd Id: 100
Title: Same Tree
Difficulty: Easy
Status: ac
Stats: {"totalAccepted": "1.5M", "totalSubmission": "2.6M", "totalAcceptedRaw": 1499492, "totalSubmissionRaw": 2574772, "acRate": "58.2%"}
Submissions: 1
ID: 652354270
Language Name: csharp
Language Verbose Name: C#
Question ID: 100
URL: 
Code: /**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     public int val;
 *     public TreeNode left;
 *     public TreeNode right;
 *     public TreeNode(int val=0, TreeNode left=null, TreeNode right=null) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
public class Solution {
    public bool IsSameTree(TreeNode p, TreeNode q) {
         if(p==null && q==null){
            return true;
        }
        if(p==null && q!= null || q==null && p!= null || p.val != q.val ){
            return false;
        }
       
        return IsSameTree(p.left, q.left) && IsSameTree(p.right, q.right);
    }
}

Sample Test Case: [1,2,3]
[1,2,3]

- Title Slug: symmetric-tree
Question FrontEnd Id: 101
Title: Symmetric Tree
Difficulty: Easy
Status: ac
Stats: {"totalAccepted": "1.6M", "totalSubmission": "3M", "totalAcceptedRaw": 1617854, "totalSubmissionRaw": 2975413, "acRate": "54.4%"}
Submissions: 1
ID: 656731895
Language Name: csharp
Language Verbose Name: C#
Question ID: 101
URL: 
Code: /**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     public int val;
 *     public TreeNode left;
 *     public TreeNode right;
 *     public TreeNode(int val=0, TreeNode left=null, TreeNode right=null) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
public class Solution {
    public bool IsSymmetric(TreeNode root) {
        if(root==null){
            return true;
        }
        
        return symmetric(root.left,root.right);
    }
    
    private bool symmetric(TreeNode node1, TreeNode node2){
         if(node1==null && node2 == null)
            return true;
        
        if((node1==null && node2!=null)|| (node2==null && node1 !=null) || (node1.val !=node2.val))
            return false;
        
       
        
        return symmetric(node1.left,node2.right) && symmetric(node1.right,node2.left);
    }
}

Sample Test Case: [1,2,2,3,4,4,3]

- Title Slug: binary-tree-level-order-traversal
Question FrontEnd Id: 102
Title: Binary Tree Level Order Traversal
Difficulty: Medium
Status: ac
Stats: {"totalAccepted": "1.8M", "totalSubmission": "2.7M", "totalAcceptedRaw": 1750661, "totalSubmissionRaw": 2717216, "acRate": "64.4%"}
Submissions: 1
ID: 769921238
Language Name: csharp
Language Verbose Name: C#
Question ID: 102
URL: 
Code: /**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     public int val;
 *     public TreeNode left;
 *     public TreeNode right;
 *     public TreeNode(int val=0, TreeNode left=null, TreeNode right=null) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
public class Solution {
    public IList<IList<int>> LevelOrder(TreeNode root) {
        List<IList<int>> ret = new List<IList<int>>();
        if(root==null)
            return ret;
        Queue<TreeNode> lot = new Queue<TreeNode>();
        lot.Enqueue(root);
        while(lot.Count!=0){
            Queue<TreeNode> temp = new Queue<TreeNode>();
            List<int> adder = new List<int>();
            while(lot.Count!=0){
                TreeNode tempNode= lot.Dequeue();
                adder.Add(tempNode.val);
                if(tempNode.left!=null){
                    temp.Enqueue(tempNode.left);
                }
                if(tempNode.right!=null){
                    temp.Enqueue(tempNode.right);
                }
            }
            ret.Add(adder);
            lot= temp;
            
        }
        return ret;
    }
}

Sample Test Case: [3,9,20,null,null,15,7]

- Title Slug: maximum-depth-of-binary-tree
Question FrontEnd Id: 104
Title: Maximum Depth of Binary Tree
Difficulty: Easy
Status: ac
Stats: {"totalAccepted": "2.3M", "totalSubmission": "3.1M", "totalAcceptedRaw": 2293066, "totalSubmissionRaw": 3101607, "acRate": "73.9%"}
Submissions: 1
ID: 526347202
Language Name: csharp
Language Verbose Name: C#
Question ID: 104
URL: 
Code: /**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     public int val;
 *     public TreeNode left;
 *     public TreeNode right;
 *     public TreeNode(int val=0, TreeNode left=null, TreeNode right=null) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
public class Solution {
    public int MaxDepth(TreeNode root) {
        if(root ==null){
            return 0;
        }
        
        return Math.Max(MaxDepth(root.left),MaxDepth(root.right))+1;
        
        
    }
}

Sample Test Case: [3,9,20,null,null,15,7]

- Title Slug: convert-sorted-array-to-binary-search-tree
Question FrontEnd Id: 108
Title: Convert Sorted Array to Binary Search Tree
Difficulty: Easy
Status: ac
Stats: {"totalAccepted": "979.4K", "totalSubmission": "1.4M", "totalAcceptedRaw": 979355, "totalSubmissionRaw": 1401200, "acRate": "69.9%"}
Submissions: 1
ID: 678036495
Language Name: csharp
Language Verbose Name: C#
Question ID: 108
URL: 
Code: /**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     public int val;
 *     public TreeNode left;
 *     public TreeNode right;
 *     public TreeNode(int val=0, TreeNode left=null, TreeNode right=null) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
public class Solution {
    public TreeNode SortedArrayToBST(int[] nums) {
        return helper(nums, 0,nums.Length-1);
    }
    
    private TreeNode helper(int[] nums, int left, int right){
        if(left>right) return null;
        
        int p = (left+right)/2;
        
        TreeNode root = new TreeNode(nums[p]);
        root.left = helper(nums,left, p-1);
        root.right =helper(nums,p+1,right);
        
        return root;
    }
}

Sample Test Case: [-10,-3,0,5,9]

- Title Slug: path-sum
Question FrontEnd Id: 112
Title: Path Sum
Difficulty: Easy
Status: ac
Stats: {"totalAccepted": "1.2M", "totalSubmission": "2.4M", "totalAcceptedRaw": 1157317, "totalSubmissionRaw": 2394707, "acRate": "48.3%"}
Submissions: 1
ID: 654114002
Language Name: csharp
Language Verbose Name: C#
Question ID: 112
URL: 
Code: /**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     public int val;
 *     public TreeNode left;
 *     public TreeNode right;
 *     public TreeNode(int val=0, TreeNode left=null, TreeNode right=null) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
public class Solution {
    public bool HasPathSum(TreeNode root, int targetSum) {
        if(root == null){
            return false;
        }
        
        return dfs(root, 0, targetSum);
    }
    
    private bool dfs(TreeNode node, int total, int targetSum){
        if(node.left ==null && node.right == null ){
            total+=node.val;
            if(total == targetSum){
                return true;
            }
            
            return false;
        }
        
        
        total+=node.val;
        
        if(node.left!=null && node.right==null){
            
            return dfs(node.left,total,targetSum);
        }else if(node.right!=null && node.left==null){
            return dfs(node.right,total,targetSum);
        }
        
          
        
        return  dfs(node.right,total,targetSum)||dfs(node.left,total,targetSum);
    }
}

Sample Test Case: [5,4,8,11,null,13,4,7,2,null,null,null,1]
22

- Title Slug: best-time-to-buy-and-sell-stock
Question FrontEnd Id: 121
Title: Best Time to Buy and Sell Stock
Difficulty: Easy
Status: ac
Stats: {"totalAccepted": "3.2M", "totalSubmission": "6M", "totalAcceptedRaw": 3249216, "totalSubmissionRaw": 5984175, "acRate": "54.3%"}
Submissions: 1
ID: 762772977
Language Name: csharp
Language Verbose Name: C#
Question ID: 121
URL: 
Code: public class Solution {
    
    public int MaxProfit(int[] prices) {
        int minPrice= 100000000;
        int max=0;
        for(int i=0;i<prices.Length;i++){
            if(prices[i]<minPrice){
                minPrice= prices[i];
            }else if(prices[i]-minPrice>max){
                max= prices[i]-minPrice;
            }
        }
        return max;
    }
    
    
}

Sample Test Case: [7,1,5,3,6,4]

- Title Slug: best-time-to-buy-and-sell-stock-ii
Question FrontEnd Id: 122
Title: Best Time to Buy and Sell Stock II
Difficulty: Medium
Status: ac
Stats: {"totalAccepted": "1.4M", "totalSubmission": "2.2M", "totalAcceptedRaw": 1415186, "totalSubmissionRaw": 2213608, "acRate": "63.9%"}
Submissions: 1
ID: 858981044
Language Name: csharp
Language Verbose Name: C#
Question ID: 122
URL: 
Code: public class Solution {
    public int MaxProfit(int[] prices) {
        int max=0;
        for(int i=1;i<prices.Length;i++){
            if(prices[i]>prices[i-1]){
                max+=prices[i]-prices[i-1];
            }
        }
        return max;
    }
}

Sample Test Case: [7,1,5,3,6,4]

- Title Slug: clone-graph
Question FrontEnd Id: 133
Title: Clone Graph
Difficulty: Medium
Status: ac
Stats: {"totalAccepted": "971.3K", "totalSubmission": "1.8M", "totalAcceptedRaw": 971281, "totalSubmissionRaw": 1828763, "acRate": "53.1%"}
Submissions: 1
ID: 647131678
Language Name: csharp
Language Verbose Name: C#
Question ID: 133
URL: 
Code: /*
// Definition for a Node.
public class Node {
    public int val;
    public IList<Node> neighbors;

    public Node() {
        val = 0;
        neighbors = new List<Node>();
    }

    public Node(int _val) {
        val = _val;
        neighbors = new List<Node>();
    }

    public Node(int _val, List<Node> _neighbors) {
        val = _val;
        neighbors = _neighbors;
    }
}
*/

public class Solution {
    public Node CloneGraph(Node node) {
        if(node == null){
            return node;
        }
        
        Dictionary<Node,Node> visited = new Dictionary<Node,Node>();
        Queue<Node> queue = new Queue<Node>();
        queue.Enqueue(node);
        
        visited.Add(node, new Node(node.val));
        
        while(queue.Count !=0){
            Node n = queue.Dequeue();
            foreach(Node neighbor in n.neighbors){
                if(!visited.ContainsKey(neighbor)){
                    visited.Add(neighbor, new Node(neighbor.val));
                    queue.Enqueue(neighbor);
                }
                visited[n].neighbors.Add(visited[neighbor]);
            }
        }
        
        
        return visited[node];
    }
}

Sample Test Case: [[2,4],[1,3],[2,4],[1,3]]

- Title Slug: single-number
Question FrontEnd Id: 136
Title: Single Number
Difficulty: Easy
Status: ac
Stats: {"totalAccepted": "2.1M", "totalSubmission": "3M", "totalAcceptedRaw": 2132442, "totalSubmissionRaw": 3014646, "acRate": "70.7%"}
Submissions: 1
ID: 858988423
Language Name: csharp
Language Verbose Name: C#
Question ID: 136
URL: 
Code: public class Solution {
    public int SingleNumber(int[] nums) {
        int ret = 0;
        for(int i=0;i<nums.Length;i++){
            ret^= nums[i];
        }
        
        return ret;
    }
}

Sample Test Case: [2,2,1]

- Title Slug: linked-list-cycle-ii
Question FrontEnd Id: 142
Title: Linked List Cycle II
Difficulty: Medium
Status: ac
Stats: {"totalAccepted": "1M", "totalSubmission": "2.1M", "totalAcceptedRaw": 1044487, "totalSubmissionRaw": 2138097, "acRate": "48.9%"}
Submissions: 1
ID: 679114392
Language Name: csharp
Language Verbose Name: C#
Question ID: 142
URL: 
Code: /**
 * Definition for singly-linked list.
 * public class ListNode {
 *     public int val;
 *     public ListNode next;
 *     public ListNode(int x) {
 *         val = x;
 *         next = null;
 *     }
 * }
 */
public class Solution {
    public ListNode DetectCycle(ListNode head) {
        HashSet<ListNode> detector = new HashSet<ListNode>();
        
        while(head!=null){
            if(detector.Contains(head)){
                return head;
            }
            detector.Add(head);
            head=head.next;
        }
        
        return null;
    }
}

Sample Test Case: [3,2,0,-4]
1

- Title Slug: reorder-list
Question FrontEnd Id: 143
Title: Reorder List
Difficulty: Medium
Status: ac
Stats: {"totalAccepted": "657.5K", "totalSubmission": "1.2M", "totalAcceptedRaw": 657468, "totalSubmissionRaw": 1248988, "acRate": "52.6%"}
Submissions: 1
ID: 683252057
Language Name: csharp
Language Verbose Name: C#
Question ID: 143
URL: 
Code: public class Solution {
    public void ReorderList(ListNode head) {
        if(head==null || head.next==null)
            return;
        ListNode fast = head, slow = head, prev = null, l1 = head;
        
        while(fast!=null && fast.next!=null)
        {
            prev = slow;
            slow = slow.next;
            fast = fast.next.next;
        }
        
        prev.next = null;
        
        ListNode head2 = Reverse(slow); //This method is defined below.
        ListNode next = null;
        
        while(head2 != null)
        {
            next = head.next;
            head.next = head2;
            
            head = head2;
            head2 = next;
        }
    }
    
    private ListNode Reverse(ListNode head){
        ListNode next = null, prev = null;
        
        while(head!=null){
            next = head.next;
            head.next = prev;
            
            prev = head;
            head = next;
        }
        return prev;
    }
}

Sample Test Case: [1,2,3,4]

- Title Slug: binary-tree-preorder-traversal
Question FrontEnd Id: 144
Title: Binary Tree Preorder Traversal
Difficulty: Easy
Status: ac
Stats: {"totalAccepted": "1.3M", "totalSubmission": "1.9M", "totalAcceptedRaw": 1301351, "totalSubmissionRaw": 1944127, "acRate": "66.9%"}
Submissions: 1
ID: 654819092
Language Name: csharp
Language Verbose Name: C#
Question ID: 144
URL: 
Code: /**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     public int val;
 *     public TreeNode left;
 *     public TreeNode right;
 *     public TreeNode(int val=0, TreeNode left=null, TreeNode right=null) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
public class Solution {
    List<int> ret;
    public IList<int> PreorderTraversal(TreeNode root) {
        ret= new List<int>();
        preorder(root);
        return ret;
    }
    
    private void preorder(TreeNode node){
        if(node==null)
            return;
        
        ret.Add(node.val);
        preorder(node.left);
        preorder(node.right);
            
    }
}

Sample Test Case: [1,null,2,3]

- Title Slug: binary-tree-postorder-traversal
Question FrontEnd Id: 145
Title: Binary Tree Postorder Traversal
Difficulty: Easy
Status: ac
Stats: {"totalAccepted": "943.2K", "totalSubmission": "1.4M", "totalAcceptedRaw": 943166, "totalSubmissionRaw": 1385875, "acRate": "68.1%"}
Submissions: 1
ID: 654819609
Language Name: csharp
Language Verbose Name: C#
Question ID: 145
URL: 
Code: /**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     public int val;
 *     public TreeNode left;
 *     public TreeNode right;
 *     public TreeNode(int val=0, TreeNode left=null, TreeNode right=null) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
public class Solution {
    List<int> ret;
    public IList<int> PostorderTraversal(TreeNode root) {
        ret= new List<int>();
        postorder(root);
        return ret;
    }
    
    private void postorder(TreeNode node){
        if(node==null)
            return;
        
       
        postorder(node.left);
        postorder(node.right);
         ret.Add(node.val);
            
    }
}

Sample Test Case: [1,null,2,3]

- Title Slug: find-minimum-in-rotated-sorted-array
Question FrontEnd Id: 153
Title: Find Minimum in Rotated Sorted Array
Difficulty: Medium
Status: ac
Stats: {"totalAccepted": "1.3M", "totalSubmission": "2.6M", "totalAcceptedRaw": 1268059, "totalSubmissionRaw": 2593904, "acRate": "48.9%"}
Submissions: 1
ID: 762779858
Language Name: csharp
Language Verbose Name: C#
Question ID: 153
URL: 
Code: public class Solution {
    public int FindMin(int[] nums) {
        return nums.Min();
    }
}

Sample Test Case: [3,4,5,1,2]

- Title Slug: intersection-of-two-linked-lists
Question FrontEnd Id: 160
Title: Intersection of Two Linked Lists
Difficulty: Easy
Status: ac
Stats: {"totalAccepted": "1.3M", "totalSubmission": "2.3M", "totalAcceptedRaw": 1252356, "totalSubmissionRaw": 2300890, "acRate": "54.4%"}
Submissions: 1
ID: 679213056
Language Name: csharp
Language Verbose Name: C#
Question ID: 160
URL: 
Code: /**
 * Definition for singly-linked list.
 * public class ListNode {
 *     public int val;
 *     public ListNode next;
 *     public ListNode(int x) { val = x; }
 * }
 */
public class Solution
{
    public ListNode GetIntersectionNode(ListNode headA, ListNode headB)
    {
        HashSet<ListNode> allA = new HashSet<ListNode>();
        while(headA != null)
        {
            allA.Add(headA);

            headA = headA.next;
        }

        while(headB != null)
        {
            if (allA.Contains(headB))
            {

                return headB;
            }
            headB = headB.next;
        }

        return null;

    }
}

Sample Test Case: 8
[4,1,8,4,5]
[5,6,1,8,4,5]
2
3

- Title Slug: compare-version-numbers
Question FrontEnd Id: 165
Title: Compare Version Numbers
Difficulty: Medium
Status: ac
Stats: {"totalAccepted": "347.5K", "totalSubmission": "972.2K", "totalAcceptedRaw": 347463, "totalSubmissionRaw": 972246, "acRate": "35.7%"}
Submissions: 1
ID: 685137475
Language Name: csharp
Language Verbose Name: C#
Question ID: 165
URL: 
Code: public class Solution {
    public int CompareVersion(string version1, string version2) {
        int[] v1 = convertToIntArr(version1);
        int[] v2 = convertToIntArr(version2);
        
        for(int i=0;i<Math.Min(v1.Length,v2.Length);i++){
            if(v1[i]<v2[i]){
                return -1;
            }
            if(v1[i]>v2[i]){
                return 1;
            }
        }
        
        if(v1.Length>v2.Length){
            for(int i=v2.Length;i<v1.Length;i++){
                if(v1[i]!=0){
                    return 1;
                }
            }
        }else{
            for(int i=v1.Length;i<v2.Length;i++){
                if(v2[i]!=0){
                    return -1;
                }
            }
        }
        
        
        return 0;
        
        
        
    }
    
    private int[] convertToIntArr(string v){
        string[] temp = v.Split('.');
        int[] ret = new int[temp.Length];
        
        for(int i=0;i<ret.Length;i++){
            ret[i]= Int32.Parse(temp[i]);
        }
        return ret;
    }
}

/*
method return int[]{
split into string[]
int[same size] traverse and parse each string
}

traverse the length of the shortest???
if(v1 or v2 is greater, return it)


for(the rest of the longer v)
if(!= 0) return longer

return 0;


v1 [1,0]
v2 [1,0,0]


*/

Sample Test Case: "1.01"
"1.001"

- Title Slug: majority-element
Question FrontEnd Id: 169
Title: Majority Element
Difficulty: Easy
Status: ac
Stats: {"totalAccepted": "1.7M", "totalSubmission": "2.6M", "totalAcceptedRaw": 1684599, "totalSubmissionRaw": 2635590, "acRate": "63.9%"}
Submissions: 1
ID: 632659314
Language Name: csharp
Language Verbose Name: C#
Question ID: 169
URL: 
Code: public class Solution {
    public int MajorityElement(int[] nums) {
        Dictionary<int,int> major = new Dictionary<int,int>();
        foreach(int i in nums){
            if(major.ContainsKey(i)){
                major[i]++;
            }else{
                major.Add(i,1);
            }
        }
        return major.Aggregate((l,r)=> l.Value >r.Value? l:r).Key;
}}

Sample Test Case: [3,2,3]

- Title Slug: rotate-array
Question FrontEnd Id: 189
Title: Rotate Array
Difficulty: Medium
Status: ac
Stats: {"totalAccepted": "1.5M", "totalSubmission": "3.7M", "totalAcceptedRaw": 1466245, "totalSubmissionRaw": 3719126, "acRate": "39.4%"}
Submissions: 1
ID: 858987572
Language Name: csharp
Language Verbose Name: C#
Question ID: 189
URL: 
Code: public class Solution {
    public void Rotate(int[] nums, int k) {
        k%=nums.Length;
        reverse(nums,0, nums.Length-1);
        reverse(nums,0,k-1);
        reverse(nums,k,nums.Length-1);
        
    }
    
    private void reverse(int[]nums, int start, int end){
        while(start<end){
            int temp = nums[start];
            nums[start]=nums[end];
            nums[end]= temp;
            start++;
            end--;
        }
    }
}

Sample Test Case: [1,2,3,4,5,6,7]
3

- Title Slug: house-robber
Question FrontEnd Id: 198
Title: House Robber
Difficulty: Medium
Status: ac
Stats: {"totalAccepted": "1.6M", "totalSubmission": "3.2M", "totalAcceptedRaw": 1584467, "totalSubmissionRaw": 3204721, "acRate": "49.4%"}
Submissions: 1
ID: 634538563
Language Name: csharp
Language Verbose Name: C#
Question ID: 198
URL: 
Code: public class Solution {
     Dictionary<int,int> maxes = new Dictionary<int,int>();
    public int Rob(int[] nums) {
       if(nums.Length==1){
            return nums[0];
        }
        if(nums.Length==2){
            return Math.Max(nums[0],nums[1]);
        }
        
        int[] maxes = new int[nums.Length];
        maxes[0]= nums[0];
        maxes[1]=Math.Max(nums[0],nums[1]);
       
        for(int i=2;i<maxes.Length;i++){
            maxes[i]= Math.Max(nums[i]+maxes[i-2],maxes[i-1]);
        }
        
        return maxes[maxes.Length-1];
    }

        
        
}

Sample Test Case: [1,2,3,1]

- Title Slug: number-of-islands
Question FrontEnd Id: 200
Title: Number of Islands
Difficulty: Medium
Status: ac
Stats: {"totalAccepted": "2.1M", "totalSubmission": "3.7M", "totalAcceptedRaw": 2123978, "totalSubmissionRaw": 3722004, "acRate": "57.1%"}
Submissions: 1
ID: 655354069
Language Name: csharp
Language Verbose Name: C#
Question ID: 200
URL: 
Code: public class Solution {
    public int NumIslands(char[][] grid) {
        int counter=0;
        for(int y=0;y<grid.Length;y++){
            for(int x=0;x<grid[0].Length;x++){
                if(grid[y][x]=='1'){
                    counter++;
                    traverseIsland(grid,y,x);
                }
            }
        }
        return counter;
    }
    
    
    private void traverseIsland(char[][] grid, int y, int x){

        
        if(y<0||x<0|| y>=grid.Length|| x>= grid[0].Length || grid[y][x] =='0')
            return;
        
        grid[y][x]='0';
        traverseIsland(grid,y+1,x);
         traverseIsland(grid,y-1,x);
         traverseIsland(grid,y,x+1);
         traverseIsland(grid,y,x-1);
    }
}

Sample Test Case: [["1","1","1","1","0"],["1","1","0","1","0"],["1","1","0","0","0"],["0","0","0","0","0"]]

- Title Slug: remove-linked-list-elements
Question FrontEnd Id: 203
Title: Remove Linked List Elements
Difficulty: Easy
Status: ac
Stats: {"totalAccepted": "916.6K", "totalSubmission": "2M", "totalAcceptedRaw": 916553, "totalSubmissionRaw": 1989165, "acRate": "46.1%"}
Submissions: 1
ID: 596551619
Language Name: csharp
Language Verbose Name: C#
Question ID: 203
URL: 
Code: /**
 * Definition for singly-linked list.
 * public class ListNode {
 *     public int val;
 *     public ListNode next;
 *     public ListNode(int val=0, ListNode next=null) {
 *         this.val = val;
 *         this.next = next;
 *     }
 * }
 */
public class Solution {
    public ListNode RemoveElements(ListNode head, int val){
          if(head==null){
            return head;
        }
        while(head.val==val&& head.next !=null){
            head=head.next;
        }
        if(head.val ==val){
            return null;
        }
        
        ListNode pointer = head;
        ListNode prev= head;
        
        
        while(pointer!=null){
           if(pointer.val==val){
               prev.next=pointer.next;
               pointer=pointer.next;
               continue;
           }
            prev=pointer;
            pointer=pointer.next;
            
            
        }    
        return head;
    
}}

Sample Test Case: [1,2,6,3,4,5,6]
6

- Title Slug: isomorphic-strings
Question FrontEnd Id: 205
Title: Isomorphic Strings
Difficulty: Easy
Status: ac
Stats: {"totalAccepted": "869.1K", "totalSubmission": "2M", "totalAcceptedRaw": 869147, "totalSubmissionRaw": 2023821, "acRate": "42.9%"}
Submissions: 1
ID: 660120398
Language Name: csharp
Language Verbose Name: C#
Question ID: 205
URL: 
Code: public class Solution {
    public bool IsIsomorphic(string s, string t) {
        Dictionary<char,char> iso = new Dictionary<char,char>();
        for(int i=0;i<s.Length;i++){
            if(iso.ContainsKey(s[i])){
                if(iso[s[i]]!= t[i]){
                    return false;
                }
            }else{
            if(iso.ContainsValue(t[i])){
              //  Console.WriteLine("test");
                return false;
            }
            iso.Add(s[i],t[i]);
            }
            
        }
        
        return true;
    }
}

Sample Test Case: "egg"
"add"

- Title Slug: implement-trie-prefix-tree
Question FrontEnd Id: 208
Title: Implement Trie (Prefix Tree)
Difficulty: Medium
Status: ac
Stats: {"totalAccepted": "806.4K", "totalSubmission": "1.3M", "totalAcceptedRaw": 806386, "totalSubmissionRaw": 1283405, "acRate": "62.8%"}
Submissions: 1
ID: 863085985
Language Name: csharp
Language Verbose Name: C#
Question ID: 208
URL: 
Code: public class Trie {
    TrieNode root;
    public Trie() {
        root= new TrieNode();
    }
    
    public void Insert(string word)
    {
        TrieNode current = root;

        foreach (char c in word)
        {
            if (!current.Children.ContainsKey(c))
            {
                current.Children[c] = new TrieNode();
            }
            current = current.Children[c];
        }

        current.IsWord = true;
    }
    
    public bool Search(string word) {
        TrieNode node = root;
        for(int i=0;i<word.Length;i++){
            if(!node.Children.ContainsKey(word[i]))
            return false;

            node= node.Children[word[i]];
        }
        return node.IsWord;
    }
    
    public bool StartsWith(string prefix) {
         TrieNode node = root;
         for(int i=0;i<prefix.Length;i++){
                if(!node.Children.ContainsKey(prefix[i]))
            return false;
            node=node.Children[prefix[i]];
        }
        return true;
         
    }
}

public class TrieNode
{
    public bool IsWord;
    public Dictionary<char, TrieNode> Children;

    public TrieNode()
    {
        IsWord = false;
        Children = new Dictionary<char, TrieNode>();
    }
}

/**
 * Your Trie object will be instantiated and called as such:
 * Trie obj = new Trie();
 * obj.Insert(word);
 * bool param_2 = obj.Search(word);
 * bool param_3 = obj.StartsWith(prefix);
 */

Sample Test Case: ["Trie","insert","search","search","startsWith","insert","search"]
[[],["apple"],["apple"],["app"],["app"],["app"],["app"]]

- Title Slug: contains-duplicate
Question FrontEnd Id: 217
Title: Contains Duplicate
Difficulty: Easy
Status: ac
Stats: {"totalAccepted": "2.7M", "totalSubmission": "4.3M", "totalAcceptedRaw": 2651066, "totalSubmissionRaw": 4316286, "acRate": "61.4%"}
Submissions: 1
ID: 868931172
Language Name: csharp
Language Verbose Name: C#
Question ID: 217
URL: 
Code: public class Solution {
    public bool ContainsDuplicate(int[] nums) {
        HashSet<int> dups = new HashSet<int>();
        for(int i=0;i<nums.Length;i++){
            dups.Add(nums[i]);
        }
        if(dups.Count==nums.Length)
            return false;
        
        return true;
    }
}

Sample Test Case: [1,2,3,1]

- Title Slug: count-complete-tree-nodes
Question FrontEnd Id: 222
Title: Count Complete Tree Nodes
Difficulty: Medium
Status: ac
Stats: {"totalAccepted": "540.9K", "totalSubmission": "892.2K", "totalAcceptedRaw": 540874, "totalSubmissionRaw": 892186, "acRate": "60.6%"}
Submissions: 1
ID: 654092624
Language Name: csharp
Language Verbose Name: C#
Question ID: 222
URL: 
Code: /**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     public int val;
 *     public TreeNode left;
 *     public TreeNode right;
 *     public TreeNode(int val=0, TreeNode left=null, TreeNode right=null) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
public class Solution {
    int counter;
    public int CountNodes(TreeNode root) {
        if(root == null){
            return 0;
        }
        
         counter= 0;
        traverse(root);
        
        return counter;
    }
    
    private void traverse(TreeNode node){
        if(node==null){
            return;
        }
        counter++;
       traverse(node.left);
        traverse(node.right);
    }
}

Sample Test Case: [1,2,3,4,5,6]

- Title Slug: invert-binary-tree
Question FrontEnd Id: 226
Title: Invert Binary Tree
Difficulty: Easy
Status: ac
Stats: {"totalAccepted": "1.5M", "totalSubmission": "2M", "totalAcceptedRaw": 1525110, "totalSubmissionRaw": 2039749, "acRate": "74.8%"}
Submissions: 1
ID: 526354581
Language Name: csharp
Language Verbose Name: C#
Question ID: 226
URL: 
Code: /**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     public int val;
 *     public TreeNode left;
 *     public TreeNode right;
 *     public TreeNode(int val=0, TreeNode left=null, TreeNode right=null) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
public class Solution {
    public TreeNode InvertTree(TreeNode root) {
        if(root==null){
            return root;
        }
        TreeNode temp = root.left;
        root.left=root.right;
        root.right=temp;
        
        InvertTree(root.left);
        InvertTree(root.right);
        return root;
        
        
    }
}

Sample Test Case: [4,2,7,1,3,6,9]

- Title Slug: kth-smallest-element-in-a-bst
Question FrontEnd Id: 230
Title: Kth Smallest Element in a BST
Difficulty: Medium
Status: ac
Stats: {"totalAccepted": "1.1M", "totalSubmission": "1.5M", "totalAcceptedRaw": 1068063, "totalSubmissionRaw": 1521561, "acRate": "70.2%"}
Submissions: 1
ID: 869426322
Language Name: csharp
Language Verbose Name: C#
Question ID: 230
URL: 
Code: /**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     public int val;
 *     public TreeNode left;
 *     public TreeNode right;
 *     public TreeNode(int val=0, TreeNode left=null, TreeNode right=null) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
public class Solution {
    public int KthSmallest(TreeNode root, int k) {
        List<TreeNode> nodes = new List<TreeNode>();
        inOrder(root, nodes);
        return nodes[k-1].val;
    }
    private void inOrder(TreeNode node, List<TreeNode> nodes){
        if(node==null)
        return;

        inOrder(node.left,nodes);
        nodes.Add(node);
        inOrder(node.right,nodes);
    }

}

Sample Test Case: [3,1,4,null,2]
1

- Title Slug: power-of-two
Question FrontEnd Id: 231
Title: Power of Two
Difficulty: Easy
Status: ac
Stats: {"totalAccepted": "875K", "totalSubmission": "1.9M", "totalAcceptedRaw": 875019, "totalSubmissionRaw": 1901335, "acRate": "46.0%"}
Submissions: 1
ID: 605100917
Language Name: csharp
Language Verbose Name: C#
Question ID: 231
URL: 
Code: public class Solution {
    public bool IsPowerOfTwo(int n) {
        if(n<=0)
            return false;
        
        String binary = Convert.ToString(n,2);
        
        if(binary.LastIndexOf("1")>0){
            return false;
        }
        return true;
    }
}

Sample Test Case: 1

- Title Slug: lowest-common-ancestor-of-a-binary-search-tree
Question FrontEnd Id: 235
Title: Lowest Common Ancestor of a Binary Search Tree
Difficulty: Medium
Status: ac
Stats: {"totalAccepted": "1.2M", "totalSubmission": "1.9M", "totalAcceptedRaw": 1157071, "totalSubmissionRaw": 1877207, "acRate": "61.6%"}
Submissions: 1
ID: 689893846
Language Name: csharp
Language Verbose Name: C#
Question ID: 235
URL: 
Code: /**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     public int val;
 *     public TreeNode left;
 *     public TreeNode right;
 *     public TreeNode(int x) { val = x; }
 * }
 */

public class Solution {
    public TreeNode LowestCommonAncestor(TreeNode root, TreeNode p, TreeNode q) {
        
        if(root.val < p.val && root.val<q.val){
            return LowestCommonAncestor(root.right, p, q);
        }else if(root.val > p.val && root.val>q.val){
            return LowestCommonAncestor(root.left, p, q);
        }
        
        return root;
    }
}

Sample Test Case: [6,2,8,0,4,7,9,null,null,3,5]
2
8

- Title Slug: product-of-array-except-self
Question FrontEnd Id: 238
Title: Product of Array Except Self
Difficulty: Medium
Status: ac
Stats: {"totalAccepted": "1.6M", "totalSubmission": "2.4M", "totalAcceptedRaw": 1588881, "totalSubmissionRaw": 2441425, "acRate": "65.1%"}
Submissions: 1
ID: 762776279
Language Name: csharp
Language Verbose Name: C#
Question ID: 238
URL: 
Code: public class Solution {
    public int[] ProductExceptSelf(int[] nums) {
        int[] answer = new int[nums.Length];
        answer[0]=1;
        for(int i=1;i<nums.Length;i++){
            answer[i]=nums[i-1]*answer[i-1];
        }
        int r=1;
        for(int i=nums.Length-1;i>=0;i--){
            answer[i]=answer[i]*r;
            r*=nums[i];
        }
        
        return answer;
    }
}

Sample Test Case: [1,2,3,4]

- Title Slug: valid-anagram
Question FrontEnd Id: 242
Title: Valid Anagram
Difficulty: Easy
Status: ac
Stats: {"totalAccepted": "2.1M", "totalSubmission": "3.3M", "totalAcceptedRaw": 2092351, "totalSubmissionRaw": 3317363, "acRate": "63.1%"}
Submissions: 1
ID: 683129873
Language Name: csharp
Language Verbose Name: C#
Question ID: 242
URL: 
Code: public class Solution {
    public bool IsAnagram(string s, string t) {
        if(s.Length != t.Length)
            return false;
        
        char[] sArr= s.ToArray();
        char[] tArr= t.ToArray();
        
        Array.Sort(sArr);
        Array.Sort(tArr);
        
        for(int i=0;i<sArr.Length;i++){
            if(sArr[i]!= tArr[i])
                return false;
        }
        
        return true;
    }
}

Sample Test Case: "anagram"
"nagaram"

- Title Slug: strobogrammatic-number
Question FrontEnd Id: 246
Title: Strobogrammatic Number
Difficulty: Easy
Status: ac
Stats: {"totalAccepted": "159.1K", "totalSubmission": "333.4K", "totalAcceptedRaw": 159076, "totalSubmissionRaw": 333366, "acRate": "47.7%"}
Submissions: 1
ID: 872490144
Language Name: csharp
Language Verbose Name: C#
Question ID: 246
URL: 
Code: public class Solution {
    public bool IsStrobogrammatic(string num) {
        Dictionary<char,char> strobo = new Dictionary<char,char>();
        strobo.Add('0','0');
        strobo.Add('1','1');
        strobo.Add('8','8');
        strobo.Add('6','9');
        strobo.Add('9','6');
        
        
        for(int i=0;i<=num.Length/2;i++){
            if(!strobo.ContainsKey(num[i]) || !strobo.ContainsKey(num[num.Length-1-i]))
                return false;
            
            if(num[i]!= strobo[num[num.Length-1-i]]||num[num.Length-1-i]!= strobo[num[i]])
                return false;
                
        }
        return true;
    }
}

Sample Test Case: "69"

- Title Slug: first-bad-version
Question FrontEnd Id: 278
Title: First Bad Version
Difficulty: Easy
Status: ac
Stats: {"totalAccepted": "1.5M", "totalSubmission": "3.4M", "totalAcceptedRaw": 1460074, "totalSubmissionRaw": 3367793, "acRate": "43.4%"}
Submissions: 1
ID: 857770623
Language Name: csharp
Language Verbose Name: C#
Question ID: 278
URL: 
Code: /* The isBadVersion API is defined in the parent class VersionControl.
      bool IsBadVersion(int version); */

public class Solution : VersionControl {
    public int FirstBadVersion(int n) {
        return badVersionDriver(1,n);
    }
    private int badVersionDriver(int left, int right){
        if(IsBadVersion(left)){
            return left;
        }
        long mid = ((long)left+(long)right)/2;
        int middle = (int) mid;
        if(left==middle)
            return right;

        if(IsBadVersion(middle)){
            return badVersionDriver(left+1,middle);
        }
           return badVersionDriver(middle,right);
        
        
    }
}

Sample Test Case: 5
4

- Title Slug: wiggle-sort
Question FrontEnd Id: 280
Title: Wiggle Sort
Difficulty: Medium
Status: ac
Stats: {"totalAccepted": "128.9K", "totalSubmission": "192.2K", "totalAcceptedRaw": 128867, "totalSubmissionRaw": 192244, "acRate": "67.0%"}
Submissions: 1
ID: 872495488
Language Name: csharp
Language Verbose Name: C#
Question ID: 280
URL: 
Code: public class Solution {
    public void WiggleSort(int[] nums) {
        Array.Sort(nums);
        int[] copy =  new int[nums.Length];
        Array.Copy(nums,copy,nums.Length);
        
        int lowest = 0;
        int highest = copy.Length-1;
        for(int i=0;i<nums.Length;i++){
            if(i%2==0){
                nums[i]=copy[lowest];
                lowest++;
            }else{
                nums[i]=copy[highest];
                highest--;
            }
        }
    }
}

Sample Test Case: [3,5,2,1,6,4]

- Title Slug: move-zeroes
Question FrontEnd Id: 283
Title: Move Zeroes
Difficulty: Easy
Status: ac
Stats: {"totalAccepted": "2.2M", "totalSubmission": "3.6M", "totalAcceptedRaw": 2188933, "totalSubmissionRaw": 3565428, "acRate": "61.4%"}
Submissions: 1
ID: 858943071
Language Name: csharp
Language Verbose Name: C#
Question ID: 283
URL: 
Code: public class Solution {
    public void MoveZeroes(int[] nums) {
        int lastNonZero = 0;
        for(int i=0;i<nums.Length;i++){
            if(nums[i]!=0){
                nums[lastNonZero]= nums[i];
                lastNonZero++;
            }
        }
        for(int i = lastNonZero;i<nums.Length;i++){
                nums[i]=0;
            }

    }
}

Sample Test Case: [0,1,0,3,12]

- Title Slug: word-pattern
Question FrontEnd Id: 290
Title: Word Pattern
Difficulty: Easy
Status: ac
Stats: {"totalAccepted": "516.9K", "totalSubmission": "1.2M", "totalAcceptedRaw": 516924, "totalSubmissionRaw": 1240832, "acRate": "41.7%"}
Submissions: 1
ID: 868923282
Language Name: csharp
Language Verbose Name: C#
Question ID: 290
URL: 
Code: public class Solution {
    public bool WordPattern(string pattern, string s) {
        
        string[] arr = s.Split(' ');
        if(pattern.Length!=arr.Length)
        return false;
        Dictionary<char, string> patt = new();

        for(int i=0;i<pattern.Length;i++){
            if(patt.ContainsKey(pattern[i])){
                 if(patt[pattern[i]]!=arr[i])
                return false;
            }else if(patt.ContainsValue(arr[i])){
                return false;
            }
            else{
                patt.Add(pattern[i],arr[i]);
            }
        }

        return true;
    }
}

Sample Test Case: "abba"
"dog cat cat dog"

- Title Slug: reverse-string
Question FrontEnd Id: 344
Title: Reverse String
Difficulty: Easy
Status: ac
Stats: {"totalAccepted": "2.1M", "totalSubmission": "2.7M", "totalAcceptedRaw": 2060786, "totalSubmissionRaw": 2684056, "acRate": "76.8%"}
Submissions: 1
ID: 663472142
Language Name: csharp
Language Verbose Name: C#
Question ID: 344
URL: 
Code: public class Solution {
    public void ReverseString(char[] s) {
        int mid = s.Length/2;
        for(int i=0;i<s.Length/2;i++){
            char temp = s[i];
            s[i]=s[s.Length-i-1];
            s[s.Length-i-1]=temp;
        }
        
    }
}

Sample Test Case: ["h","e","l","l","o"]

- Title Slug: moving-average-from-data-stream
Question FrontEnd Id: 346
Title: Moving Average from Data Stream
Difficulty: Easy
Status: ac
Stats: {"totalAccepted": "307.4K", "totalSubmission": "398.6K", "totalAcceptedRaw": 307417, "totalSubmissionRaw": 398637, "acRate": "77.1%"}
Submissions: 1
ID: 750441053
Language Name: csharp
Language Verbose Name: C#
Question ID: 346
URL: 
Code: public class MovingAverage {
Queue<int> nums;
    int maxSize;
    public MovingAverage(int size) {
        maxSize= size;
        nums = new Queue<int>();
    }
    
    public double Next(int val) {
    
        if(nums.Count == maxSize){
            nums.Dequeue();
        }
        nums.Enqueue(val);
        
        double temp=0;
        
        foreach(int i in nums){
    
            temp+=i;
        }
        
        return (double)temp/nums.Count;

    }
}

/**
 * Your MovingAverage object will be instantiated and called as such:
 * MovingAverage obj = new MovingAverage(size);
 * double param_1 = obj.Next(val);
 */

Sample Test Case: ["MovingAverage","next","next","next","next"]
[[3],[1],[10],[3],[5]]

- Title Slug: intersection-of-two-arrays-ii
Question FrontEnd Id: 350
Title: Intersection of Two Arrays II
Difficulty: Easy
Status: ac
Stats: {"totalAccepted": "1M", "totalSubmission": "1.9M", "totalAcceptedRaw": 1046066, "totalSubmissionRaw": 1867958, "acRate": "56.0%"}
Submissions: 1
ID: 858991151
Language Name: csharp
Language Verbose Name: C#
Question ID: 350
URL: 
Code: public class Solution {
    public int[] Intersect(int[] nums1, int[] nums2) {
        Dictionary<int, int> db = new Dictionary<int, int>();
        for(int i=0;i<nums1.Length;i++){
            if(db.ContainsKey(nums1[i])){
                db[nums1[i]]++;
            }else{
                db.Add(nums1[i],1);
            }
        }
        
        List<int> ret = new List<int>();
        for(int i=0;i<nums2.Length;i++){
            if(!db.ContainsKey(nums2[i]) || db[nums2[i]]==0){
                continue;
            }
            ret.Add(nums2[i]);
            db[nums2[i]]--;
        }
        
        return ret.ToArray();
        
    }
}

Sample Test Case: [1,2,2,1]
[2,2]

- Title Slug: find-leaves-of-binary-tree
Question FrontEnd Id: 366
Title: Find Leaves of Binary Tree
Difficulty: Medium
Status: ac
Stats: {"totalAccepted": "236.1K", "totalSubmission": "294K", "totalAcceptedRaw": 236077, "totalSubmissionRaw": 293971, "acRate": "80.3%"}
Submissions: 1
ID: 663391108
Language Name: csharp
Language Verbose Name: C#
Question ID: 366
URL: 
Code: /**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     public int val;
 *     public TreeNode left;
 *     public TreeNode right;
 *     public TreeNode(int val=0, TreeNode left=null, TreeNode right=null) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
public class Solution {
    List<IList<int>> solution;
    public IList<IList<int>> FindLeaves(TreeNode root) {
        solution= new List<IList<int>>();
        getHeight(root);
        return solution;
    }
    
    private int getHeight(TreeNode root){
        if(root==null)
            return -1;
        
        int leftHeight = getHeight(root.left);
        int rightHeight= getHeight(root.right);
        
        int currHeight = Math.Max(leftHeight,rightHeight)+1;
        
        if(solution.Count == currHeight){
            solution.Add(new List<int>());
        }
                         
        solution[currHeight].Add(root.val);
                         return currHeight;
    }
}

Sample Test Case: [1,2,3,4,5]

- Title Slug: guess-number-higher-or-lower
Question FrontEnd Id: 374
Title: Guess Number Higher or Lower
Difficulty: Easy
Status: ac
Stats: {"totalAccepted": "486.7K", "totalSubmission": "938.1K", "totalAcceptedRaw": 486714, "totalSubmissionRaw": 938143, "acRate": "51.9%"}
Submissions: 1
ID: 858446666
Language Name: csharp
Language Verbose Name: C#
Question ID: 374
URL: 
Code: /** 
 * Forward declaration of guess API.
 * @param  num   your guess
 * @return 	     -1 if num is higher than the picked number
 *			      1 if num is lower than the picked number
 *               otherwise return 0
 * int guess(int num);
 */

public class Solution : GuessGame {
    public int GuessNumber(int n) {
        return guessDriver(0,n);
    }
    
    private int guessDriver(int low, int high){
        
        long mid = ((long)low+ (long)high)/2;
        int middle = (int)mid;
        
        if(guess(middle)==0){
            return middle;
        }else if(guess(middle)==-1){
          return guessDriver(low, middle-1); 
        }
        
        else{
           return guessDriver(middle+1,high);
        }
        
        
    }
}

Sample Test Case: 10
6

- Title Slug: design-phone-directory
Question FrontEnd Id: 379
Title: Design Phone Directory
Difficulty: Medium
Status: ac
Stats: {"totalAccepted": "61.5K", "totalSubmission": "120.2K", "totalAcceptedRaw": 61542, "totalSubmissionRaw": 120224, "acRate": "51.2%"}
Submissions: 1
ID: 872497955
Language Name: csharp
Language Verbose Name: C#
Question ID: 379
URL: 
Code: public class PhoneDirectory {
    bool[] usedPhones;
    public PhoneDirectory(int maxNumbers) {
        usedPhones = new bool[maxNumbers];
    }
    
    public int Get() {
        for(int i=0;i<usedPhones.Length;i++){
            if(!usedPhones[i]){
                usedPhones[i]=true;
                return i;
            }
        }
        return -1;
    }
    
    public bool Check(int number) {
        return !usedPhones[number];
    }
    
    public void Release(int number) {
        usedPhones[number]=false;
    }
}

/**
 * Your PhoneDirectory object will be instantiated and called as such:
 * PhoneDirectory obj = new PhoneDirectory(maxNumbers);
 * int param_1 = obj.Get();
 * bool param_2 = obj.Check(number);
 * obj.Release(number);
 */

Sample Test Case: ["PhoneDirectory","get","get","check","get","check","release","check"]
[[3],[],[],[2],[],[2],[2],[2]]

- Title Slug: ransom-note
Question FrontEnd Id: 383
Title: Ransom Note
Difficulty: Easy
Status: ac
Stats: {"totalAccepted": "739.7K", "totalSubmission": "1.3M", "totalAcceptedRaw": 739665, "totalSubmissionRaw": 1268420, "acRate": "58.3%"}
Submissions: 1
ID: 858942376
Language Name: csharp
Language Verbose Name: C#
Question ID: 383
URL: 
Code: public class Solution {
    public bool CanConstruct(string ransomNote, string magazine) {
        Dictionary<char,int> db = new Dictionary<char,int>();
        for(int i=0;i<magazine.Length;i++){
            if(db.ContainsKey(magazine[i])){
                db[magazine[i]]++;
            }else{
                db.Add(magazine[i],1);
            }
        }

        for(int i=0;i<ransomNote.Length;i++){
            if(!db.ContainsKey(ransomNote[i]) || db[ransomNote[i]]==0)
            return false;

         
            db[ransomNote[i]]--;

        }
        return true;
    }
}

Sample Test Case: "a"
"b"

- Title Slug: first-unique-character-in-a-string
Question FrontEnd Id: 387
Title: First Unique Character in a String
Difficulty: Easy
Status: ac
Stats: {"totalAccepted": "1.4M", "totalSubmission": "2.3M", "totalAcceptedRaw": 1382007, "totalSubmissionRaw": 2316772, "acRate": "59.7%"}
Submissions: 1
ID: 769723238
Language Name: csharp
Language Verbose Name: C#
Question ID: 387
URL: 
Code: public class Solution {
    public int FirstUniqChar(string s) {
        Dictionary<char,List<int>> count = new Dictionary<char,List<int>>();
        for(int i =0;i<s.Length;i++){
            if(count.ContainsKey(s[i])){
                count[s[i]].Add(i);
            }else{
                count.Add(s[i],new List<int>{i});
            }
        }
        
        for(int i=0;i<s.Length;i++){
            if(count[s[i]].Count==1){
                return count[s[i]][0];
            }
        }
        return -1;
        
    }
}

Sample Test Case: "leetcode"

- Title Slug: longest-absolute-file-path
Question FrontEnd Id: 388
Title: Longest Absolute File Path
Difficulty: Medium
Status: ac
Stats: {"totalAccepted": "141.7K", "totalSubmission": "303.7K", "totalAcceptedRaw": 141678, "totalSubmissionRaw": 303727, "acRate": "46.6%"}
Submissions: 1
ID: 662828163
Language Name: csharp
Language Verbose Name: C#
Question ID: 388
URL: 
Code: public class Solution {
    public int LengthLongestPath(string input) {
        
        
        string[] lines = input.Split('\n');
        Dictionary<int,int> paths = new Dictionary<int,int>();
        paths.Add(0,0);
        int max=0;
        for(int i=0;i<lines.Length;i++){
           
            string line= lines[i];
            string name = line.TrimStart('\t');
            int depth = line.Length- name.Length+1;
            int length= paths[depth-1]+name.Length;
            Console.WriteLine(length);
            if(name.Contains('.')){
                max=Math.Max(max,length);
            }else{
                length++;
                if(paths.ContainsKey(depth)){
                    paths[depth]=length;
                }else{
                    paths.Add(depth,length);
                }
            }
        }
        
        
        return max;
        
    }
    
}

/*
dir
    \n\tsubdir1
    \n\t\t file1.ext
    \n\t\t subsubdir1
    
    \n\tsubdir2
    \n\t\t subsubdir2
*/

Sample Test Case: "dir\n\tsubdir1\n\tsubdir2\n\t\tfile.ext"

- Title Slug: fizz-buzz
Question FrontEnd Id: 412
Title: Fizz Buzz
Difficulty: Easy
Status: ac
Stats: {"totalAccepted": "941.5K", "totalSubmission": "1.3M", "totalAcceptedRaw": 941457, "totalSubmissionRaw": 1344464, "acRate": "70.0%"}
Submissions: 1
ID: 856937827
Language Name: csharp
Language Verbose Name: C#
Question ID: 412
URL: 
Code: public class Solution {
    public IList<string> FizzBuzz(int n) {
        List<string> answer = new List<string>();
        for(int i=1;i<=n;i++){
            StringBuilder sb = new StringBuilder();
            if(i%3==0){
                sb.Append("Fizz");
               
            }
            if(i%5==0){
                sb.Append("Buzz");
            }
            if(sb.Length==0)
                sb.Append(i.ToString());

                answer.Add(sb.ToString());
        }
        return answer;
    }
}

Sample Test Case: 3

- Title Slug: third-maximum-number
Question FrontEnd Id: 414
Title: Third Maximum Number
Difficulty: Easy
Status: ac
Stats: {"totalAccepted": "423.9K", "totalSubmission": "1.3M", "totalAcceptedRaw": 423911, "totalSubmissionRaw": 1275314, "acRate": "33.2%"}
Submissions: 1
ID: 629133027
Language Name: csharp
Language Verbose Name: C#
Question ID: 414
URL: 
Code: public class Solution {
    public int ThirdMax(int[] nums) {
        HashSet<int> mySet = new HashSet<int>();
        Array.Sort(nums);
        
        for(int i=0;i<nums.Length;i++){
            mySet.Add(nums[i]);
        }
        int[] ret = mySet.ToArray();
        if(ret.Length<3){
            return ret[ret.Length-1];
        }
        
        return ret[ret.Length-3];
        
    }
}

Sample Test Case: [3,2,1]

- Title Slug: sort-characters-by-frequency
Question FrontEnd Id: 451
Title: Sort Characters By Frequency
Difficulty: Medium
Status: ac
Stats: {"totalAccepted": "500.6K", "totalSubmission": "714.3K", "totalAcceptedRaw": 500634, "totalSubmissionRaw": 714318, "acRate": "70.1%"}
Submissions: 1
ID: 863005935
Language Name: csharp
Language Verbose Name: C#
Question ID: 451
URL: 
Code: public class Solution {
    public string FrequencySort(string s) {
        Dictionary<char, int> freq = new Dictionary<char,int>();

        for(int i=0;i<s.Length;i++){
            if(freq.ContainsKey(s[i])){
                freq[s[i]]++;
            }else{
                freq.Add(s[i],1);
            }
        }
        PriorityQueue<char,int> q = new PriorityQueue<char,int>(Comparer<int>.Create((x, y) => y - x));

        foreach(KeyValuePair<char,int> kvp in freq){
            q.Enqueue(kvp.Key,kvp.Value);
        }

        StringBuilder sb = new StringBuilder();
        char c=' ';
        int counter=0;
        while(q.Count!=0){
            q.TryDequeue(out c, out counter);
            for(int i=0;i<counter;i++){
                sb.Append(c);
            }
        }
        return sb.ToString();
    }
}

Sample Test Case: "tree"

- Title Slug: minimum-number-of-arrows-to-burst-balloons
Question FrontEnd Id: 452
Title: Minimum Number of Arrows to Burst Balloons
Difficulty: Medium
Status: ac
Stats: {"totalAccepted": "299.2K", "totalSubmission": "541.4K", "totalAcceptedRaw": 299240, "totalSubmissionRaw": 541440, "acRate": "55.3%"}
Submissions: 1
ID: 871569204
Language Name: csharp
Language Verbose Name: C#
Question ID: 452
URL: 
Code: public class Solution {
    public int FindMinArrowShots(int[][] points) {
     Array.Sort(points,Comparer<int[]>.Create((x,y)=>{
            if (x[1] == y[1]) return 0;
            if (x[1] < y[1]) return -1;
            return 1;})); 
    int arrows=1;
    int xStart, xEnd;
    int firstEnd = points[0][1];
    foreach(int[] p in points){
        xStart= p[0];
        xEnd=p[1];

        if(firstEnd< xStart){
            arrows++;
            firstEnd=xEnd;
        }
    }
     return arrows;  
    }
}


Sample Test Case: [[10,16],[2,8],[1,6],[7,12]]

- Title Slug: license-key-formatting
Question FrontEnd Id: 482
Title: License Key Formatting
Difficulty: Easy
Status: ac
Stats: {"totalAccepted": "247.8K", "totalSubmission": "572.2K", "totalAcceptedRaw": 247820, "totalSubmissionRaw": 572208, "acRate": "43.3%"}
Submissions: 1
ID: 662818899
Language Name: csharp
Language Verbose Name: C#
Question ID: 482
URL: 
Code: public class Solution {
    public string LicenseKeyFormatting(string s, int k) {
        string str = s.Replace("-","").ToUpper();
        int rem = str.Length % k;
        int dashes = str.Length/k;
        int pointer;
        if(rem==0){
            pointer=k;
        }else{
            pointer=rem;
        }
        while(pointer<str.Length){
            str=str.Insert(pointer,"-");
            pointer+=k+1;
        }
        
        return str;
        
        
    }
}

Sample Test Case: "5F3Z-2e-9-w"
4

- Title Slug: max-consecutive-ones
Question FrontEnd Id: 485
Title: Max Consecutive Ones
Difficulty: Easy
Status: ac
Stats: {"totalAccepted": "850.7K", "totalSubmission": "1.5M", "totalAcceptedRaw": 850708, "totalSubmissionRaw": 1502688, "acRate": "56.6%"}
Submissions: 1
ID: 625520696
Language Name: csharp
Language Verbose Name: C#
Question ID: 485
URL: 
Code: public class Solution {
    public int FindMaxConsecutiveOnes(int[] nums) {
        int counter= 0;
        int temp =0;
        
        for(int i=0;i<nums.Length;i++){
            if(nums[i]==1){
                temp++;
                if(temp>counter){
                    counter=temp;
                }
            }else{
                temp=0;
            }
            
        }
        return counter;
        
    }
}

Sample Test Case: [1,1,0,1,1,1]

- Title Slug: detect-capital
Question FrontEnd Id: 520
Title: Detect Capital
Difficulty: Easy
Status: ac
Stats: {"totalAccepted": "387.5K", "totalSubmission": "680.1K", "totalAcceptedRaw": 387507, "totalSubmissionRaw": 680104, "acRate": "57.0%"}
Submissions: 1
ID: 869442173
Language Name: csharp
Language Verbose Name: C#
Question ID: 520
URL: 
Code: public class Solution {
    public bool DetectCapitalUse(string word) {
        return isCaps(word) || noCaps(word) || firstCap(word);
    }

    private bool isCaps(string word){
        for(int i=0;i<word.Length;i++){
            if((int)word[i] >96)
            return false;
        }
        Console.WriteLine("all cap true");
        return true;
    }
    private bool noCaps(string word){
        for(int i=0;i<word.Length;i++){
            if((int)word[i] <96)
            return false;
        }
        Console.WriteLine("no cap true");
        return true;
    }
    private bool firstCap(string word){
        if((int)word[0]>96){
            
        return false;
        }

        for(int i=1;i<word.Length;i++){
            
            if((int)word[i] <96)
            return false;
        }
        Console.WriteLine("first cap true");
        return true;
    }
}

Sample Test Case: "USA"

- Title Slug: single-element-in-a-sorted-array
Question FrontEnd Id: 540
Title: Single Element in a Sorted Array
Difficulty: Medium
Status: ac
Stats: {"totalAccepted": "465.5K", "totalSubmission": "787.3K", "totalAcceptedRaw": 465478, "totalSubmissionRaw": 787348, "acRate": "59.1%"}
Submissions: 1
ID: 769922271
Language Name: csharp
Language Verbose Name: C#
Question ID: 540
URL: 
Code: public class Solution {
    public int SingleNonDuplicate(int[] nums) {
        int temp=0;
        for(int i=0;i<nums.Length;i++){
            temp^=nums[i];
        }
        return temp;
    }
}

Sample Test Case: [1,1,2,3,3,4,4,8,8]

- Title Slug: reverse-string-ii
Question FrontEnd Id: 541
Title: Reverse String II
Difficulty: Easy
Status: ac
Stats: {"totalAccepted": "194.3K", "totalSubmission": "385.2K", "totalAcceptedRaw": 194307, "totalSubmissionRaw": 385187, "acRate": "50.4%"}
Submissions: 1
ID: 621283876
Language Name: csharp
Language Verbose Name: C#
Question ID: 541
URL: 
Code: public class Solution {
    public string ReverseStr(string s, int k) {
      char[] val = s.ToArray();
    
        
        
        int length = s.Length;
        if(length== 2*k){
            Array.Reverse(val,0,k);
            return new string(val);
        }
        
        int position=0;
        
        
        while(position<length-2*k){
            Array.Reverse(val, position,k);
            position= position+2*k;
            
        }
        
        if(length-position<k){
            Array.Reverse(val,position,length-position);
            
        }
        if(length-position<2*k &&length-position>=k){
            Console.WriteLine("test");
            Array.Reverse(val, position,k);
        }
        
        
        
        return new string(val);
    }
}

Sample Test Case: "abcdefg"
2

- Title Slug: student-attendance-record-i
Question FrontEnd Id: 551
Title: Student Attendance Record I
Difficulty: Easy
Status: ac
Stats: {"totalAccepted": "176.1K", "totalSubmission": "365.4K", "totalAcceptedRaw": 176101, "totalSubmissionRaw": 365422, "acRate": "48.2%"}
Submissions: 1
ID: 660279265
Language Name: csharp
Language Verbose Name: C#
Question ID: 551
URL: 
Code: public class Solution {
    public bool CheckRecord(string s) {
        int ACount =0;
        int lateConsec=0;
        for(int i=0;i<s.Length;i++){
            if(s[i]=='A'){
                ACount++;
                if(ACount>=2){
                    return false;
                }
            }
            
            if(s[i]=='L'){
                lateConsec++;
                if(lateConsec>=3){
                    return false;
                }
            }else{
                lateConsec=0;
            }
        }
        return true;
    }
}

Sample Test Case: "PPALLP"

- Title Slug: reverse-words-in-a-string-iii
Question FrontEnd Id: 557
Title: Reverse Words in a String III
Difficulty: Easy
Status: ac
Stats: {"totalAccepted": "682.5K", "totalSubmission": "833.3K", "totalAcceptedRaw": 682496, "totalSubmissionRaw": 833333, "acRate": "81.9%"}
Submissions: 1
ID: 683800356
Language Name: csharp
Language Verbose Name: C#
Question ID: 557
URL: 
Code: public class Solution {
    public string ReverseWords(string s) {
        string[] strArr = s.Split(' ');
        int pointer=0;
        while(pointer<strArr.Length){
            char[] temp = strArr[pointer].ToCharArray();
            Array.Reverse(temp);
            strArr[pointer]= new string(temp);
            pointer++;
        }
        
        StringBuilder sb = new StringBuilder();
        
        foreach(string str in strArr){
            sb.Append(str);
            sb.Append(" ");
        }
        
        string ret= sb.ToString();
        return ret.Trim();
        
        
        
    }
}




/*
"Let's take LeetCode contest"

["Let's", "take", "LeetCode", "contest"]

foreach{

"Let's" -> array of chars

reverse -> ['L','e','t','\'', 's']  .toString();
}

String Builder

foreach string {
sb.Append(string);
sb.Append(" ");
}

string ret sb.ToString();

ret.Trim

return ret
*/

Sample Test Case: "Let's take LeetCode contest"

- Title Slug: longest-line-of-consecutive-one-in-matrix
Question FrontEnd Id: 562
Title: Longest Line of Consecutive One in Matrix
Difficulty: Medium
Status: ac
Stats: {"totalAccepted": "72.1K", "totalSubmission": "143.5K", "totalAcceptedRaw": 72078, "totalSubmissionRaw": 143488, "acRate": "50.2%"}
Submissions: 1
ID: 654104399
Language Name: csharp
Language Verbose Name: C#
Question ID: 562
URL: 
Code: public class Solution {
    int longest;
    public int LongestLine(int[][] mat) {
         longest = 0;
        int counter = 0;
        for(int y=0;y<mat.Length;y++){
            for(int x=0;x<mat[0].Length;x++){
                if(mat[y][x]==1){
                    traverse(mat, counter, x,y);
                }
            }
        }
        
        return longest;
        
    }
    
    private void traverse(int[][] mat, int counter, int x, int y){
        goHorizontal(mat,counter,x,y);
        goVertical(mat,counter,x,y);
        goDiagonal(mat,counter,x,y);
        goAnti(mat,counter,x,y);
    }
    
    private void goHorizontal(int[][] mat, int counter, int x, int y){
        if(y<0 || x<0 || y>=mat.Length|| x>=mat[0].Length|| mat[y][x]==0 ){
            return;
        }
        
        counter++;
        
        if(counter>longest){
            longest = counter;
        }
        
        goHorizontal(mat,counter,x+1,y);
    }
    
        private void goVertical(int[][] mat, int counter, int x, int y){
        if(y<0 || x<0 || y>=mat.Length || x>=mat[0].Length|| mat[y][x]==0 ){
            return;
        }
        
        counter++;
        if(counter>longest){
            longest = counter;
        }
        
        goVertical(mat,counter,x,y+1);
    }
    
            private void goDiagonal(int[][] mat, int counter, int x, int y){
        if(y<0 || x<0 || y>=mat.Length || x>=mat[0].Length|| mat[y][x]==0 ){
            return;
        }
        
        counter++;
        if(counter>longest){
            longest = counter;
        }
        
        goDiagonal(mat,counter,x+1,y+1);
    }
    
             private void goAnti(int[][] mat, int counter, int x, int y){
        if(y<0 || x<0 || y>=mat.Length || x>=mat[0].Length|| mat[y][x]==0 ){
            return;
        }
        
        counter++;
        if(counter>longest){
            longest = counter;
        }
        
        goAnti(mat,counter,x+1,y-1);
    }
    
    
    
    
}

Sample Test Case: [[0,1,1,0],[0,1,1,0],[0,0,0,1]]

- Title Slug: two-sum-iv-input-is-a-bst
Question FrontEnd Id: 653
Title: Two Sum IV - Input is a BST
Difficulty: Easy
Status: ac
Stats: {"totalAccepted": "451.5K", "totalSubmission": "739.6K", "totalAcceptedRaw": 451532, "totalSubmissionRaw": 739585, "acRate": "61.1%"}
Submissions: 1
ID: 765634205
Language Name: csharp
Language Verbose Name: C#
Question ID: 653
URL: 
Code: /**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     public int val;
 *     public TreeNode left;
 *     public TreeNode right;
 *     public TreeNode(int val=0, TreeNode left=null, TreeNode right=null) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
public class Solution {
    Dictionary<int,int> pairs;
    int val;
    public bool FindTarget(TreeNode root, int k) {
        pairs= new Dictionary<int,int>();
        val = k;
        return findpairs(root);
    }
    
    private bool findpairs(TreeNode node){
    if(node==null)
        return false;
        
     if(pairs.ContainsKey(node.val))
         return true;
        
        if(!pairs.ContainsKey(val-node.val)){
            pairs.Add(val-node.val,node.val);
        }
        return findpairs(node.left)||findpairs(node.right);
        
    }
}

Sample Test Case: [5,3,6,2,4,null,7]
9

- Title Slug: longest-continuous-increasing-subsequence
Question FrontEnd Id: 674
Title: Longest Continuous Increasing Subsequence
Difficulty: Easy
Status: ac
Stats: {"totalAccepted": "224.5K", "totalSubmission": "455.3K", "totalAcceptedRaw": 224457, "totalSubmissionRaw": 455298, "acRate": "49.3%"}
Submissions: 1
ID: 687553644
Language Name: csharp
Language Verbose Name: C#
Question ID: 674
URL: 
Code: public class Solution {
    int longest;
    public int FindLengthOfLCIS(int[] nums) {
        if(nums.Length==1)
            return 1;
        
        longest=1;
        int temp=1;
        for(int i=1;i<nums.Length;i++){
            if(nums[i-1]<nums[i]){
               temp++;
                if(temp>longest){
                    longest=temp;
                }
            }else{
                
                temp=1;
            }
                
        }
        
        return longest;
    }
}

/*
traverse the array of nums;
start at the second int;

for(){
if(second num is less than previous)
temp++;

else{
check temp with longest;
temp=0
}
}

return longest;




*/

Sample Test Case: [1,3,5,4,7]

- Title Slug: valid-palindrome-ii
Question FrontEnd Id: 680
Title: Valid Palindrome II
Difficulty: Easy
Status: ac
Stats: {"totalAccepted": "588.8K", "totalSubmission": "1.5M", "totalAcceptedRaw": 588789, "totalSubmissionRaw": 1496146, "acRate": "39.4%"}
Submissions: 1
ID: 664070248
Language Name: csharp
Language Verbose Name: C#
Question ID: 680
URL: 
Code: public class Solution {
    public bool ValidPalindrome(string s) {
        int i=0;
        int j=s.Length-1;
        
        while(i<j){
            if(s[i]!= s[j]){
                return checker(s,i+1,j) || checker(s,i,j-1);
            }
            i++;
            j--;
        }
        
        return true;
    }
    
    private bool checker(string s, int i, int j){
        while(i<j){
            if(s[i]!= s[j]){
                return false;
            }
            i++;
            j--;
        }
        return true;
    }
}

Sample Test Case: "aba"

- Title Slug: max-area-of-island
Question FrontEnd Id: 695
Title: Max Area of Island
Difficulty: Medium
Status: ac
Stats: {"totalAccepted": "701.3K", "totalSubmission": "976.6K", "totalAcceptedRaw": 701317, "totalSubmissionRaw": 976578, "acRate": "71.8%"}
Submissions: 1
ID: 656178538
Language Name: csharp
Language Verbose Name: C#
Question ID: 695
URL: 
Code: public class Solution {
    int max;
    public int MaxAreaOfIsland(int[][] grid) {
         max= 0;
        int area=0;
        /*
        Console.WriteLine("-----------Testing----------------------");
        traverseIsland(grid,3,8,0);
        Console.WriteLine("-----------End Testing------------------");
        */
        for(int y=0;y<grid.Length;y++){
            for(int x=0;x<grid[0].Length;x++){
                if(grid[y][x]==1){
                    area=0;
                    traverseIsland(grid,y,x, ref area);
                }
            }
            
        }
        
        
        return max;
    }
    
    private void traverseIsland(int[][] grid, int y, int x, ref int area){
        if(x<0 ||y<0 ||x>=grid[0].Length|| y>=grid.Length|| grid[y][x]==0){
            return;
        }
        
        area++;
       // Console.WriteLine($"Area is {area} from {x},{y}");
        if(area>max){
            
            max=area;
        }
        
        grid[y][x]=0;
        traverseIsland(grid,y+1,x, ref area);
        traverseIsland(grid,y,x+1,ref area);
        traverseIsland(grid,y-1,x,ref area);
        traverseIsland(grid,y,x-1,ref area);
    }
}

Sample Test Case: [[0,0,1,0,0,0,0,1,0,0,0,0,0],[0,0,0,0,0,0,0,1,1,1,0,0,0],[0,1,1,0,1,0,0,0,0,0,0,0,0],[0,1,0,0,1,1,0,0,1,0,1,0,0],[0,1,0,0,1,1,0,0,1,1,1,0,0],[0,0,0,0,0,0,0,0,0,0,1,0,0],[0,0,0,0,0,0,0,1,1,1,0,0,0],[0,0,0,0,0,0,0,1,1,0,0,0,0]]

- Title Slug: find-pivot-index
Question FrontEnd Id: 724
Title: Find Pivot Index
Difficulty: Easy
Status: ac
Stats: {"totalAccepted": "812.5K", "totalSubmission": "1.5M", "totalAcceptedRaw": 812518, "totalSubmissionRaw": 1482051, "acRate": "54.8%"}
Submissions: 1
ID: 868930859
Language Name: csharp
Language Verbose Name: C#
Question ID: 724
URL: 
Code: public class Solution {
    public int PivotIndex(int[] nums) {

        int left =0;
        int right = 0;
        for(int i=0;i<nums.Length;i++){
            right+=nums[i];
        }
        
        
        for(int i=0;i<nums.Length;i++){
            if(left==right-left-nums[i])
            return i;

            left+=nums[i];
        }
        return -1;

    }
}

Sample Test Case: [1,7,3,6,5,6]

- Title Slug: flood-fill
Question FrontEnd Id: 733
Title: Flood Fill
Difficulty: Easy
Status: ac
Stats: {"totalAccepted": "704.7K", "totalSubmission": "1.1M", "totalAcceptedRaw": 704699, "totalSubmissionRaw": 1134986, "acRate": "62.1%"}
Submissions: 1
ID: 655353962
Language Name: csharp
Language Verbose Name: C#
Question ID: 733
URL: 
Code: public class Solution {
    public int[][] FloodFill(int[][] image, int sr, int sc, int newColor) {
        int[][] check = new int[image.Length][];
        for(int i=0;i<image.Length;i++){
            check[i]=new int[image[0].Length];
        }
        floodFill(image, check, sr,sc,newColor,image[sr][sc]);
        return image;
    }
    
    private void floodFill(int[][] image, int[][] check, int y,int x, int newColor, int original){
        if(x<0|| y<0|| x>=image[0].Length|| y>=image.Length||image[y][x]!=original || check[y][x]==1){
            return;
        }
        check[y][x]=1;
        image[y][x]=newColor;
        
        floodFill(image,check, y-1,x,newColor,original);
        floodFill(image,check, y+1,x,newColor,original);
        floodFill(image,check, y,x-1,newColor,original);
        floodFill(image,check, y,x+1,newColor,original);
        
    }
}

Sample Test Case: [[1,1,1],[1,1,0],[1,0,1]]
1
1
2

- Title Slug: min-cost-climbing-stairs
Question FrontEnd Id: 746
Title: Min Cost Climbing Stairs
Difficulty: Easy
Status: ac
Stats: {"totalAccepted": "794.1K", "totalSubmission": "1.3M", "totalAcceptedRaw": 794150, "totalSubmissionRaw": 1255188, "acRate": "63.3%"}
Submissions: 1
ID: 632452627
Language Name: csharp
Language Verbose Name: C#
Question ID: 747
URL: 
Code: public class Solution {
    public int MinCostClimbingStairs(int[] cost) {
      int[] minCost = new int[cost.Length+1];
        
        for(int i=2;i<minCost.Length;i++){
            minCost[i]=Math.Min(minCost[i-2]+cost[i-2],minCost[i-1]+cost[i-1]);
        }
        return minCost[minCost.Length-1];
        
        
    }
}

Sample Test Case: [10,15,20]

- Title Slug: insert-into-a-binary-search-tree
Question FrontEnd Id: 701
Title: Insert into a Binary Search Tree
Difficulty: Medium
Status: ac
Stats: {"totalAccepted": "405.1K", "totalSubmission": "545.4K", "totalAcceptedRaw": 405137, "totalSubmissionRaw": 545361, "acRate": "74.3%"}
Submissions: 1
ID: 679252147
Language Name: csharp
Language Verbose Name: C#
Question ID: 784
URL: 
Code: /**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     public int val;
 *     public TreeNode left;
 *     public TreeNode right;
 *     public TreeNode(int val=0, TreeNode left=null, TreeNode right=null) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
public class Solution {
    public TreeNode InsertIntoBST(TreeNode root, int val) {
    if(root==null){
        root= new TreeNode(val);
        return root;
    }
        BST(root,val);
        return root;
    }
    
    
    private void BST(TreeNode node, int val){
        if(node == null)
            return;
        
        if(node.left == null && node.val > val){
            node.left= new TreeNode(val);
            return;
        }
        
        if(node.right== null && node.val<val){
            node.right = new TreeNode(val);
            return;
        }
        
        if(node.val<val)
            BST(node.right,val);
        
        if(node.val>val)
            BST(node.left,val);

        }
}

Sample Test Case: [4,2,7,1,3]
5

- Title Slug: binary-search
Question FrontEnd Id: 704
Title: Binary Search
Difficulty: Easy
Status: ac
Stats: {"totalAccepted": "1.7M", "totalSubmission": "3.1M", "totalAcceptedRaw": 1739721, "totalSubmissionRaw": 3098378, "acRate": "56.1%"}
Submissions: 1
ID: 632093185
Language Name: csharp
Language Verbose Name: C#
Question ID: 792
URL: 
Code: public class Solution {
    public int Search(int[] nums, int target) {
        int ret= Array.BinarySearch(nums,target);
        if(ret<0) return -1;
        
        return ret;
        
        
    }
}

Sample Test Case: [-1,0,3,5,9,12]
9

- Title Slug: rotated-digits
Question FrontEnd Id: 788
Title: Rotated Digits
Difficulty: Medium
Status: ac
Stats: {"totalAccepted": "95.9K", "totalSubmission": "169.3K", "totalAcceptedRaw": 95894, "totalSubmissionRaw": 169275, "acRate": "56.6%"}
Submissions: 1
ID: 663219441
Language Name: csharp
Language Verbose Name: C#
Question ID: 804
URL: 
Code: public class Solution {
     Dictionary<char,char> rotate;
    public int RotatedDigits(int n) {
        rotate = new Dictionary<char,char>();
        rotate.Add('0','0');
        rotate.Add('1','1');
        rotate.Add('8','8');
        rotate.Add('2','5');
        rotate.Add('5','2');
        rotate.Add('6','9');
        rotate.Add('9','6');
        
        if(n==1){
            return 0;
        }
        
        
        int counter=0;
        for(int i=1;i<=n;i++){
            if(valid(i)){
                counter++;
            }
        }
        
        return counter;
    }
    
    
    private bool valid(int num){
        string strNum= num.ToString();
        int pointer=0;
        while(pointer<strNum.Length){
            
            if(!rotate.ContainsKey(strNum[pointer])){
                return false;
            }else{
                strNum= strNum.Remove(pointer,1).Insert(pointer,rotate[strNum[pointer]].ToString());
                //strNum= strNum.Insert(0,rotate[strNum[pointer]].ToString());
            }
            
            
            pointer++;
        }
    
        if(Int32.Parse(strNum) == num){
            return false;
        }
        
        
        
        return true;
    }
}

Sample Test Case: 10

- Title Slug: custom-sort-string
Question FrontEnd Id: 791
Title: Custom Sort String
Difficulty: Medium
Status: ac
Stats: {"totalAccepted": "212.8K", "totalSubmission": "308.1K", "totalAcceptedRaw": 212830, "totalSubmissionRaw": 308120, "acRate": "69.1%"}
Submissions: 1
ID: 646390973
Language Name: csharp
Language Verbose Name: C#
Question ID: 807
URL: 
Code: public class Solution {
    public string CustomSortString(string order, string s) {
        List<char> ret = new List<char>();
       
        for(int i=0;i<order.Length;i++){
       for(int j=0;j<s.Length;j++){
           if(s[j]== order[i]){
               ret.Add(s[j]);
           }
       }
        
        }
        
        for(int i=0;i<s.Length;i++){
            if(!order.Contains(s[i])){
                ret.Add(s[i]);
            }
        }
        
        
        
        
        
        
        return new string(ret.ToArray());
    }
}

Sample Test Case: "cba"
"abcd"

- Title Slug: number-of-lines-to-write-string
Question FrontEnd Id: 806
Title: Number of Lines To Write String
Difficulty: Easy
Status: ac
Stats: {"totalAccepted": "64.6K", "totalSubmission": "96.8K", "totalAcceptedRaw": 64589, "totalSubmissionRaw": 96794, "acRate": "66.7%"}
Submissions: 1
ID: 860889119
Language Name: csharp
Language Verbose Name: C#
Question ID: 824
URL: 
Code: public class Solution {
    public int[] NumberOfLines(int[] widths, string s) {
        int numLines=0;
        int pointer=0;
        int rowUse=0;
        //Console.WriteLine((int)'a'); a=97

        
        while(pointer<s.Length){
        int add= widths[(int)s[pointer]-97];
        if(rowUse+add>100){
            rowUse=add;
            numLines++;
        }else{
            rowUse+=add;
        }
            pointer++;
        }

        if(rowUse!=0)
            numLines+=1;

        int[] ret = new int[]{numLines,rowUse};
        return ret;
    }
}

Sample Test Case: [10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10]
"abcdefghijklmnopqrstuvwxyz"

- Title Slug: most-common-word
Question FrontEnd Id: 819
Title: Most Common Word
Difficulty: Easy
Status: ac
Stats: {"totalAccepted": "324K", "totalSubmission": "724.2K", "totalAcceptedRaw": 323961, "totalSubmissionRaw": 724162, "acRate": "44.7%"}
Submissions: 1
ID: 751646575
Language Name: csharp
Language Verbose Name: C#
Question ID: 837
URL: 
Code: using System.Text.RegularExpressions;
public class Solution {
    public string MostCommonWord(string paragraph, string[] banned) {
        Dictionary<string,int> wordCount = new Dictionary<string,int>();
        paragraph = Regex.Replace(paragraph.ToLower(),@"[^0-9a-zA-Z]+", " ");
        string[] words = paragraph.Split(' ');
        for(int i=0;i<words.Length;i++){
            string lowerTemp = words[i];
            Console.WriteLine(lowerTemp);
            if(wordCount.ContainsKey(lowerTemp)){
                wordCount[lowerTemp]++;
            }else{
                wordCount.Add(lowerTemp,1);
            }
        }
        
        var sortedDict= from word in wordCount orderby word.Value descending select word;
        foreach(KeyValuePair<string,int> kvp in sortedDict){
            Console.WriteLine($"\"{kvp.Key}\" shows up: {kvp.Value} times.");
            if(!Array.Exists(banned, element=> element == kvp.Key) && kvp.Key !=""){
                return kvp.Key;
            }
        }
        
        return "";
        
        
    }
}

/*
Split paragraph to get each word
add each word to dictionary as lowercase (value is word count)



var sortedDict = from entry in myDict orderby entry.Value ascending select entry;
    Array.Exists(planets, element => element == "Pluto"));
*/

Sample Test Case: "Bob hit a ball, the hit BALL flew far after it was hit."
["hit"]

- Title Slug: keys-and-rooms
Question FrontEnd Id: 841
Title: Keys and Rooms
Difficulty: Medium
Status: ac
Stats: {"totalAccepted": "315.7K", "totalSubmission": "441.2K", "totalAcceptedRaw": 315653, "totalSubmissionRaw": 441167, "acRate": "71.5%"}
Submissions: 1
ID: 862391773
Language Name: csharp
Language Verbose Name: C#
Question ID: 871
URL: 
Code: public class Solution {
    public bool CanVisitAllRooms(IList<IList<int>> rooms) {
       bool[] visited = new bool[rooms.Count];
        traverse(rooms, visited, 0);
        for(int i=0;i<visited.Length;i++){
            if(!visited[i])
            return false;
        }
        return true;
    }

    private void traverse(IList<IList<int>> rooms, bool[] visited, int room){
        if(visited[room]){
            return;
        }

        visited[room]=true;

        foreach(int r in rooms[room]){
            traverse(rooms,visited,r);
        }
    }
}

Sample Test Case: [[1],[2],[3],[]]

- Title Slug: backspace-string-compare
Question FrontEnd Id: 844
Title: Backspace String Compare
Difficulty: Easy
Status: ac
Stats: {"totalAccepted": "626.4K", "totalSubmission": "1.3M", "totalAcceptedRaw": 626396, "totalSubmissionRaw": 1303054, "acRate": "48.1%"}
Submissions: 1
ID: 654089660
Language Name: csharp
Language Verbose Name: C#
Question ID: 874
URL: 
Code: public class Solution {
    public bool BackspaceCompare(string s, string t) {
        StringBuilder stringS = new StringBuilder();
        for(int i=0;i<s.Length;i++){
            if(s[i]== '#'){
                if(stringS.Length ==0){
                    continue;
                }
                
                stringS.Remove(stringS.Length-1,1);
            }else{
            
            stringS.Append(s[i]);
            }
        }
        
        StringBuilder stringT = new StringBuilder();
        for(int i=0;i<t.Length;i++){
            if(t[i]== '#'){
                if(stringT.Length ==0){
                    continue;
                }
                
                stringT.Remove(stringT.Length-1,1);
            }else{
            stringT.Append(t[i]);
            }
        }
        
        
        if(!stringT.Equals(stringS)){
            return false;
        }
        return true;
        
        
            
            
    }
}

Sample Test Case: "ab#c"
"ad#c"

- Title Slug: buddy-strings
Question FrontEnd Id: 859
Title: Buddy Strings
Difficulty: Easy
Status: ac
Stats: {"totalAccepted": "145.6K", "totalSubmission": "498.9K", "totalAcceptedRaw": 145589, "totalSubmissionRaw": 498920, "acRate": "29.2%"}
Submissions: 1
ID: 861926240
Language Name: csharp
Language Verbose Name: C#
Question ID: 889
URL: 
Code: public class Solution {
    public bool BuddyStrings(string s, string goal) {
        if(s.Length!=goal.Length)return false;
        if(s.Equals(goal)){
            Dictionary<char,int> counter = new Dictionary<char,int>();
            for(int i=0;i<s.Length;i++){
                if(counter.ContainsKey(s[i])){
                    return true;
                }else{
                    counter.Add(s[i],1);
                }
            }
            return false;
        }else{
            int first= -1;
            int second=-1;
            for(int i=0;i<s.Length;i++){
               
                if(s[i]!=goal[i]){
                    if(first==-1){
                        first= i;  
                    }else if(second==-1){
                        second=i;
                        if(goal[i]!=s[first] || goal[first]!=s[i]){
                            return false;
                        }

                    }else{
                        return false;
                    }

                    
                }

            }
            if(first == -1 || second ==-1)
            return false;
        }
        return true;
    }
}

Sample Test Case: "ab"
"ba"

- Title Slug: middle-of-the-linked-list
Question FrontEnd Id: 876
Title: Middle of the Linked List
Difficulty: Easy
Status: ac
Stats: {"totalAccepted": "1.3M", "totalSubmission": "1.7M", "totalAcceptedRaw": 1294153, "totalSubmissionRaw": 1709171, "acRate": "75.7%"}
Submissions: 1
ID: 858936098
Language Name: csharp
Language Verbose Name: C#
Question ID: 908
URL: 
Code: /**
 * Definition for singly-linked list.
 * public class ListNode {
 *     public int val;
 *     public ListNode next;
 *     public ListNode(int val=0, ListNode next=null) {
 *         this.val = val;
 *         this.next = next;
 *     }
 * }
 */
public class Solution {
    public ListNode MiddleNode(ListNode head) {
        ListNode pointer = head;
        int size=0;
        while(pointer!=null){
            pointer= pointer.next;
            size++;
        }

        for(int i=0;i<size/2;i++){
            head=head.next;
        }
        return head;
    }
}

Sample Test Case: [1,2,3,4,5]

- Title Slug: fruit-into-baskets
Question FrontEnd Id: 904
Title: Fruit Into Baskets
Difficulty: Medium
Status: ac
Stats: {"totalAccepted": "330.6K", "totalSubmission": "756.5K", "totalAcceptedRaw": 330585, "totalSubmissionRaw": 756455, "acRate": "43.7%"}
Submissions: 1
ID: 662728310
Language Name: csharp
Language Verbose Name: C#
Question ID: 940
URL: 
Code: public class Solution {
    public int TotalFruit(int[] fruits) {
    if(fruits.Length<=2){
        return fruits.Length;
    }
    int fruit1= fruits[0];
    int fruit2=-1;
    int max = 1;
    int count = 1;
        int beginning=0;
        
        for(int i=1;i<fruits.Length;i++){
            if(fruits[i]==fruit1 || fruits[i]== fruit2){
                count++;
            }else{
                max= Math.Max(max,count);
                fruit1=fruits[i-1];
                fruit2=fruits[i];
                count=i-beginning+1;
                
            }
            
            if(fruits[i]!=fruits[i-1]){
                beginning=i;
            }
        }
        return Math.Max(max,count);      
    }
}

Sample Test Case: [1,2,1]

- Title Slug: sort-array-by-parity
Question FrontEnd Id: 905
Title: Sort Array By Parity
Difficulty: Easy
Status: ac
Stats: {"totalAccepted": "596.1K", "totalSubmission": "788.7K", "totalAcceptedRaw": 596100, "totalSubmissionRaw": 788693, "acRate": "75.6%"}
Submissions: 1
ID: 858944146
Language Name: csharp
Language Verbose Name: C#
Question ID: 941
URL: 
Code: public class Solution {
    public int[] SortArrayByParity(int[] nums) {
        int temp;
        int lastEven=0;
        for(int i=0;i<nums.Length;i++){
            if(nums[i]%2==0){
                temp = nums[lastEven];
                nums[lastEven]= nums[i];
                nums[i]=temp;
                lastEven++;
            }
        }
        return nums;
    }
}

Sample Test Case: [3,1,2,4]

- Title Slug: snakes-and-ladders
Question FrontEnd Id: 909
Title: Snakes and Ladders
Difficulty: Medium
Status: ac
Stats: {"totalAccepted": "136.8K", "totalSubmission": "303.3K", "totalAcceptedRaw": 136785, "totalSubmissionRaw": 303316, "acRate": "45.1%"}
Submissions: 1
ID: 656738562
Language Name: csharp
Language Verbose Name: C#
Question ID: 945
URL: 
Code:     public class Solution
    {
        public int SnakesAndLadders(int[][] board)
        {
            int n = board.Length;

            Queue<int> bfs = new Queue<int>();
            bfs.Enqueue(1);
            if (board[0][0] != -1)
            {
                return -1;
            }
            ISet<int> visited = new HashSet<int>();
            visited.Add(1);
            int res = 0;

            while (bfs.Count > 0)
            {
                int count = bfs.Count;
                for (int i = 0; i < count; i++)
                {
                    var current = bfs.Dequeue();

                    if (current == n * n)
                    {
                        return res;
                    }

                    for (int j = 1; j <= 6; j++)
                    {
                        int next = current + j;
                        if (next > n * n)
                        {
                            break;
                        }


                        int shiftedIdx = next - 1;
                        int row = shiftedIdx / n;
                        int col = shiftedIdx % n;

                        if (row % 2 == 1)
                        {
                            col = (n - 1) - col;
                        }

                        row = (n - 1) - row;

                        if (board[row][col] != -1)
                        {
                            next = board[row][col];
                        }

                        if (visited.Add(next))
                        {
                            bfs.Enqueue(next);
                        }
                    }
                }
                res++;
            }

            return -1;
        }
    }

Sample Test Case: [[-1,-1,-1,-1,-1,-1],[-1,-1,-1,-1,-1,-1],[-1,-1,-1,-1,-1,-1],[-1,35,-1,-1,13,-1],[-1,-1,-1,-1,-1,-1],[-1,15,-1,-1,-1,-1]]

- Title Slug: reverse-only-letters
Question FrontEnd Id: 917
Title: Reverse Only Letters
Difficulty: Easy
Status: ac
Stats: {"totalAccepted": "162.8K", "totalSubmission": "261.9K", "totalAcceptedRaw": 162768, "totalSubmissionRaw": 261910, "acRate": "62.1%"}
Submissions: 1
ID: 858454235
Language Name: csharp
Language Verbose Name: C#
Question ID: 953
URL: 
Code: using System.Text.RegularExpressions;
public class Solution {
    public string ReverseOnlyLetters(string s) {
        Regex rg = new Regex("[a-zA-Z]");
        Stack<char> rev = new Stack<char>();
        StringBuilder sb = new StringBuilder();
        
        for(int i=0;i<s.Length;i++){
            Console.WriteLine(s[i]);
            if(rg.IsMatch(Char.ToString(s[i]))){
                rev.Push(s[i]);
            }
        }
        
        for(int i=0;i<s.Length;i++){
            if(rg.IsMatch(Char.ToString(s[i]))){
                sb.Append(rev.Pop());
        }else{
                sb.Append(s[i]);
            }
            
        }
        
        return sb.ToString();
        
        
        
       
    }
}

Sample Test Case: "ab-cd"

- Title Slug: sort-array-by-parity-ii
Question FrontEnd Id: 922
Title: Sort Array By Parity II
Difficulty: Easy
Status: ac
Stats: {"totalAccepted": "216.8K", "totalSubmission": "306.9K", "totalAcceptedRaw": 216809, "totalSubmissionRaw": 306871, "acRate": "70.7%"}
Submissions: 1
ID: 629758379
Language Name: csharp
Language Verbose Name: C#
Question ID: 958
URL: 
Code: public class Solution {
    public int[] SortArrayByParityII(int[] nums) {
        int[] ret = new int[nums.Length];
        
        int even=0;
        int odd=1;
        
        foreach(int num in nums){
        if(num%2==0){
            ret[even]=num;
            even+=2;
        }
            else{
                ret[odd]=num;
                odd+=2;
            }
        }
        
        return ret;
    }
}

Sample Test Case: [4,2,5,7]

- Title Slug: long-pressed-name
Question FrontEnd Id: 925
Title: Long Pressed Name
Difficulty: Easy
Status: ac
Stats: {"totalAccepted": "116.6K", "totalSubmission": "352.7K", "totalAcceptedRaw": 116617, "totalSubmissionRaw": 352672, "acRate": "33.1%"}
Submissions: 1
ID: 872948105
Language Name: csharp
Language Verbose Name: C#
Question ID: 961
URL: 
Code: public class Solution {
    public bool IsLongPressedName(string name, string typed) {
        int nPointer = 0; 
        for (int i = 0; i < typed.Length;i++){
            if (nPointer < name.Length && name[nPointer] == typed[i])
                nPointer++;
            else if (i == 0 || typed[i] != typed[i - 1])
                return false;
        }
        return nPointer == name.Length;
    }
}

Sample Test Case: "alex"
"aaleex"

- Title Slug: unique-email-addresses
Question FrontEnd Id: 929
Title: Unique Email Addresses
Difficulty: Easy
Status: ac
Stats: {"totalAccepted": "419.5K", "totalSubmission": "625.3K", "totalAcceptedRaw": 419531, "totalSubmissionRaw": 625296, "acRate": "67.1%"}
Submissions: 1
ID: 662723877
Language Name: csharp
Language Verbose Name: C#
Question ID: 965
URL: 
Code: public class Solution {
    public int NumUniqueEmails(string[] emails) {
        HashSet<string>  addresses = new HashSet<string>();
        for(int i=0;i<emails.Length;i++){
                addresses.Add(adjust(emails[i]));
        }
        
        return addresses.Count;
        
    }
    
    private string adjust(string address){
        string local = address.Substring(0,address.IndexOf('@'));
        string domain= address.Substring(address.IndexOf('@'), address.Length-address.IndexOf('@'));
        
        if(local.Contains('+')){
            local = local.Substring(0,local.IndexOf('+'));
        }
          
        local=local.Replace(".","");
    
        
        
        
        
        
        
        return local+domain;
    }
}

Sample Test Case: ["test.email+alex@leetcode.com","test.e.mail+bob.cathy@leetcode.com","testemail+david@lee.tcode.com"]

- Title Slug: valid-mountain-array
Question FrontEnd Id: 941
Title: Valid Mountain Array
Difficulty: Easy
Status: ac
Stats: {"totalAccepted": "358.7K", "totalSubmission": "1.1M", "totalAcceptedRaw": 358656, "totalSubmissionRaw": 1073878, "acRate": "33.4%"}
Submissions: 1
ID: 858929618
Language Name: csharp
Language Verbose Name: C#
Question ID: 978
URL: 
Code: public class Solution {
    public bool ValidMountainArray(int[] arr) {
     if(arr.Length<3)
         return false;
        bool peak= false;
    
     for(int i=0;i<arr.Length-1;i++){
        
      if((arr[i]==arr[i+1]) ||(arr[i]>arr[i+1] && i==0))
          return false;
         
         if(arr[i]>arr[i+1]){
         
             peak=true;
         }
         
         if(arr[i]<arr[i+1] && peak==true)
             return false;
             
     }
        
        if(!peak)
            return false;
        return true;
    }
}

Sample Test Case: [2,1]

- Title Slug: di-string-match
Question FrontEnd Id: 942
Title: DI String Match
Difficulty: Easy
Status: ac
Stats: {"totalAccepted": "130.9K", "totalSubmission": "169.2K", "totalAcceptedRaw": 130912, "totalSubmissionRaw": 169155, "acRate": "77.4%"}
Submissions: 1
ID: 858441501
Language Name: csharp
Language Verbose Name: C#
Question ID: 979
URL: 
Code: public class Solution {
    public int[] DiStringMatch(string s) {
        int[] ret = new int[s.Length+1];
        int low=0;
        int high = s.Length;
        for(int i=0;i<s.Length;i++){
            if(s[i]=='I'){
                ret[i]=low;
                low++;
            }else{
                ret[i]=high;
                high--;
            }
        }
        ret[ret.Length-1]= high;
        return ret;
    }
}

Sample Test Case: "IDID"

- Title Slug: delete-columns-to-make-sorted
Question FrontEnd Id: 944
Title: Delete Columns to Make Sorted
Difficulty: Easy
Status: ac
Stats: {"totalAccepted": "170.3K", "totalSubmission": "227.8K", "totalAcceptedRaw": 170321, "totalSubmissionRaw": 227756, "acRate": "74.8%"}
Submissions: 1
ID: 870754897
Language Name: csharp
Language Verbose Name: C#
Question ID: 981
URL: 
Code: public class Solution {
    public int MinDeletionSize(string[] strs) {
       int count=0;
        for(int x= 0;x<strs[0].Length;x++){
            for(int y=1;y<strs.Length;y++){
                if(strs[y][x]<strs[y-1][x]){
                count++;
                break;
                }
            }
        }
        return count;
    }
}

Sample Test Case: ["cba","daf","ghi"]

- Title Slug: fibonacci-number
Question FrontEnd Id: 509
Title: Fibonacci Number
Difficulty: Easy
Status: ac
Stats: {"totalAccepted": "1.3M", "totalSubmission": "1.9M", "totalAcceptedRaw": 1306365, "totalSubmissionRaw": 1870031, "acRate": "69.9%"}
Submissions: 1
ID: 863000031
Language Name: csharp
Language Verbose Name: C#
Question ID: 1013
URL: 
Code: public class Solution {
    public int Fib(int n) {
        if(n<2){
        return n;
        }
        int[] fib = new int[n+1];
        fib[0]=0;
        fib[1]=1;
        

        for(int i=2;i<fib.Length;i++){
            fib[i]=fib[i-1]+fib[i-2];
        }
        return fib[fib.Length-1];
    }
}

Sample Test Case: 2

- Title Slug: k-closest-points-to-origin
Question FrontEnd Id: 973
Title: K Closest Points to Origin
Difficulty: Medium
Status: ac
Stats: {"totalAccepted": "967.2K", "totalSubmission": "1.5M", "totalAcceptedRaw": 967220, "totalSubmissionRaw": 1470888, "acRate": "65.8%"}
Submissions: 1
ID: 733641667
Language Name: csharp
Language Verbose Name: C#
Question ID: 1014
URL: 
Code: public class Solution {
    public int[][] KClosest(int[][] points, int k) {
        PriorityQueue<int[], double> distances = new PriorityQueue<int[], double>();
        
        for(int i=0;i<points.Length;i++){
            
            double dist =Math.Sqrt(Math.Pow(-points[i][0],2)+Math.Pow(-points[i][1],2));
            distances.Enqueue(points[i],dist);
        }
        
        int[][] ret = new int[k][];
        for(int i=0;i<ret.Length;i++){
            ret[i]= distances.Dequeue();
        }
        
        return ret;
        
    }
}

Sample Test Case: [[1,3],[-2,2]]
1

- Title Slug: squares-of-a-sorted-array
Question FrontEnd Id: 977
Title: Squares of a Sorted Array
Difficulty: Easy
Status: ac
Stats: {"totalAccepted": "1.4M", "totalSubmission": "1.9M", "totalAcceptedRaw": 1390074, "totalSubmissionRaw": 1933637, "acRate": "71.9%"}
Submissions: 1
ID: 863045485
Language Name: csharp
Language Verbose Name: C#
Question ID: 1019
URL: 
Code: public class Solution {
    public int[] SortedSquares(int[] nums) {
        for(int i=0;i<nums.Length;i++){
            nums[i]*=nums[i];
        }
        Array.Sort(nums);
        return nums;
    }
}

Sample Test Case: [-4,-1,0,3,10]

- Title Slug: distribute-coins-in-binary-tree
Question FrontEnd Id: 979
Title: Distribute Coins in Binary Tree
Difficulty: Medium
Status: ac
Stats: {"totalAccepted": "101.3K", "totalSubmission": "140.2K", "totalAcceptedRaw": 101271, "totalSubmissionRaw": 140205, "acRate": "72.2%"}
Submissions: 1
ID: 678661894
Language Name: csharp
Language Verbose Name: C#
Question ID: 1021
URL: 
Code: /**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     public int val;
 *     public TreeNode left;
 *     public TreeNode right;
 *     public TreeNode(int val=0, TreeNode left=null, TreeNode right=null) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
public class Solution {
    int ans;
    public int DistributeCoins(TreeNode root) {
        ans=0;
        dfs(root);
        return ans;
    }
    
    private int dfs(TreeNode node){
        if(node==null) return 0;
        
        int L = dfs(node.left);
        int R = dfs(node.right);
        
        ans+= Math.Abs(L)+Math.Abs(R);
        return node.val+ L+R-1;
    }
}

Sample Test Case: [3,0,0]

- Title Slug: shortest-way-to-form-string
Question FrontEnd Id: 1055
Title: Shortest Way to Form String
Difficulty: Medium
Status: ac
Stats: {"totalAccepted": "79.1K", "totalSubmission": "132.3K", "totalAcceptedRaw": 79053, "totalSubmissionRaw": 132290, "acRate": "59.8%"}
Submissions: 1
ID: 872511440
Language Name: csharp
Language Verbose Name: C#
Question ID: 1051
URL: 
Code: public class Solution {
    public int ShortestWay(string source, string target) {
    int counter=0;
    int tPointer=0;
        
        while(tPointer<target.Length){
            if(!source.Contains(target[tPointer])){
                return-1;
            }
            for(int i=0;i<source.Length;i++){
                if(source[i]==target[tPointer]){
                    tPointer++;
                    if(tPointer==target.Length)
                        break;
                }
            }
            
            
            counter++;
        }
        return counter;
        
    }
}

Sample Test Case: "abc"
"abcbc"

- Title Slug: confusing-number
Question FrontEnd Id: 1056
Title: Confusing Number
Difficulty: Easy
Status: ac
Stats: {"totalAccepted": "36K", "totalSubmission": "74.6K", "totalAcceptedRaw": 36001, "totalSubmissionRaw": 74576, "acRate": "48.3%"}
Submissions: 1
ID: 872507231
Language Name: csharp
Language Verbose Name: C#
Question ID: 1069
URL: 
Code: public class Solution {
    
    Dictionary<char,char> rotator;
    public bool ConfusingNumber(int n) {
        rotator= new Dictionary<char,char>();
        rotator.Add('0','0');
        rotator.Add('1','1');
        rotator.Add('6','9');
        rotator.Add('8','8');
        rotator.Add('9','6');
    
        int rotate= Rotate(n);
        if(rotate<0)
            return false;
        if(rotate!=n){
            return true;
        }
        
        return false;
    }
    
    private int Rotate(int num){
        char[] arr = num.ToString().ToArray();
        Array.Reverse(arr);
        for(int i=0;i<arr.Length;i++){
            //Console.WriteLine(arr[i]);
            if(!rotator.ContainsKey(arr[i])){
                return -1;
            }
            
           // Console.WriteLine(arr[i]);
            arr[i]=rotator[arr[i]];
        }
        string ret = new string(arr);
       // Console.WriteLine($"Rotated result: {ret}");
        return Int32.Parse(ret);
    }
}

Sample Test Case: 6

- Title Slug: high-five
Question FrontEnd Id: 1086
Title: High Five
Difficulty: Easy
Status: ac
Stats: {"totalAccepted": "93.6K", "totalSubmission": "124.7K", "totalAcceptedRaw": 93559, "totalSubmissionRaw": 124664, "acRate": "75.0%"}
Submissions: 1
ID: 862401626
Language Name: csharp
Language Verbose Name: C#
Question ID: 1074
URL: 
Code: public class Solution {
    public int[][] HighFive(int[][] items) {
        Dictionary<int,List<int>> studentScores = new Dictionary<int,List<int>>();
        for(int i=0;i<items.Length;i++){
            if(studentScores.ContainsKey(items[i][0])){
                studentScores[items[i][0]].Add(items[i][1]);
            }else{
                studentScores.Add(items[i][0], new List<int>{items[i][1]});
            }
        }

        List<int[]> average = new List<int[]>();
        int pointer=0;
        foreach(KeyValuePair<int, List<int>> kvp in studentScores){
          
            int[] adder= new int[2];
            adder[0]=kvp.Key;
            kvp.Value.Sort((a, b) => b.CompareTo(a));
            int scores=0;

            int divisor= Math.Min(5, kvp.Value.Count);
            for(int i=0;i<divisor;i++){
                scores+=kvp.Value[i];
            }

           adder[1]=scores/divisor;
           average.Add(adder);
        }
        average.Sort((a,b)=> a[0].CompareTo(b[0]));
        return average.ToArray();
    }
}

Sample Test Case: [[1,91],[1,92],[2,93],[2,97],[1,60],[2,77],[1,65],[1,87],[1,100],[2,100],[2,76]]

- Title Slug: two-sum-less-than-k
Question FrontEnd Id: 1099
Title: Two Sum Less Than K
Difficulty: Easy
Status: ac
Stats: {"totalAccepted": "115.7K", "totalSubmission": "189.5K", "totalAcceptedRaw": 115715, "totalSubmissionRaw": 189549, "acRate": "61.0%"}
Submissions: 1
ID: 730267962
Language Name: csharp
Language Verbose Name: C#
Question ID: 1083
URL: 
Code: public class Solution {
    public int TwoSumLessThanK(int[] nums, int k) {
        int ret =-1;
        Array.Sort(nums);
        int pointer=1;
        for(int i=0;i<nums.Length-1;i++){
            for(int j=i+1;j<nums.Length;j++){
                if(nums[i]+nums[j]<k && nums[i]+nums[j]>ret){
                    ret=nums[i]+nums[j];
                  
                }
            }
            }
        return ret;
        
        
    }
}

Sample Test Case: [34,23,1,24,75,33,54,8]
60

- Title Slug: find-k-length-substrings-with-no-repeated-characters
Question FrontEnd Id: 1100
Title: Find K-Length Substrings With No Repeated Characters
Difficulty: Medium
Status: ac
Stats: {"totalAccepted": "34.6K", "totalSubmission": "46.3K", "totalAcceptedRaw": 34584, "totalSubmissionRaw": 46308, "acRate": "74.7%"}
Submissions: 1
ID: 765661049
Language Name: csharp
Language Verbose Name: C#
Question ID: 1084
URL: 
Code: public class Solution {
    public int NumKLenSubstrNoRepeats(string s, int k) {
        int total=0;
        for(int i=0;i<=s.Length-k;i++){
            HashSet<char> check = new HashSet<char>();
           // Console.WriteLine("NEW CHECK");
            for(int j=i;j<k+i;j++){
             //   Console.WriteLine(s[j]);
                check.Add(s[j]);
            }
            if(check.Count== k){
            //    Console.WriteLine("YUPPP");
                total++;
            }
        }
        return total;
    }
}

Sample Test Case: "havefunonleetcode"
5

- Title Slug: remove-vowels-from-a-string
Question FrontEnd Id: 1119
Title: Remove Vowels from a String
Difficulty: Easy
Status: ac
Stats: {"totalAccepted": "94.4K", "totalSubmission": "103.9K", "totalAcceptedRaw": 94368, "totalSubmissionRaw": 103919, "acRate": "90.8%"}
Submissions: 1
ID: 652239571
Language Name: csharp
Language Verbose Name: C#
Question ID: 1089
URL: 
Code: public class Solution {
    public string RemoveVowels(string s) {
        StringBuilder ret = new StringBuilder(s);
        
        int adjuster=0;
        for(int i=0;i<s.Length;i++){
            if(s[i]== 'a'|| s[i]== 'e'|| s[i]== 'i'|| s[i]== 'o'|| s[i]== 'u'){
                ret.Remove(i+adjuster,1);
                adjuster--;
            }
        }
        return Convert.ToString(ret);
                                                      
        
    }
}

Sample Test Case: "leetcodeisacommunityforcoders"

- Title Slug: armstrong-number
Question FrontEnd Id: 1134
Title: Armstrong Number
Difficulty: Easy
Status: ac
Stats: {"totalAccepted": "32K", "totalSubmission": "41.2K", "totalAcceptedRaw": 32027, "totalSubmissionRaw": 41203, "acRate": "77.7%"}
Submissions: 1
ID: 729674291
Language Name: csharp
Language Verbose Name: C#
Question ID: 1090
URL: 
Code: public class Solution {
    public bool IsArmstrong(int n) {
        string num = n.ToString();
        int size = num.Length;
        
        int temp=0;
        for(int i=0;i<size;i++){
            temp+= (int)Math.Pow(int.Parse(num[i].ToString()),size);
        }
        if(temp==n)
            return true;
                            
        return false;
        
        
    }
}

Sample Test Case: 153

- Title Slug: find-words-that-can-be-formed-by-characters
Question FrontEnd Id: 1160
Title: Find Words That Can Be Formed by Characters
Difficulty: Easy
Status: ac
Stats: {"totalAccepted": "143.9K", "totalSubmission": "213.4K", "totalAcceptedRaw": 143853, "totalSubmissionRaw": 213423, "acRate": "67.4%"}
Submissions: 1
ID: 765678165
Language Name: csharp
Language Verbose Name: C#
Question ID: 1112
URL: 
Code: public class Solution {
    public int CountCharacters(string[] words, string chars) {
        Dictionary<char,int> usableChars = new Dictionary<char,int>();
        for(int i=0;i<chars.Length;i++){
            
            if(usableChars.ContainsKey(chars[i])){
                usableChars[chars[i]]++;
            }else{
                usableChars.Add(chars[i],1);
            }
        }
        
        int counter=0;
        for(int i=0;i<words.Length;i++){
            var temp = usableChars.ToDictionary(entry=> entry.Key, entry=> entry.Value );
            if(check(temp,words[i])){
                counter+=words[i].Length;
            }
        }
        
        return counter;
    }
    
    
    private bool check(Dictionary<char,int> usableChars, string word){
      //  Console.WriteLine($"Testing {word}");
        for(int i=0;i<word.Length;i++){
            if(!usableChars.ContainsKey(word[i])){
          //      Console.WriteLine($"{word[i]} not found");
                return false;
            }
            if(usableChars[word[i]]==0){
         //       Console.WriteLine($"Too many of {word[i]} used");
                return false;
            }
            usableChars[word[i]]--;
        }
     //   Console.WriteLine("YUPPPPPP");
        return true;
    }
}

Sample Test Case: ["cat","bt","hat","tree"]
"atach"

- Title Slug: shortest-distance-to-target-color
Question FrontEnd Id: 1182
Title: Shortest Distance to Target Color
Difficulty: Medium
Status: ac
Stats: {"totalAccepted": "33.7K", "totalSubmission": "60.8K", "totalAcceptedRaw": 33660, "totalSubmissionRaw": 60752, "acRate": "55.4%"}
Submissions: 1
ID: 664049785
Language Name: csharp
Language Verbose Name: C#
Question ID: 1134
URL: 
Code: public class Solution {
    List<int> ret;
    public IList<int> ShortestDistanceColor(int[] colors, int[][] queries) {
        ret= new List<int>();
        
        finder(colors,queries[0][0], queries[0][1]);
        if(queries.Length>1){
        for(int i=1;i<queries.Length;i++){
            if(queries[i][0]==queries[i-1][0] && queries[i][1]==queries[i-1][1]){
                ret.Add(ret[i-1]);
                continue;            
            }
                
            finder(colors, queries[i][0], queries[i][1]);
        }
    }
        return ret;
    }
    
    private void finder(int[] colors, int start, int targetColor){
        if(Array.FindIndex(colors, color=> color==targetColor)<0){
            ret.Add(-1);
            return;
        }
        
        if(colors[start]==targetColor){
            ret.Add(0);
            return;
        }
        
        int goLeft=0;
        int goRight=0;
        int foundLeft=-1;
        int foundRight=-1;
        for(int i=start;i<colors.Length;i++){
            if(colors[i]==targetColor){
                foundRight=goRight;
                break;
            }else{
                goRight++;
            }
        }
        
        for(int i=start;i>=0;i--){
            if(colors[i]==targetColor){
                foundLeft=goLeft;
                break;
            }else{
                goLeft++;
            }
        }
        
        
        if(foundLeft !=-1 && foundRight !=-1){
            ret.Add(Math.Min(foundLeft,foundRight));
        
        }else if(foundLeft!=-1){
            ret.Add(foundLeft);
        }else{
            ret.Add(foundRight);
        }                
        
        
        
    }
}

Sample Test Case: [1,1,2,1,3,2,2,3,3]
[[1,3],[2,2],[6,1]]

- Title Slug: height-checker
Question FrontEnd Id: 1051
Title: Height Checker
Difficulty: Easy
Status: ac
Stats: {"totalAccepted": "267.8K", "totalSubmission": "354K", "totalAcceptedRaw": 267781, "totalSubmissionRaw": 354033, "acRate": "75.6%"}
Submissions: 1
ID: 872934359
Language Name: csharp
Language Verbose Name: C#
Question ID: 1137
URL: 
Code: public class Solution {
    public int HeightChecker(int[] heights) {
        int[] expected = new int[heights.Length];
        Array.Copy(heights,expected,heights.Length);
        Array.Sort(expected);
        
        int count=0;
        for(int i=0;i<heights.Length;i++){
            if(heights[i]!=expected[i])
                count++;
        }
        return count;
    }
}

Sample Test Case: [1,1,4,2,1,3]

- Title Slug: find-smallest-common-element-in-all-rows
Question FrontEnd Id: 1198
Title: Find Smallest Common Element in All Rows
Difficulty: Medium
Status: ac
Stats: {"totalAccepted": "38.5K", "totalSubmission": "50.2K", "totalAcceptedRaw": 38451, "totalSubmissionRaw": 50224, "acRate": "76.6%"}
Submissions: 1
ID: 859975227
Language Name: csharp
Language Verbose Name: C#
Question ID: 1143
URL: 
Code: public class Solution {
    public int SmallestCommonElement(int[][] mat) {
       for(int i=0;i<mat[0].Length;i++){
           if(common(mat,mat[0][i]))
           return mat[0][i];
       }
       return -1;
    }

    private bool common(int[][] mat, int checker){
        for(int y=1;y<mat.Length;y++){
            bool row = false;
            for(int x=0;x<mat[y].Length;x++){
                if(mat[y][x]==checker){
                    row=true;
                    break;
                }


            }
            if(!row)
            return false;
        }
        return true;
    }
}

Sample Test Case: [[1,2,3,4,5],[2,4,5,8,10],[3,5,7,9,11],[1,3,5,7,9]]

- Title Slug: two-sum-bsts
Question FrontEnd Id: 1214
Title: Two Sum BSTs
Difficulty: Medium
Status: ac
Stats: {"totalAccepted": "39.1K", "totalSubmission": "59.2K", "totalAcceptedRaw": 39136, "totalSubmissionRaw": 59217, "acRate": "66.1%"}
Submissions: 1
ID: 750810007
Language Name: csharp
Language Verbose Name: C#
Question ID: 1150
URL: 
Code: /**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     public int val;
 *     public TreeNode left;
 *     public TreeNode right;
 *     public TreeNode(int val=0, TreeNode left=null, TreeNode right=null) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
public class Solution {
    Dictionary<int,int> pairs;
    int t;
    public bool TwoSumBSTs(TreeNode root1, TreeNode root2, int target) {
        pairs = new Dictionary<int,int>();
        t=target;
        populatePairs(root1);
        return findPair(root2);
    }
    
    private void populatePairs(TreeNode node){
        if(node==null)
            return;
        
        if(!pairs.ContainsKey(t-node.val)){
            pairs.Add(t-node.val,node.val);
        }
        populatePairs(node.left);
        populatePairs(node.right);
    }
    private bool findPair(TreeNode node){
        if(node ==null){
            return false;
        }
        if(pairs.ContainsKey(node.val))
            return true;
        
        return findPair(node.left)|| findPair(node.right);
        
    }
}

Sample Test Case: [2,1,4]
[1,0,3]
5

- Title Slug: occurrences-after-bigram
Question FrontEnd Id: 1078
Title: Occurrences After Bigram
Difficulty: Easy
Status: ac
Stats: {"totalAccepted": "61.6K", "totalSubmission": "96.9K", "totalAcceptedRaw": 61593, "totalSubmissionRaw": 96881, "acRate": "63.6%"}
Submissions: 1
ID: 660189388
Language Name: csharp
Language Verbose Name: C#
Question ID: 1156
URL: 
Code: public class Solution {
    public string[] FindOcurrences(string text, string first, string second) {
        string[] words = text.Split(' ');
        
        List<string> ret= new List<string>();
        if(words.Length<=2){
            return ret.ToArray();
        }
        for(int i=0;i<words.Length-2;i++){
            if(words[i]==first && words[i+1]==second){
                ret.Add(words[i+2]);
            }
        }
        return ret.ToArray();
    }
}

Sample Test Case: "alice is a good girl she is a good student"
"a"
"good"

- Title Slug: duplicate-zeros
Question FrontEnd Id: 1089
Title: Duplicate Zeros
Difficulty: Easy
Status: ac
Stats: {"totalAccepted": "345.4K", "totalSubmission": "670.4K", "totalAcceptedRaw": 345405, "totalSubmissionRaw": 670397, "acRate": "51.5%"}
Submissions: 1
ID: 628696078
Language Name: csharp
Language Verbose Name: C#
Question ID: 1168
URL: 
Code: public class Solution {
    public void DuplicateZeros(int[] arr) {
        for(int i=0;i<=arr.Length-2;i++){
            
            if(arr[i]==0){
                for(int j=arr.Length-1;j>i;j--){
                    arr[j]=arr[j-1];
                }
                i++;
            }
           
        }
        
    }
}

Sample Test Case: [1,0,2,3,0,4,5,0]

- Title Slug: defanging-an-ip-address
Question FrontEnd Id: 1108
Title: Defanging an IP Address
Difficulty: Easy
Status: ac
Stats: {"totalAccepted": "511.6K", "totalSubmission": "574.4K", "totalAcceptedRaw": 511597, "totalSubmissionRaw": 574423, "acRate": "89.1%"}
Submissions: 1
ID: 863042653
Language Name: csharp
Language Verbose Name: C#
Question ID: 1205
URL: 
Code: public class Solution {
    public string DefangIPaddr(string address) {
        StringBuilder sb = new StringBuilder();
        for(int i=0;i<address.Length;i++){
            if(address[i]=='.'){
                sb.Append("[.]");
            }else{
                sb.Append(address[i]);
            }
        }
        return sb.ToString();
    }
}

Sample Test Case: "1.1.1.1"

- Title Slug: delete-nodes-and-return-forest
Question FrontEnd Id: 1110
Title: Delete Nodes And Return Forest
Difficulty: Medium
Status: ac
Stats: {"totalAccepted": "180.3K", "totalSubmission": "260.3K", "totalAcceptedRaw": 180346, "totalSubmissionRaw": 260343, "acRate": "69.3%"}
Submissions: 1
ID: 684548471
Language Name: csharp
Language Verbose Name: C#
Question ID: 1207
URL: 
Code: /**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     public int val;
 *     public TreeNode left;
 *     public TreeNode right;
 *     public TreeNode(int val=0, TreeNode left=null, TreeNode right=null) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
public class Solution {
    List<TreeNode> ret;
    public IList<TreeNode> DelNodes(TreeNode root, int[] to_delete) {
        ret= new List<TreeNode>();
        if(root==null)
            return ret;
      
        if(Array.IndexOf(to_delete,root.val)>=0){
            if(root.left!=null)
                ret.Add(root.left);
            
            if(root.right!=null)
                ret.Add(root.right);
        }
        
        
        ret.Add(root);
        dfsDelete(root, to_delete);
        return ret;
        
    }
    
    
    private void dfsDelete(TreeNode node, int[] to_delete){
        
        if(node==null)
            return;
        
        if(Array.IndexOf(to_delete,node.val)>=0){
            ret.Remove(node);
        }
           
          
        if(node.left!=null){
            dfsDelete(node.left, to_delete);
            if(Array.IndexOf(to_delete,node.left.val)>=0){
                //add node.left's children
                if(node.left.left !=null){
                    ret.Add(node.left.left);
                }
                if(node.left.right !=null){
                    ret.Add(node.left.right);
                }
                node.left= null;
            }
            
           
        }
        
        
        if(node.right!=null){
            dfsDelete(node.right, to_delete);
            if(Array.IndexOf(to_delete,node.right.val)>=0){
                //add node.right's children
                if(node.right.left !=null){
                    ret.Add(node.right.left);
                }
                if(node.right.right !=null){
                    ret.Add(node.right.right);
                }
                node.right= null;
            }
            
            
        }
        
        
        
    }
    
    
}

/*
        1
        /\
        2 {null}
        /\
       4 3

if(parent points to any of to_delete){
add to_delete's children to ret;
parent points to null;
}

call method for each child;



EDGE:
what if we delete root;


*/

Sample Test Case: [1,2,3,4,5,6,7]
[3,5]

- Title Slug: remove-covered-intervals
Question FrontEnd Id: 1288
Title: Remove Covered Intervals
Difficulty: Medium
Status: ac
Stats: {"totalAccepted": "107.3K", "totalSubmission": "188.3K", "totalAcceptedRaw": 107266, "totalSubmissionRaw": 188288, "acRate": "57.0%"}
Submissions: 1
ID: 871598002
Language Name: csharp
Language Verbose Name: C#
Question ID: 1222
URL: 
Code: public class Solution {
    public int RemoveCoveredIntervals(int[][] intervals) {
        print(intervals);
        Array.Sort(intervals,Comparer<int[]>.Create((x,y)=>{
              if (x[0] == y[0]){
                if(x[1]>y[1])
                    return-1;
                return 1;
            }
            if (x[0] < y[0]) return -1;
            return 1;})); 
        Console.WriteLine("\n\n");
        print(intervals);

        int count =0;      
        int prev=0;
        int end;  
       foreach(int[] interval in intervals){
           end = interval[1];
           if(prev<end){
               count++;
               prev=end;
           }
       }
        
        return count;
    }
     private void print(int[][] intervals){
        for(int y=0;y<intervals.Length;y++){
            for(int x=0;x<intervals[y].Length;x++){
                Console.Write($"{intervals[y][x]}, ");
            }
            Console.WriteLine();
        }
    }

    
}
/*
  int count = 0;
    int end, prev_end = 0;
    for (int[] curr : intervals) {
      end = curr[1];
      // if current interval is not covered
      // by the previous one
      if (prev_end < end) {
        ++count;
        prev_end = end;
      }
    }

*/

Sample Test Case: [[1,4],[3,6],[2,8]]

- Title Slug: number-of-equivalent-domino-pairs
Question FrontEnd Id: 1128
Title: Number of Equivalent Domino Pairs
Difficulty: Easy
Status: ac
Stats: {"totalAccepted": "57.4K", "totalSubmission": "121.8K", "totalAcceptedRaw": 57424, "totalSubmissionRaw": 121761, "acRate": "47.2%"}
Submissions: 1
ID: 750465831
Language Name: csharp
Language Verbose Name: C#
Question ID: 1227
URL: 
Code: public class Solution {
    public int NumEquivDominoPairs(int[][] dominoes) {
        Dictionary<int[],int> pairs= new Dictionary<int[],int>(new SequenceEqualityComparer<int>());
        int pairCount=0;
        foreach(int[] dom in dominoes){
            int min = Math.Min(dom[0],dom[1]);
            int max = Math.Max(dom[0],dom[1]);
            int[] keyCheck = new int[]{min,max};
            if(pairs.ContainsKey(keyCheck)){
                pairs[keyCheck]++;
            }else{
                pairs.Add(new int[]{min,max},1);
            }
            
       
    }
        foreach(KeyValuePair<int[],int> kvp in pairs){
            if(kvp.Value>1){
                if(kvp.Value>1){
                    int temp=0;
                 for(int i=1;i<kvp.Value;i++){
                     temp+=i;
                 }
                    pairCount+=temp;
            }
        }
        
    }
    return pairCount;
}
}

    public class SequenceEqualityComparer<T> : IEqualityComparer<IEnumerable<T>> {
  public bool Equals(IEnumerable<T> x, IEnumerable<T> y) {
    if (ReferenceEquals(x, y))
      return true;
    else if (null == x || null == y)
      return false;

    return Enumerable.SequenceEqual(x, y, EqualityComparer<T>.Default); 
  }

  public int GetHashCode(IEnumerable<T> obj) =>
    obj == null ? 0 : obj.FirstOrDefault()?.GetHashCode() ?? 0;
}


/*
1 1 1 1 1

1:0
2:1
3:3
4:6
5:10
6: 15

*/


Sample Test Case: [[1,2],[2,1],[3,4],[5,6]]

- Title Slug: replace-elements-with-greatest-element-on-right-side
Question FrontEnd Id: 1299
Title: Replace Elements with Greatest Element on Right Side
Difficulty: Easy
Status: ac
Stats: {"totalAccepted": "286.5K", "totalSubmission": "391.4K", "totalAcceptedRaw": 286539, "totalSubmissionRaw": 391375, "acRate": "73.2%"}
Submissions: 1
ID: 629123853
Language Name: csharp
Language Verbose Name: C#
Question ID: 1231
URL: 
Code: public class Solution {
    public int[] ReplaceElements(int[] arr) {
        for(int i=0;i<arr.Length-1;i++){
            int greatest = arr[i+1];
            for(int j=i+1;j<arr.Length;j++){
                if(arr[j]>greatest){
                    greatest= arr[j];
                }
            }
            arr[i]=greatest;
        }
        arr[arr.Length-1]=-1;
        return arr;
        
    }
}

Sample Test Case: [17,18,5,4,6,1]

- Title Slug: n-th-tribonacci-number
Question FrontEnd Id: 1137
Title: N-th Tribonacci Number
Difficulty: Easy
Status: ac
Stats: {"totalAccepted": "477.2K", "totalSubmission": "749.4K", "totalAcceptedRaw": 477171, "totalSubmissionRaw": 749427, "acRate": "63.7%"}
Submissions: 1
ID: 863053724
Language Name: csharp
Language Verbose Name: C#
Question ID: 1236
URL: 
Code: public class Solution {
    public int Tribonacci(int n) {
       if(n==0)return 0;
       if(n==1)return 1;
       if(n==2) return 1;

        int[] trib = new int[n+1];
        trib[0]=0;
        trib[1]=1;
        trib[2]=1;
        for(int i=3;i<trib.Length;i++){
            trib[i]=trib[i-1]+trib[i-2]+trib[i-3];
        }

        return trib[trib.Length-1];
    }
}

Sample Test Case: 4

- Title Slug: alphabet-board-path
Question FrontEnd Id: 1138
Title: Alphabet Board Path
Difficulty: Medium
Status: ac
Stats: {"totalAccepted": "46.7K", "totalSubmission": "89.9K", "totalAcceptedRaw": 46704, "totalSubmissionRaw": 89871, "acRate": "52.0%"}
Submissions: 1
ID: 664063757
Language Name: csharp
Language Verbose Name: C#
Question ID: 1238
URL: 
Code: public class Solution {
    Dictionary<char,int[]> d;
    public string AlphabetBoardPath(string target) {
         d = new Dictionary<char,int[]>();
        d.Add('a',new int[]{0,0});
         d.Add('b',new int[]{0,1});
         d.Add('c',new int[]{0,2});
         d.Add('d',new int[]{0,3});
         d.Add('e',new int[]{0,4});
         d.Add('f',new int[]{1,0});
         d.Add('g',new int[]{1,1});
         d.Add('h',new int[]{1,2});
         d.Add('i',new int[]{1,3});
         d.Add('j',new int[]{1,4});
         d.Add('k',new int[]{2,0});
         d.Add('l',new int[]{2,1});
         d.Add('m',new int[]{2,2});
         d.Add('n',new int[]{2,3});
         d.Add('o',new int[]{2,4});
         d.Add('p',new int[]{3,0});
         d.Add('q',new int[]{3,1});
         d.Add('r',new int[]{3,2});
         d.Add('s',new int[]{3,3});
         d.Add('t',new int[]{3,4});
         d.Add('u',new int[]{4,0});
         d.Add('v',new int[]{4,1});
         d.Add('w',new int[]{4,2});
         d.Add('x',new int[]{4,3});
         d.Add('y',new int[]{4,4});
         d.Add('z',new int[]{5,0});
        
        
        int[] position = new int[]{0,0};
        List<char> moves = new List<char>();
        
        mover(moves, 'a', target, 0);
        
        return new string(moves.ToArray());
    }
    
    private void mover(List<char> moves, char current, string target, int pointer){
        if(pointer==target.Length){
            return;
        }

        int goLR=0;
        int goUD=0;
        
        if(target[pointer]=='z'){
             goLR = d[current][1];
             goUD = 5-d[current][0];
            
            for(int i=0;i<goLR;i++){
                moves.Add('L');
            }
            for(int i=0;i<goUD;i++){
                moves.Add('D');
            }
            
            moves.Add('!');
            
            }else if(current=='z'){
             goUD = 5-d[target[pointer]][0];
             goLR = d[target[pointer]][1];
            
            for(int i=0;i<goUD;i++){
                moves.Add('U');
            }
            for(int i=0;i<goLR;i++){
                moves.Add('R');
            }
            moves.Add('!');
            
        }else{
            goLR= d[target[pointer]][1]-d[current][1];
            goUD= d[target[pointer]][0]-d[current][0];
            
            for(int i=0;i<Math.Abs(goLR);i++){
                if(goLR>0){
                    moves.Add('R');
                }
                if(goLR<0){
                    moves.Add('L');
                }
            }
             for(int i=0;i<Math.Abs(goUD);i++){
                if(goUD>0){
                    moves.Add('D');
                }
                if(goUD<0){
                    moves.Add('U');
                }
            }
            moves.Add('!');  
        }
        
        
        
        mover(moves, target[pointer], target, pointer+1);
    }
}

Sample Test Case: "leet"

- Title Slug: longest-common-subsequence
Question FrontEnd Id: 1143
Title: Longest Common Subsequence
Difficulty: Medium
Status: ac
Stats: {"totalAccepted": "680.7K", "totalSubmission": "1.2M", "totalAcceptedRaw": 680654, "totalSubmissionRaw": 1166441, "acRate": "58.4%"}
Submissions: 1
ID: 638314741
Language Name: csharp
Language Verbose Name: C#
Question ID: 1250
URL: 
Code: public class Solution {
    public int LongestCommonSubsequence(string text1, string text2) {
        if(text2.Length<text1.Length){
            string temp = text1;
            text1= text2;
            text2 = temp;
        }
        
        int[] previous = new int[text1.Length+1];
         int[] current = new int[text1.Length+1];
        
        for(int col = text2.Length-1;col>=0;col--){
            for(int row = text1.Length-1;row>=0;row--){
                if(text1[row]==text2[col]){
                    current[row]=1+previous[row+1];
                }else{
                    current[row]=Math.Max(previous[row],current[row+1]);
                }
            }
            int[] temp = previous;
            previous = current;
            current = temp;
        }
        return previous[0];
    }
}

Sample Test Case: "abcde"
"ace"

- Title Slug: rank-transform-of-an-array
Question FrontEnd Id: 1331
Title: Rank Transform of an Array
Difficulty: Easy
Status: ac
Stats: {"totalAccepted": "82.8K", "totalSubmission": "139.6K", "totalAcceptedRaw": 82770, "totalSubmissionRaw": 139596, "acRate": "59.3%"}
Submissions: 1
ID: 750783092
Language Name: csharp
Language Verbose Name: C#
Question ID: 1256
URL: 
Code: public class Solution {
    public int[] ArrayRankTransform(int[] arr) {
        int rank = 1;
        Dictionary<int,int> nums = new Dictionary<int,int>();
        int[] copy = new int[arr.Length];
            Array.Copy(arr,copy,arr.Length);
            Array.Sort(arr);
        for(int i=0;i<arr.Length;i++){
            Console.WriteLine(arr[i]);
            if(!nums.ContainsKey(arr[i])){
                nums.Add(arr[i],rank);
                rank++;
            }
            
        }
        
        for(int i=0;i<arr.Length;i++){
            copy[i]=nums[copy[i]];
        }
        return copy;
    }
}

Sample Test Case: [40,10,20,30]

- Title Slug: diet-plan-performance
Question FrontEnd Id: 1176
Title: Diet Plan Performance
Difficulty: Easy
Status: ac
Stats: {"totalAccepted": "29.1K", "totalSubmission": "55.1K", "totalAcceptedRaw": 29078, "totalSubmissionRaw": 55088, "acRate": "52.8%"}
Submissions: 1
ID: 766320057
Language Name: csharp
Language Verbose Name: C#
Question ID: 1280
URL: 
Code: public class Solution {
    public int DietPlanPerformance(int[] calories, int k, int lower, int upper) {
        int score=0;
        for(int i=0;i<=calories.Length-k;i++){
            int temp=0;
            for(int j=i;j<i+k;j++){
                temp+=calories[j];
            }
              
      if(temp<lower){
                score--;
            }
            if(temp>upper){
                score++;
            }
        }

    return score;
    }
    
   
}

Sample Test Case: [1,2,3,4,5]
1
3
3

- Title Slug: unique-number-of-occurrences
Question FrontEnd Id: 1207
Title: Unique Number of Occurrences
Difficulty: Easy
Status: ac
Stats: {"totalAccepted": "265K", "totalSubmission": "360.6K", "totalAcceptedRaw": 264982, "totalSubmissionRaw": 360568, "acRate": "73.5%"}
Submissions: 1
ID: 650905286
Language Name: csharp
Language Verbose Name: C#
Question ID: 1319
URL: 
Code: public class Solution {
    public bool UniqueOccurrences(int[] arr) {
        Dictionary<int,int> counter = new Dictionary<int,int>();
        for(int i=0;i<arr.Length;i++){
            if(counter.ContainsKey(arr[i])){
                counter[arr[i]]++;
            }else{
                counter.Add(arr[i],1);
            }
        }
        
        HashSet<int> unique = new HashSet<int>();
        foreach(KeyValuePair<int,int> kvp in counter){
                unique.Add(kvp.Value);
        }
        if(unique.Count == counter.Count)
            return true;
        
        return false;
        
    }
}

Sample Test Case: [1,2,2,1,1,3]

- Title Slug: find-positive-integer-solution-for-a-given-equation
Question FrontEnd Id: 1237
Title: Find Positive Integer Solution for a Given Equation
Difficulty: Medium
Status: ac
Stats: {"totalAccepted": "57.9K", "totalSubmission": "83.6K", "totalAcceptedRaw": 57879, "totalSubmissionRaw": 83575, "acRate": "69.3%"}
Submissions: 1
ID: 660761242
Language Name: csharp
Language Verbose Name: C#
Question ID: 1358
URL: 
Code: /*
 * // This is the custom function interface.
 * // You should not implement it, or speculate about its implementation
 * public class CustomFunction {
 *     // Returns f(x, y) for any given positive integers x and y.
 *     // Note that f(x, y) is increasing with respect to both x and y.
 *     // i.e. f(x, y) < f(x + 1, y), f(x, y) < f(x, y + 1)
 *     public int f(int x, int y);
 * };
 */

public class Solution {
    public IList<IList<int>> FindSolution(CustomFunction customfunction, int z) {
        List<IList<int>> ret = new List<IList<int>>();
        for(int x=1;x<=1000;x++){
            for(int y=1;y<=1000;y++){
                if(customfunction.f(x,y)==z){
                    ret.Add(new List<int>(){x,y});
                }
            }
        }
        return ret;
    }
}

Sample Test Case: 1
5

- Title Slug: find-the-difference-of-two-arrays
Question FrontEnd Id: 2215
Title: Find the Difference of Two Arrays
Difficulty: Easy
Status: ac
Stats: {"totalAccepted": "51.9K", "totalSubmission": "73.5K", "totalAcceptedRaw": 51920, "totalSubmissionRaw": 73478, "acRate": "70.7%"}
Submissions: 1
ID: 860035739
Language Name: csharp
Language Verbose Name: C#
Question ID: 1392
URL: 
Code: public class Solution {
    public IList<IList<int>> FindDifference(int[] nums1, int[] nums2) {
        List<IList<int>> answer = new List<IList<int>>();
        HashSet<int> h1 = new HashSet<int>();
        HashSet<int> h2 = new HashSet<int>();
        for(int i=0;i<nums1.Length;i++){
                h1.Add(nums1[i]);
        }
        for(int i=0;i<nums2.Length;i++){
                h2.Add(nums2[i]);
        }

        answer.Add(new List<int>());
        answer.Add(new List<int>());

        foreach(int i in nums2){   //try to add nums2 to h1
            if(h1.Add(i))
            answer[1].Add(i);
        }

        foreach(int i in nums1){   //try to add nums2 to h1
            if(h2.Add(i))
            answer[0].Add(i);
        }
        return answer;
    }
}

Sample Test Case: [1,2,3]
[2,4,6]

- Title Slug: print-immutable-linked-list-in-reverse
Question FrontEnd Id: 1265
Title: Print Immutable Linked List in Reverse
Difficulty: Medium
Status: ac
Stats: {"totalAccepted": "49.1K", "totalSubmission": "52.1K", "totalAcceptedRaw": 49121, "totalSubmissionRaw": 52134, "acRate": "94.2%"}
Submissions: 1
ID: 872474665
Language Name: csharp
Language Verbose Name: C#
Question ID: 1404
URL: 
Code: /**
 * // This is the ImmutableListNode's API interface.
 * // You should not implement it, or speculate about its implementation.
 * class ImmutableListNode {
 *     public void PrintValue(); // print the value of this node.
 *     public ImmutableListNode GetNext(); // return the next node.
 * }
 */

public class Solution {
    public void PrintLinkedListInReverse(ImmutableListNode head) {
        if(head.GetNext()!=null)
            PrintLinkedListInReverse(head.GetNext());
        
        head.PrintValue();
        
    }
}

Sample Test Case: [1,2,3,4]

- Title Slug: subtract-the-product-and-sum-of-digits-of-an-integer
Question FrontEnd Id: 1281
Title: Subtract the Product and Sum of Digits of an Integer
Difficulty: Easy
Status: ac
Stats: {"totalAccepted": "377.9K", "totalSubmission": "436.3K", "totalAcceptedRaw": 377910, "totalSubmissionRaw": 436290, "acRate": "86.6%"}
Submissions: 1
ID: 863010814
Language Name: csharp
Language Verbose Name: C#
Question ID: 1406
URL: 
Code: public class Solution {
    public int SubtractProductAndSum(int n) {
        int prod=1;
        int sum=0;
         int digit=0;
        while(n>0){
            digit= n%10;
            prod*=digit;
            sum+=digit;
            n/=10;
        }
        return prod-sum;
    }
}

Sample Test Case: 234

- Title Slug: find-numbers-with-even-number-of-digits
Question FrontEnd Id: 1295
Title: Find Numbers with Even Number of Digits
Difficulty: Easy
Status: ac
Stats: {"totalAccepted": "548.2K", "totalSubmission": "711.6K", "totalAcceptedRaw": 548171, "totalSubmissionRaw": 711632, "acRate": "77.0%"}
Submissions: 1
ID: 863050559
Language Name: csharp
Language Verbose Name: C#
Question ID: 1421
URL: 
Code: public class Solution {
    public int FindNumbers(int[] nums) {
        int evenNumberD=0;
        for(int i=0;i<nums.Length;i++){
            if(evenCount(nums[i]))
            evenNumberD++;
        }

        return evenNumberD;
    }

    private bool evenCount(int num){
        int count=0;
        while(num>0){
            count++;
            num/=10;
        }
        return count%2==0;
    }
}

Sample Test Case: [12,345,2,6,7896]

- Title Slug: number-of-steps-to-reduce-a-number-to-zero
Question FrontEnd Id: 1342
Title: Number of Steps to Reduce a Number to Zero
Difficulty: Easy
Status: ac
Stats: {"totalAccepted": "497.1K", "totalSubmission": "583.7K", "totalAcceptedRaw": 497086, "totalSubmissionRaw": 583727, "acRate": "85.2%"}
Submissions: 1
ID: 872473669
Language Name: csharp
Language Verbose Name: C#
Question ID: 1444
URL: 
Code: public class Solution {
    public int NumberOfSteps(int num) {
        int steps =0;
        while(num>0){
            if(num%2==0){
                num/=2;
        }else{
            num--;
        }
            steps++;
        }
        
        return steps;
    }
}

Sample Test Case: 14

- Title Slug: check-if-n-and-its-double-exist
Question FrontEnd Id: 1346
Title: Check If N and Its Double Exist
Difficulty: Easy
Status: ac
Stats: {"totalAccepted": "278.9K", "totalSubmission": "762.7K", "totalAcceptedRaw": 278879, "totalSubmissionRaw": 762680, "acRate": "36.6%"}
Submissions: 1
ID: 628727349
Language Name: csharp
Language Verbose Name: C#
Question ID: 1468
URL: 
Code: public class Solution {
    public bool CheckIfExist(int[] arr) {
        for(int i=0;i<arr.Length;i++){
              
            
            if(Array.IndexOf(arr,arr[i]*2) !=-1 && Array.IndexOf(arr,arr[i]*2)!= i){
               
                return true;
            }
        }
        return false;
    }
}

Sample Test Case: [10,2,5,3]

- Title Slug: count-negative-numbers-in-a-sorted-matrix
Question FrontEnd Id: 1351
Title: Count Negative Numbers in a Sorted Matrix
Difficulty: Easy
Status: ac
Stats: {"totalAccepted": "240.6K", "totalSubmission": "318.7K", "totalAcceptedRaw": 240621, "totalSubmissionRaw": 318684, "acRate": "75.5%"}
Submissions: 1
ID: 863047121
Language Name: csharp
Language Verbose Name: C#
Question ID: 1476
URL: 
Code: public class Solution {
    public int CountNegatives(int[][] grid) {
        int neg =0;
        for(int i=0;i<grid.Length;i++){
            for(int j=0;j<grid[i].Length;j++){
                if(grid[i][j]<0)
                neg++;
            }
        }
        return neg;
    }
}

Sample Test Case: [[4,3,2,-1],[3,2,1,-1],[1,1,-1,-2],[-1,-1,-2,-3]]

- Title Slug: design-a-stack-with-increment-operation
Question FrontEnd Id: 1381
Title: Design a Stack With Increment Operation
Difficulty: Medium
Status: ac
Stats: {"totalAccepted": "91.3K", "totalSubmission": "118.5K", "totalAcceptedRaw": 91327, "totalSubmissionRaw": 118450, "acRate": "77.1%"}
Submissions: 1
ID: 685118598
Language Name: csharp
Language Verbose Name: C#
Question ID: 1497
URL: 
Code: public class CustomStack {
    int size;
    Stack<int> customStack;
    public CustomStack(int maxSize) {
        size= maxSize;
        customStack = new Stack<int>();
    }
    
    public void Push(int x) {
        if(customStack.Count<size){
            customStack.Push(x);
        }
    }
    
    public int Pop() {
        if(customStack.Count==0)
            return -1;
        
        return customStack.Pop();
    }
    
    public void Increment(int k, int val) {
        Stack<int> tempS = new Stack<int>();
        while(customStack.Count!=0){
            tempS.Push(customStack.Pop());
        }
        
        for(int i=0;i<k;i++){
            if(tempS.Count==0){
                break;
            }
            customStack.Push(tempS.Pop()+val);
        }
        
        while(tempS.Count!=0){
            customStack.Push(tempS.Pop());
        }
    }
}

/**
 * Your CustomStack object will be instantiated and called as such:
 * CustomStack obj = new CustomStack(maxSize);
 * obj.Push(x);
 * int param_2 = obj.Pop();
 * obj.Increment(k,val);
 */

Sample Test Case: ["CustomStack","push","push","pop","push","push","push","increment","increment","pop","pop","pop","pop"]
[[3],[1],[2],[],[2],[3],[4],[5,100],[2,100],[],[],[],[]]

- Title Slug: find-lucky-integer-in-an-array
Question FrontEnd Id: 1394
Title: Find Lucky Integer in an Array
Difficulty: Easy
Status: ac
Stats: {"totalAccepted": "92.6K", "totalSubmission": "143.3K", "totalAcceptedRaw": 92573, "totalSubmissionRaw": 143275, "acRate": "64.6%"}
Submissions: 1
ID: 859517042
Language Name: csharp
Language Verbose Name: C#
Question ID: 1510
URL: 
Code: public class Solution {
    public int FindLucky(int[] arr) {
        Dictionary<int,int> luck = new Dictionary<int,int>();

        for(int i=0;i<arr.Length;i++){
            if(luck.ContainsKey(arr[i])){
                luck[arr[i]]++;
            }else{
                luck.Add(arr[i],1);
            }
        }

        int ret = -1;
        foreach(KeyValuePair<int,int> kvp in luck){
            if(kvp.Key == kvp.Value){
                if(kvp.Key> ret){
                    ret= kvp.Key;
                }
            }
        }

        return ret;
    }
}

Sample Test Case: [2,2,3,4]

- Title Slug: string-matching-in-an-array
Question FrontEnd Id: 1408
Title: String Matching in an Array
Difficulty: Easy
Status: ac
Stats: {"totalAccepted": "69.6K", "totalSubmission": "109.2K", "totalAcceptedRaw": 69614, "totalSubmissionRaw": 109163, "acRate": "63.8%"}
Submissions: 1
ID: 860520094
Language Name: csharp
Language Verbose Name: C#
Question ID: 1524
URL: 
Code: public class Solution {
    public IList<string> StringMatching(string[] words) {
       HashSet<string> subs = new HashSet<string>();

        for(int i=0;i<words.Length;i++){
            for(int j=0;j<words.Length;j++){
               if(i==j){
                   continue;
               }

                if(words[i].Contains(words[j])){
                subs.Add(words[j]);
                }
            }
        }

        return subs.ToList();
    }
}

Sample Test Case: ["mass","as","hero","superhero"]

- Title Slug: html-entity-parser
Question FrontEnd Id: 1410
Title: HTML Entity Parser
Difficulty: Medium
Status: ac
Stats: {"totalAccepted": "21.4K", "totalSubmission": "41.5K", "totalAcceptedRaw": 21393, "totalSubmissionRaw": 41451, "acRate": "51.6%"}
Submissions: 1
ID: 869454235
Language Name: csharp
Language Verbose Name: C#
Question ID: 1526
URL: 
Code: public class Solution {
     
    public string EntityParser(string text) {
     Dictionary<string,string> changer= new Dictionary<string,string>();
        changer.Add("&quot;","\"");
        changer.Add("&apos;","\'");
        changer.Add("&gt;",">");
        changer.Add("&amp;","&");
        changer.Add("&lt;","<");
        changer.Add("&frasl;","/");

        foreach(KeyValuePair<string,string> kvp in changer){
            text=text.Replace(kvp.Key,kvp.Value);
        }
        return text;
    }
}

Sample Test Case: "&amp; is an HTML entity but &ambassador; is not."

- Title Slug: kids-with-the-greatest-number-of-candies
Question FrontEnd Id: 1431
Title: Kids With the Greatest Number of Candies
Difficulty: Easy
Status: ac
Stats: {"totalAccepted": "414.5K", "totalSubmission": "473.5K", "totalAcceptedRaw": 414535, "totalSubmissionRaw": 473548, "acRate": "87.5%"}
Submissions: 1
ID: 655578907
Language Name: csharp
Language Verbose Name: C#
Question ID: 1528
URL: 
Code: public class Solution {
    public IList<bool> KidsWithCandies(int[] candies, int extraCandies) {
        int max= candies[0];
        for(int i=1;i<candies.Length;i++){
            if(candies[i]>max){
                max=candies[i];
            }
        }
        List<bool> ret = new List<bool>();
        for(int i=0;i<candies.Length;i++){
            if(candies[i]+extraCandies>=max){
                ret.Add(true);
            }else{
                ret.Add(false);
            }
        }
        
        return ret;
    }
}

Sample Test Case: [2,3,5,1,3]
3

- Title Slug: number-of-students-doing-homework-at-a-given-time
Question FrontEnd Id: 1450
Title: Number of Students Doing Homework at a Given Time
Difficulty: Easy
Status: ac
Stats: {"totalAccepted": "102K", "totalSubmission": "134.5K", "totalAcceptedRaw": 101979, "totalSubmissionRaw": 134504, "acRate": "75.8%"}
Submissions: 1
ID: 859564897
Language Name: csharp
Language Verbose Name: C#
Question ID: 1560
URL: 
Code: public class Solution {
    public int BusyStudent(int[] startTime, int[] endTime, int queryTime) {
        int working = 0;
        for(int i=0;i<startTime.Length;i++){
            if(queryTime >=startTime[i]  && queryTime <= endTime[i])
            working++;
        }

        return working;
    }
}

Sample Test Case: [1,2,3]
[3,2,7]
4

- Title Slug: check-if-a-word-occurs-as-a-prefix-of-any-word-in-a-sentence
Question FrontEnd Id: 1455
Title: Check If a Word Occurs As a Prefix of Any Word in a Sentence
Difficulty: Easy
Status: ac
Stats: {"totalAccepted": "63.8K", "totalSubmission": "99.4K", "totalAcceptedRaw": 63815, "totalSubmissionRaw": 99421, "acRate": "64.2%"}
Submissions: 1
ID: 863044605
Language Name: csharp
Language Verbose Name: C#
Question ID: 1566
URL: 
Code: public class Solution {
    public int IsPrefixOfWord(string sentence, string searchWord) {
        string[] arr = sentence.Split(' ');

        for(int i=0;i<arr.Length;i++){
            if(arr[i].StartsWith(searchWord))
            return i+1;
        }
        return -1;
    }
}

Sample Test Case: "i love eating burger"
"burg"

- Title Slug: subrectangle-queries
Question FrontEnd Id: 1476
Title: Subrectangle Queries
Difficulty: Medium
Status: ac
Stats: {"totalAccepted": "88.7K", "totalSubmission": "100.5K", "totalAcceptedRaw": 88718, "totalSubmissionRaw": 100450, "acRate": "88.3%"}
Submissions: 1
ID: 862395929
Language Name: csharp
Language Verbose Name: C#
Question ID: 1572
URL: 
Code: public class SubrectangleQueries {
    int[][] sRect;
    public SubrectangleQueries(int[][] rectangle) {
        sRect = rectangle;
    }
    
    public void UpdateSubrectangle(int row1, int col1, int row2, int col2, int newValue) {
        for(int y=row1;y<=row2;y++){
            for(int x=col1;x<=col2;x++){
                sRect[y][x]=newValue;
            }
        }
    }
    
    public int GetValue(int row, int col) {
        return sRect[row][col];
    }
}

/**
 * Your SubrectangleQueries object will be instantiated and called as such:
 * SubrectangleQueries obj = new SubrectangleQueries(rectangle);
 * obj.UpdateSubrectangle(row1,col1,row2,col2,newValue);
 * int param_2 = obj.GetValue(row,col);
 */

Sample Test Case: ["SubrectangleQueries","getValue","updateSubrectangle","getValue","getValue","updateSubrectangle","getValue","getValue"]
[[[[1,2,1],[4,3,4],[3,2,1],[1,1,1]]],[0,2],[0,0,3,2,5],[0,2],[3,1],[3,0,3,2,10],[3,1],[0,2]]

- Title Slug: maximum-product-of-two-elements-in-an-array
Question FrontEnd Id: 1464
Title: Maximum Product of Two Elements in an Array
Difficulty: Easy
Status: ac
Stats: {"totalAccepted": "186.5K", "totalSubmission": "233.1K", "totalAcceptedRaw": 186507, "totalSubmissionRaw": 233106, "acRate": "80.0%"}
Submissions: 1
ID: 859548690
Language Name: csharp
Language Verbose Name: C#
Question ID: 1574
URL: 
Code: public class Solution {
    public int MaxProduct(int[] nums) {
        PriorityQueue<int,int> q = new PriorityQueue<int,int>(Comparer<int>.Create((x, y) => y - x));
        for(int i=0;i<nums.Length;i++){
            q.Enqueue(nums[i],nums[i]);
        }
        return (q.Dequeue()-1)*(q.Dequeue()-1);
    }




}

Sample Test Case: [3,4,5,2]

- Title Slug: reorder-routes-to-make-all-paths-lead-to-the-city-zero
Question FrontEnd Id: 1466
Title: Reorder Routes to Make All Paths Lead to the City Zero
Difficulty: Medium
Status: ac
Stats: {"totalAccepted": "123.2K", "totalSubmission": "184.9K", "totalAcceptedRaw": 123234, "totalSubmissionRaw": 184855, "acRate": "66.7%"}
Submissions: 1
ID: 660770120
Language Name: csharp
Language Verbose Name: C#
Question ID: 1576
URL: 
Code: public class Solution {
    public int MinReorder(int n, int[][] connections) {
        int res=0;
        
        List<int>[] graph = new List<int>[n];
        
        HashSet<string> sets = new HashSet<string>();
        Queue<int> q = new Queue<int>();
        bool[] visited = new bool[n];
        foreach(var item in connections){
            if(graph[item[0]]==null)
                graph[item[0]]= new List<int>();
            
                
            if(graph[item[1]]==null)
                graph[item[1]]= new List<int>();
            
            
            graph[item[0]].Add(item[1]);
             graph[item[1]].Add(item[0]);
            
            sets.Add(item[0]+"-"+item[1]);
            
        }
        
        q.Enqueue(0);
        visited[0]=true;
        
        while(q.Count>0){
            int cur= q.Dequeue();
            
            foreach(var item in graph[cur]){
                if(!visited[item]){
                    if(!sets.Contains(item+"-"+cur)){
                        res++;
                    }
                    
                    q.Enqueue(item);
                    visited[item]=true;
                }
            }
                
        }
        return res;
    }
}

Sample Test Case: 6
[[0,1],[1,3],[2,3],[4,0],[4,5]]

- Title Slug: shuffle-the-array
Question FrontEnd Id: 1470
Title: Shuffle the Array
Difficulty: Easy
Status: ac
Stats: {"totalAccepted": "519.8K", "totalSubmission": "584.4K", "totalAcceptedRaw": 519773, "totalSubmissionRaw": 584354, "acRate": "88.9%"}
Submissions: 1
ID: 678739420
Language Name: csharp
Language Verbose Name: C#
Question ID: 1580
URL: 
Code: public class Solution {
    public int[] Shuffle(int[] nums, int n) {
    int[] ret = new int[nums.Length];
        
        int pointerX=0;
        int pointerY=n;
        int position=0;
        while(position<nums.Length){
            if(position %2== 1){
                ret[position]=nums[pointerY];
                pointerY++;
            }else{
                ret[position]=nums[pointerX];
                pointerX++;
                
            }
            position++;
        }
        
        return ret;
    }
}

Sample Test Case: [2,5,1,3,4,7]
3

- Title Slug: average-salary-excluding-the-minimum-and-maximum-salary
Question FrontEnd Id: 1491
Title: Average Salary Excluding the Minimum and Maximum Salary
Difficulty: Easy
Status: ac
Stats: {"totalAccepted": "205.2K", "totalSubmission": "335.8K", "totalAcceptedRaw": 205229, "totalSubmissionRaw": 335775, "acRate": "61.1%"}
Submissions: 1
ID: 859995362
Language Name: csharp
Language Verbose Name: C#
Question ID: 1584
URL: 
Code: public class Solution {
    public double Average(int[] salary) {
        int min = salary[0];
        int max = salary[0];

        double ret = 0;
        for(int i=0;i<salary.Length;i++){
            if(salary[i]<min){
                min = salary[i];
                
            }else if(salary[i]>max){
                max = salary[i];  
            }
                ret+=(double)salary[i];
                Console.WriteLine(ret);
        }
        ret=ret-(double)min-(double)max;
         
return ret/(double)(salary.Length-2);


    }
}

Sample Test Case: [4000,3000,1000,2000]

- Title Slug: running-sum-of-1d-array
Question FrontEnd Id: 1480
Title: Running Sum of 1d Array
Difficulty: Easy
Status: ac
Stats: {"totalAccepted": "1.4M", "totalSubmission": "1.6M", "totalAcceptedRaw": 1434767, "totalSubmissionRaw": 1641936, "acRate": "87.4%"}
Submissions: 1
ID: 868924253
Language Name: csharp
Language Verbose Name: C#
Question ID: 1603
URL: 
Code: public class Solution {
    public int[] RunningSum(int[] nums) {
        int[] ret = new int[nums.Length];
        int sum=0;
        for(int i=0;i<nums.Length;i++){
            sum+=nums[i];
            ret[i]=sum;
        }
        return ret;
    }

}

Sample Test Case: [1,2,3,4]

- Title Slug: find-all-the-lonely-nodes
Question FrontEnd Id: 1469
Title: Find All The Lonely Nodes
Difficulty: Easy
Status: ac
Stats: {"totalAccepted": "43.7K", "totalSubmission": "53.2K", "totalAcceptedRaw": 43723, "totalSubmissionRaw": 53166, "acRate": "82.2%"}
Submissions: 1
ID: 685118698
Language Name: csharp
Language Verbose Name: C#
Question ID: 1609
URL: 
Code: /**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     public int val;
 *     public TreeNode left;
 *     public TreeNode right;
 *     public TreeNode(int val=0, TreeNode left=null, TreeNode right=null) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
public class Solution {
    List<int> ret;
    TreeNode r;
    public IList<int> GetLonelyNodes(TreeNode root) {
        ret = new List<int>();
        if(root == null)
            return ret;
        r=root;
        dfs(root);
        return ret;
    }
    
    
    private void dfs(TreeNode node){
        if(node ==null)
            return;
        
        if(node.left != null && node.right ==null && node.left != r){
            ret.Add(node.left.val);
        }
        
        if(node.left == null && node.right != null && node.right != r){
            ret.Add(node.right.val);
        }
            dfs(node.left);
            dfs(node.right);
    }
}

Sample Test Case: [1,2,3,null,4]

- Title Slug: count-submatrices-with-all-ones
Question FrontEnd Id: 1504
Title: Count Submatrices With All Ones
Difficulty: Medium
Status: ac
Stats: {"totalAccepted": "44K", "totalSubmission": "76.5K", "totalAcceptedRaw": 43983, "totalSubmissionRaw": 76467, "acRate": "57.5%"}
Submissions: 1
ID: 663496021
Language Name: csharp
Language Verbose Name: C#
Question ID: 1628
URL: 
Code: public class Solution 
{
    public int NumSubmat(int[][] mat) 
    {
        var n = mat.Length;
        var m = mat[0].Length;
        var numRectangles = 0;
        int[,] numOnes = new int[n, m];
        
        for (int i = 0; i < n; i++)
        {
            for (int j = m - 1; j >= 0; j--)
            {
                if (mat[i][j] == 1)
                {
                    numOnes[i, j] = 1 + ((j < m - 1) ? numOnes[i, j + 1] : 0);
                }
            }
        }
        

        for (int i = 0; i < n; i++)
        {            
            for (int j = 0; j < m; j++)
            {
                if (mat[i][j] == 1)
                {
                   int minLength = Int32.MaxValue;
                
                    for (int k = i; k < n; k++)
                    {
                        minLength = Math.Min(minLength, numOnes[k, j]);
                        numRectangles += minLength;
                    }
                }
            }
        }
        
        return numRectangles;
    }
}

Sample Test Case: [[1,0,1],[1,1,0],[1,1,0]]

- Title Slug: find-root-of-n-ary-tree
Question FrontEnd Id: 1506
Title: Find Root of N-Ary Tree
Difficulty: Medium
Status: ac
Stats: {"totalAccepted": "29.4K", "totalSubmission": "37.5K", "totalAcceptedRaw": 29434, "totalSubmissionRaw": 37457, "acRate": "78.6%"}
Submissions: 1
ID: 684524245
Language Name: csharp
Language Verbose Name: C#
Question ID: 1650
URL: 
Code: /*
// Definition for a Node.
public class Node {
    public int val;
    public IList<Node> children;
    
    public Node() {
        val = 0;
        children = new List<Node>();
    }

    public Node(int _val) {
        val = _val;
        children = new List<Node>();
    }
    
    public Node(int _val, List<Node> _children) {
        val = _val;
        children = _children;
    }
}
*/

public class Solution {
    public Node FindRoot(List<Node> tree) {
        List<Node> children = new List<Node>();
        foreach(Node node in tree){
            foreach(Node child in node.children){
                children.Add(child);
            }
        }
        
        for(int i=0;i<tree.Count;i++){
            if(!children.Contains(tree[i])){
                return tree[i];
            }
        }
        
        return null;
    }
}

/*
List<Node> children;

foreach node in tree, add its children to the children list

foreach node in tree, if it isnt in children list, it is root, so return it.
*/

Sample Test Case: [1,null,3,2,4,null,5,6]

- Title Slug: maximum-number-of-coins-you-can-get
Question FrontEnd Id: 1561
Title: Maximum Number of Coins You Can Get
Difficulty: Medium
Status: ac
Stats: {"totalAccepted": "65.5K", "totalSubmission": "82.8K", "totalAcceptedRaw": 65545, "totalSubmissionRaw": 82762, "acRate": "79.2%"}
Submissions: 1
ID: 869459352
Language Name: csharp
Language Verbose Name: C#
Question ID: 1683
URL: 
Code: public class Solution {
    public int MaxCoins(int[] piles) {
        Array.Sort(piles);
        int max = 0;
        for(int i=piles.Length-2;i>=piles.Length/3;i-=2){
            max+=piles[i]; 
        }

        return max;
    }
}

Sample Test Case: [2,4,1,2,7,8]

- Title Slug: sum-of-all-odd-length-subarrays
Question FrontEnd Id: 1588
Title: Sum of All Odd Length Subarrays
Difficulty: Easy
Status: ac
Stats: {"totalAccepted": "155.7K", "totalSubmission": "186.7K", "totalAcceptedRaw": 155712, "totalSubmissionRaw": 186731, "acRate": "83.4%"}
Submissions: 1
ID: 869471594
Language Name: csharp
Language Verbose Name: C#
Question ID: 1693
URL: 
Code: public class Solution {
    public int SumOddLengthSubarrays(int[] arr) {
        int odd=1;
        int sum =0;
        while(odd<=arr.Length){
            for(int i=0;i<=arr.Length-odd;i++){
            for(int j=i;j<i+odd;j++){
                sum+=arr[j];
            }
            }


            odd+=2;
        }
        return sum;
    }
}

Sample Test Case: [1,4,2,5,3]

- Title Slug: design-parking-system
Question FrontEnd Id: 1603
Title: Design Parking System
Difficulty: Easy
Status: ac
Stats: {"totalAccepted": "175.4K", "totalSubmission": "199.5K", "totalAcceptedRaw": 175383, "totalSubmissionRaw": 199549, "acRate": "87.9%"}
Submissions: 1
ID: 733113180
Language Name: csharp
Language Verbose Name: C#
Question ID: 1708
URL: 
Code: public class ParkingSystem {

    Dictionary<int, int> spots;
    public ParkingSystem(int big, int medium, int small) {
        spots= new Dictionary<int, int>();
        spots.Add(1,big);
        spots.Add(2,medium);
        spots.Add(3,small);
    }
    
    public bool AddCar(int carType) {
        if(spots[carType]>0){
            spots[carType]--;
            return true;
        }
        return false;
    }
}

/**
 * Your ParkingSystem object will be instantiated and called as such:
 * ParkingSystem obj = new ParkingSystem(big, medium, small);
 * bool param_1 = obj.AddCar(carType);
 */

Sample Test Case: ["ParkingSystem","addCar","addCar","addCar","addCar"]
[[1,1,0],[1],[2],[3],[1]]

- Title Slug: check-if-two-string-arrays-are-equivalent
Question FrontEnd Id: 1662
Title: Check If Two String Arrays are Equivalent
Difficulty: Easy
Status: ac
Stats: {"totalAccepted": "270.7K", "totalSubmission": "324.2K", "totalAcceptedRaw": 270662, "totalSubmissionRaw": 324178, "acRate": "83.5%"}
Submissions: 1
ID: 860497299
Language Name: csharp
Language Verbose Name: C#
Question ID: 1781
URL: 
Code: public class Solution {
    public bool ArrayStringsAreEqual(string[] word1, string[] word2) {
        List<char> w1 = new List<char>();
        List<char> w2 = new List<char>();

        foreach(string s in word1){
            foreach(char c in s){
                w1.Add(c);
            }
        }
        foreach(string s in word2){
            foreach(char c in s){
                w2.Add(c);
            }
        }

        if(w1.Count!=w2.Count)
        return false;

        for(int i=0;i<w1.Count;i++){
            if(w1[i]!=w2[i])
            return false;
        }

        return true;

    }
}

Sample Test Case: ["ab", "c"]
["a", "bc"]

- Title Slug: richest-customer-wealth
Question FrontEnd Id: 1672
Title: Richest Customer Wealth
Difficulty: Easy
Status: ac
Stats: {"totalAccepted": "580.8K", "totalSubmission": "661K", "totalAcceptedRaw": 580836, "totalSubmissionRaw": 660978, "acRate": "87.9%"}
Submissions: 1
ID: 858935465
Language Name: csharp
Language Verbose Name: C#
Question ID: 1791
URL: 
Code: public class Solution {
    public int MaximumWealth(int[][] accounts) {
        int richest =0;
        for(int y=0;y<accounts.Length;y++){
            int wealth=0;
            for(int x=0;x<accounts[y].Length;x++){
                wealth+=accounts[y][x];
            }
            if(richest<wealth)
            richest=wealth;

        }
        return richest;
    }
}

Sample Test Case: [[1,2,3],[3,2,1]]

- Title Slug: correct-a-binary-tree
Question FrontEnd Id: 1660
Title: Correct a Binary Tree
Difficulty: Medium
Status: ac
Stats: {"totalAccepted": "14K", "totalSubmission": "19.3K", "totalAcceptedRaw": 13968, "totalSubmissionRaw": 19268, "acRate": "72.5%"}
Submissions: 1
ID: 682576907
Language Name: csharp
Language Verbose Name: C#
Question ID: 1796
URL: 
Code: public class Solution {
    
    HashSet<TreeNode> visited = new HashSet<TreeNode>();
    
    public TreeNode CorrectBinaryTree(TreeNode root) {
        
        if(root == null)
            return null;
        
        if(visited.Contains(root.right))
            return null;
        
        visited.Add(root);
        root.right = CorrectBinaryTree(root.right);
        root.left= CorrectBinaryTree(root.left);
        
        return root;
    }
}

Sample Test Case: [1,2,3]
2
3

- Title Slug: goal-parser-interpretation
Question FrontEnd Id: 1678
Title: Goal Parser Interpretation
Difficulty: Easy
Status: ac
Stats: {"totalAccepted": "178.2K", "totalSubmission": "205.8K", "totalAcceptedRaw": 178223, "totalSubmissionRaw": 205751, "acRate": "86.6%"}
Submissions: 1
ID: 860516272
Language Name: csharp
Language Verbose Name: C#
Question ID: 1797
URL: 
Code: public class Solution {
    public string Interpret(string command) {
        StringBuilder sb = new StringBuilder();

        int pointer = 0;
        while(pointer<command.Length){
            if(command[pointer]=='G'){     //G
                sb.Append("G");
                pointer++;
            }else{

                if(command[pointer+1]==')'){ //()
                    sb.Append("o");
                    pointer+=2;
                }else{                          //(al)
                    sb.Append("al");
                    pointer+=4;
                }
            }
        }

        return sb.ToString();
    }
}

/*
if char is G -> add g
    position++;

if char is '('
    if next char ')'
        add o
        position+2;
    else
        add al
        position+4
*/

Sample Test Case: "G()(al)"

- Title Slug: count-of-matches-in-tournament
Question FrontEnd Id: 1688
Title: Count of Matches in Tournament
Difficulty: Easy
Status: ac
Stats: {"totalAccepted": "97.2K", "totalSubmission": "117K", "totalAcceptedRaw": 97189, "totalSubmissionRaw": 116994, "acRate": "83.1%"}
Submissions: 1
ID: 860026756
Language Name: csharp
Language Verbose Name: C#
Question ID: 1806
URL: 
Code: public class Solution {
    public int NumberOfMatches(int n) {
        int matches = 0;
        while(n>1){
            if(n%2==0){
            n/=2;
            matches+=n;
            }else{
                n=(n-1)/2;
                matches+=n+1;
            }
        }

        return matches;
    }
}

Sample Test Case: 7

- Title Slug: determine-if-string-halves-are-alike
Question FrontEnd Id: 1704
Title: Determine if String Halves Are Alike
Difficulty: Easy
Status: ac
Stats: {"totalAccepted": "187.9K", "totalSubmission": "241.7K", "totalAcceptedRaw": 187893, "totalSubmissionRaw": 241716, "acRate": "77.7%"}
Submissions: 1
ID: 863027173
Language Name: csharp
Language Verbose Name: C#
Question ID: 1823
URL: 
Code: public class Solution {
    public bool HalvesAreAlike(string s) {
       int count=0;
        s=s.ToLower();
        const string vowels= "aeiou";
        Console.WriteLine(s);
        for(int i=0;i<s.Length/2;i++){
            if(vowels.IndexOf(s[i])>=0)
                count++;
            
            if(vowels.IndexOf(s[i+s.Length/2])>=0)
            count--;
        }
        return count==0;
    }
}

Sample Test Case: "book"

- Title Slug: maximum-units-on-a-truck
Question FrontEnd Id: 1710
Title: Maximum Units on a Truck
Difficulty: Easy
Status: ac
Stats: {"totalAccepted": "264.6K", "totalSubmission": "358.4K", "totalAcceptedRaw": 264562, "totalSubmissionRaw": 358388, "acRate": "73.8%"}
Submissions: 1
ID: 640181809
Language Name: csharp
Language Verbose Name: C#
Question ID: 1829
URL: 
Code: public class Solution {
    public int MaximumUnits(int[][] boxTypes, int truckSize) {
        for(int i=0;i<boxTypes.Length;i++){
            Console.WriteLine($"{boxTypes[i][0]} {boxTypes[i][1]}");
        }
        Array.Sort(boxTypes, (a,b) => {return b[1]-a[1];});
        Console.WriteLine();
    
        
        int counter=0;
        int pointer =0;
        int boxes=0;
        while(boxes<truckSize){
            if(pointer==boxTypes.Length){
                return counter;
            }
            
            if(boxTypes[pointer][0]>0){
                counter=counter+ boxTypes[pointer][1];
                boxTypes[pointer][0]--;
                boxes++;
            }else{
                pointer++;
            }
        }
        
        return counter;
    }
}

Sample Test Case: [[1,3],[2,2],[3,1]]
4

- Title Slug: minimum-number-of-operations-to-move-all-balls-to-each-box
Question FrontEnd Id: 1769
Title: Minimum Number of Operations to Move All Balls to Each Box
Difficulty: Medium
Status: ac
Stats: {"totalAccepted": "99.7K", "totalSubmission": "117.1K", "totalAcceptedRaw": 99741, "totalSubmissionRaw": 117101, "acRate": "85.2%"}
Submissions: 1
ID: 650907030
Language Name: csharp
Language Verbose Name: C#
Question ID: 1895
URL: 
Code: public class Solution {
    public int[] MinOperations(string boxes) {
        int[] ret = new int[boxes.Length];
        
        for(int i=0;i<ret.Length;i++){
            int counter=0;
            for(int j=0;j<boxes.Length;j++){
                if(boxes[j]=='1'){
                    counter+=Math.Abs(i-j);
                }
            }
            ret[i]=counter;
        }
        return ret;
    }
}

Sample Test Case: "110"

- Title Slug: second-largest-digit-in-a-string
Question FrontEnd Id: 1796
Title: Second Largest Digit in a String
Difficulty: Easy
Status: ac
Stats: {"totalAccepted": "39.1K", "totalSubmission": "79.3K", "totalAcceptedRaw": 39146, "totalSubmissionRaw": 79254, "acRate": "49.4%"}
Submissions: 1
ID: 861934382
Language Name: csharp
Language Verbose Name: C#
Question ID: 1904
URL: 
Code: public class Solution {
    public int SecondHighest(string s) {
        SortedSet<int> ss= new SortedSet<int>();

        for(int i=0;i<s.Length;i++){
            if((int)s[i]<=57){
               ss.Add((int)s[i]-48);
            }
        }
       
       if(ss.Count<=1){
           return -1;
       }
       return ss.ElementAt(ss.Count-2);
    }
}

Sample Test Case: "dfa12321afd"

- Title Slug: determine-color-of-a-chessboard-square
Question FrontEnd Id: 1812
Title: Determine Color of a Chessboard Square
Difficulty: Easy
Status: ac
Stats: {"totalAccepted": "57.2K", "totalSubmission": "73.5K", "totalAcceptedRaw": 57196, "totalSubmissionRaw": 73533, "acRate": "77.8%"}
Submissions: 1
ID: 862403031
Language Name: csharp
Language Verbose Name: C#
Question ID: 1920
URL: 
Code: public class Solution {
    public bool SquareIsWhite(string coordinates) {
        return !(coordinates[0]%2 == coordinates[1]%2);

    }
}

Sample Test Case: "a1"

- Title Slug: replace-all-digits-with-characters
Question FrontEnd Id: 1844
Title: Replace All Digits with Characters
Difficulty: Easy
Status: ac
Stats: {"totalAccepted": "60.9K", "totalSubmission": "75.8K", "totalAcceptedRaw": 60877, "totalSubmissionRaw": 75775, "acRate": "80.3%"}
Submissions: 1
ID: 860886897
Language Name: csharp
Language Verbose Name: C#
Question ID: 1954
URL: 
Code: public class Solution {
    public string ReplaceDigits(string s) {
        if(s.Length==1)
        return s;
        StringBuilder sb = new StringBuilder(s);
        for(int i=1;i<s.Length;i+=2){
            //Console.WriteLine($"{(char)(s[i]+s[i-1]-48)}");
            sb[i]=(char)(s[i]+s[i-1]-48);
        }
        return sb.ToString();
    }
}

Sample Test Case: "a1c1e1"

- Title Slug: maximum-ice-cream-bars
Question FrontEnd Id: 1833
Title: Maximum Ice Cream Bars
Difficulty: Medium
Status: ac
Stats: {"totalAccepted": "139.5K", "totalSubmission": "188.6K", "totalAcceptedRaw": 139453, "totalSubmissionRaw": 188565, "acRate": "74.0%"}
Submissions: 1
ID: 872471628
Language Name: csharp
Language Verbose Name: C#
Question ID: 1961
URL: 
Code: public class Solution {
    public int MaxIceCream(int[] costs, int coins) {
        PriorityQueue<int,int> iceCream = new PriorityQueue<int,int>(Comparer<int>.Create((x, y) => x.CompareTo(y)));
        for(int i=0;i<costs.Length;i++){
            iceCream.Enqueue(costs[i],costs[i]);
        }
        int bars=0;
        while(iceCream.Count!=0){
            int next= iceCream.Dequeue();
        
            if(next>coins)
            return bars;

            bars++;
            coins-=next;
        }

        return bars;
    }
}

Sample Test Case: [1,3,2,4,1]
7

- Title Slug: maximum-product-difference-between-two-pairs
Question FrontEnd Id: 1913
Title: Maximum Product Difference Between Two Pairs
Difficulty: Easy
Status: ac
Stats: {"totalAccepted": "83.5K", "totalSubmission": "102.8K", "totalAcceptedRaw": 83487, "totalSubmissionRaw": 102774, "acRate": "81.2%"}
Submissions: 1
ID: 863054931
Language Name: csharp
Language Verbose Name: C#
Question ID: 2042
URL: 
Code: public class Solution {
    public int MaxProductDifference(int[] nums) {
        Array.Sort(nums);
        return (nums[nums.Length-1]* nums[nums.Length-2])-(nums[0]*nums[1]);
    }
}

Sample Test Case: [5,6,2,7,4]

- Title Slug: concatenation-of-array
Question FrontEnd Id: 1929
Title: Concatenation of Array
Difficulty: Easy
Status: ac
Stats: {"totalAccepted": "403.7K", "totalSubmission": "448K", "totalAcceptedRaw": 403677, "totalSubmissionRaw": 447986, "acRate": "90.1%"}
Submissions: 1
ID: 863046437
Language Name: csharp
Language Verbose Name: C#
Question ID: 2058
URL: 
Code: public class Solution {
    public int[] GetConcatenation(int[] nums) {
        int[] ans = new int[nums.Length*2];
        for(int i=0;i<nums.Length;i++){
            ans[i]=nums[i];
            ans[i+nums.Length]=nums[i];
        }
        return ans;
    }
}

Sample Test Case: [1,2,1]

- Title Slug: three-divisors
Question FrontEnd Id: 1952
Title: Three Divisors
Difficulty: Easy
Status: ac
Stats: {"totalAccepted": "43.9K", "totalSubmission": "75.4K", "totalAcceptedRaw": 43937, "totalSubmissionRaw": 75369, "acRate": "58.3%"}
Submissions: 1
ID: 860029543
Language Name: csharp
Language Verbose Name: C#
Question ID: 2083
URL: 
Code: public class Solution {
    public bool IsThree(int n) {
        if(n<3)
        return false;

        bool foundThird=false;
        for(int i=2;i<=n/2;i++){
            if(n%i==0){
                if(foundThird)
                return false;

                foundThird=true;
            }
        }
        if(foundThird)
        return true;

        return false;
        
    }
}

Sample Test Case: 2

- Title Slug: find-if-path-exists-in-graph
Question FrontEnd Id: 1971
Title: Find if Path Exists in Graph
Difficulty: Easy
Status: ac
Stats: {"totalAccepted": "228.8K", "totalSubmission": "439.9K", "totalAcceptedRaw": 228836, "totalSubmissionRaw": 439901, "acRate": "52.0%"}
Submissions: 1
ID: 862386735
Language Name: csharp
Language Verbose Name: C#
Question ID: 2121
URL: 
Code: public class Solution {
    public bool ValidPath(int n, int[][] edges, int source, int destination) {
        if(edges.Length==0){
            return true;
        }
        bool[] visited = new bool[n];
        Dictionary<int,List<int>> graph = createGraph(edges);      
        return traverse(graph, source,visited,destination);

    }

    public bool traverse( Dictionary<int,List<int>> graph, int source,  bool[] visited, int destination){
        if(source==destination)
        return true;

        if(!visited[source]){
        visited[source]=true;
        for(int i=0;i<graph[source].Count;i++)
        {
           if(traverse(graph,graph[source][i],visited,destination))
           return true;
        }
        }
         return false;
    
    }

    private Dictionary<int,List<int>> createGraph(int[][] edges){
        Dictionary<int,List<int>> graph = new Dictionary<int,List<int>>();
          for(int i=0;i<edges.Length;i++){
            if(graph.ContainsKey(edges[i][0])){
                graph[edges[i][0]].Add(edges[i][1]);
            }else{
                graph.Add(edges[i][0],new List<int>{edges[i][1]});
            }

            if(graph.ContainsKey(edges[i][1])){
                graph[edges[i][1]].Add(edges[i][0]);
            }else{
                graph.Add(edges[i][1],new List<int>{edges[i][0]});
            }
        }
        return graph;
    }
}

Sample Test Case: 3
[[0,1],[1,2],[2,0]]
0
2

- Title Slug: time-needed-to-buy-tickets
Question FrontEnd Id: 2073
Title: Time Needed to Buy Tickets
Difficulty: Easy
Status: ac
Stats: {"totalAccepted": "40.6K", "totalSubmission": "65.2K", "totalAcceptedRaw": 40627, "totalSubmissionRaw": 65205, "acRate": "62.3%"}
Submissions: 1
ID: 862394525
Language Name: csharp
Language Verbose Name: C#
Question ID: 2195
URL: 
Code: public class Solution {
    public int TimeRequiredToBuy(int[] tickets, int k) {
        int counter=0;
        for(int i=0;i<tickets.Length;i++){
            if(i<=k){
                if(tickets[i]<=tickets[k]){
                    counter+=tickets[i];
                }else{
                    counter+=tickets[k];
                }
            }else{
                if(tickets[i]<tickets[k]){
                    counter+=tickets[i];
                }else{
                    counter+=tickets[k]-1;
                }
        }
    }
     return counter;
}
}

Sample Test Case: [2,3,2]
2

- Title Slug: find-first-palindromic-string-in-the-array
Question FrontEnd Id: 2108
Title: Find First Palindromic String in the Array
Difficulty: Easy
Status: ac
Stats: {"totalAccepted": "84.3K", "totalSubmission": "107.3K", "totalAcceptedRaw": 84336, "totalSubmissionRaw": 107345, "acRate": "78.6%"}
Submissions: 1
ID: 860495117
Language Name: csharp
Language Verbose Name: C#
Question ID: 2231
URL: 
Code: public class Solution {
    public string FirstPalindrome(string[] words) {
        for(int i=0;i<words.Length;i++){
            if(isPalindrome(words[i]))
            return words[i];
        }

        return "";
    }

    private bool isPalindrome(string word){
        for(int i=0;i<word.Length/2;i++){
            if(word[i]!=word[word.Length-i-1])
            return false;
        }
        return true;
    }
}

Sample Test Case: ["abc","car","ada","racecar","cool"]

- Title Slug: check-if-all-as-appears-before-all-bs
Question FrontEnd Id: 2124
Title: Check if All A's Appears Before All B's
Difficulty: Easy
Status: ac
Stats: {"totalAccepted": "52.9K", "totalSubmission": "74.3K", "totalAcceptedRaw": 52890, "totalSubmissionRaw": 74320, "acRate": "71.2%"}
Submissions: 1
ID: 859999547
Language Name: csharp
Language Verbose Name: C#
Question ID: 2243
URL: 
Code: public class Solution {
    public bool CheckString(string s) {
        bool firstB=false;

        for(int i=0;i<s.Length;i++){
            if(s[i]=='b')
            firstB=true;
            if(firstB&& s[i]=='a')
                return false;
        }
        return true;
    }
}

Sample Test Case: "aaabbb"

- Title Slug: destroying-asteroids
Question FrontEnd Id: 2126
Title: Destroying Asteroids
Difficulty: Medium
Status: ac
Stats: {"totalAccepted": "27.9K", "totalSubmission": "55.9K", "totalAcceptedRaw": 27933, "totalSubmissionRaw": 55924, "acRate": "49.9%"}
Submissions: 1
ID: 862415629
Language Name: csharp
Language Verbose Name: C#
Question ID: 2245
URL: 
Code: public class Solution {
    public bool AsteroidsDestroyed(int mass, int[] asteroids) {
        Array.Sort(asteroids);
        long m = mass;
        for(int i=0;i<asteroids.Length;i++){
            if(m<asteroids[i])
            return false;

            m+=asteroids[i];
        }
        return true;
    }
}

Sample Test Case: 10
[3,9,19,5,21]

- Title Slug: count-elements-with-strictly-smaller-and-greater-elements
Question FrontEnd Id: 2148
Title: Count Elements With Strictly Smaller and Greater Elements 
Difficulty: Easy
Status: ac
Stats: {"totalAccepted": "41.1K", "totalSubmission": "68.9K", "totalAcceptedRaw": 41098, "totalSubmissionRaw": 68931, "acRate": "59.6%"}
Submissions: 1
ID: 860004891
Language Name: csharp
Language Verbose Name: C#
Question ID: 2269
URL: 
Code: public class Solution {
    public int CountElements(int[] nums) {
        int min = nums[0];
        int max= nums[0];

        for(int i=0;i<nums.Length;i++){
            if(min>nums[i])
            min=nums[i];

            if(max<nums[i])
            max=nums[i];
        }

        int counter=0;
        for(int i=0;i<nums.Length;i++){
            if(min<nums[i] && max>nums[i])
            counter++;
        }
        Console.WriteLine($"{min} - {max}");

        return counter;
    }
}

Sample Test Case: [11,7,2,15]

- Title Slug: rearrange-array-elements-by-sign
Question FrontEnd Id: 2149
Title: Rearrange Array Elements by Sign
Difficulty: Medium
Status: ac
Stats: {"totalAccepted": "76.4K", "totalSubmission": "94.3K", "totalAcceptedRaw": 76365, "totalSubmissionRaw": 94317, "acRate": "81.0%"}
Submissions: 1
ID: 629761673
Language Name: csharp
Language Verbose Name: C#
Question ID: 2271
URL: 
Code: public class Solution {
    public int[] RearrangeArray(int[] nums) {
        int[] ret = new int[nums.Length];
        int positive=0;
        int negative = 1;
        
        foreach(int num in nums){
            if(num>0){
                ret[positive]=num;
                positive+=2;
            }else{
                ret[negative]=num;
                negative+=2;
            }
        }
        return ret;
        
    }
}

Sample Test Case: [3,1,-2,-5,2,-4]

- Title Slug: count-equal-and-divisible-pairs-in-an-array
Question FrontEnd Id: 2176
Title: Count Equal and Divisible Pairs in an Array
Difficulty: Easy
Status: ac
Stats: {"totalAccepted": "50.7K", "totalSubmission": "63.7K", "totalAcceptedRaw": 50718, "totalSubmissionRaw": 63722, "acRate": "79.6%"}
Submissions: 1
ID: 860496039
Language Name: csharp
Language Verbose Name: C#
Question ID: 2277
URL: 
Code: public class Solution {
    public int CountPairs(int[] nums, int k) {
        int pairs=0;
        for(int i=0;i<nums.Length-1;i++){
            for(int j=i+1;j<nums.Length;j++){
                if(nums[i]==nums[j] && (i*j)%k==0)
                pairs++;
            }
        }
        return pairs;
    }
}

Sample Test Case: [3,1,2,2,2,1,3]
2

- Title Slug: count-operations-to-obtain-zero
Question FrontEnd Id: 2169
Title: Count Operations to Obtain Zero
Difficulty: Easy
Status: ac
Stats: {"totalAccepted": "53.1K", "totalSubmission": "70.7K", "totalAcceptedRaw": 53148, "totalSubmissionRaw": 70749, "acRate": "75.1%"}
Submissions: 1
ID: 640225473
Language Name: csharp
Language Verbose Name: C#
Question ID: 2288
URL: 
Code: public class Solution {
    public int CountOperations(int num1, int num2) {
        //int counter= 0;
        return driver(0,num1,num2);
        
    }
    
    private int driver(int counter, int num1, int num2){
        if(num1 ==0 || num2 == 0){
            return counter;
        }
        
        if(num1>=num2){
            num1-=num2;
            counter++;
            
        }else{
            num2-=num1;
            counter++;
           
        }
         return driver(counter,num1,num2);
       
        
    }
}

Sample Test Case: 2
3

- Title Slug: divide-array-into-equal-pairs
Question FrontEnd Id: 2206
Title: Divide Array Into Equal Pairs
Difficulty: Easy
Status: ac
Stats: {"totalAccepted": "53.5K", "totalSubmission": "72.7K", "totalAcceptedRaw": 53545, "totalSubmissionRaw": 72652, "acRate": "73.7%"}
Submissions: 1
ID: 663019717
Language Name: csharp
Language Verbose Name: C#
Question ID: 2308
URL: 
Code: public class Solution {
    public bool DivideArray(int[] nums) {
        Dictionary<int,int> pairing = new Dictionary<int,int>();
        for(int i=0;i<nums.Length;i++){
            if(pairing.ContainsKey(nums[i])){
                pairing[nums[i]]++;
            }else{
                pairing.Add(nums[i],1);
            }
        }
        
        foreach(KeyValuePair<int,int> kvp in pairing){
            if(kvp.Value %2==1){
                return false;
            }
        }
        return true;
    }
}

Sample Test Case: [3,2,3,2,2,2]

- Title Slug: calculate-digit-sum-of-a-string
Question FrontEnd Id: 2243
Title: Calculate Digit Sum of a String
Difficulty: Easy
Status: ac
Stats: {"totalAccepted": "29.6K", "totalSubmission": "44.6K", "totalAcceptedRaw": 29629, "totalSubmissionRaw": 44650, "acRate": "66.4%"}
Submissions: 1
ID: 681872250
Language Name: csharp
Language Verbose Name: C#
Question ID: 2361
URL: 
Code: public class Solution {
    public string DigitSum(string s, int k) {
        while(s.Length>k){
           // Console.WriteLine(s.Length);
            s=sumString(s,k);
        }
        
        return s;
        
    }
    
    
    
    private string sumString(string s, int k){
        StringBuilder sb = new StringBuilder();
        List<string> list = new List<string>();
        int pointer=0;
       while(pointer<s.Length){
            if(pointer+k>s.Length){
                list.Add(s.Substring(pointer, s.Length-pointer));
                break;
            }
            list.Add(s.Substring(pointer,k));
            pointer+=k;
        }
        
        
        foreach(string str in list){
         int adder = 0;
            for(int i=0;i<str.Length;i++){
                int temp;
                Int32.TryParse(str[i].ToString(), out temp);
                adder+=temp;
         }
            sb.Append(adder);
        }
        return sb.ToString();
        
        
    }
}

Sample Test Case: "11111222223"
3

- Title Slug: minimum-rounds-to-complete-all-tasks
Question FrontEnd Id: 2244
Title: Minimum Rounds to Complete All Tasks
Difficulty: Medium
Status: ac
Stats: {"totalAccepted": "132K", "totalSubmission": "209.8K", "totalAcceptedRaw": 132008, "totalSubmissionRaw": 209811, "acRate": "62.9%"}
Submissions: 1
ID: 872154152
Language Name: csharp
Language Verbose Name: C#
Question ID: 2362
URL: 
Code: public class Solution {
    public int MinimumRounds(int[] tasks) {
        Dictionary<int,int> dtask = new();
        for(int i=0;i<tasks.Length;i++){
            if(dtask.ContainsKey(tasks[i])){
                dtask[tasks[i]]++;
            }else{
                dtask.Add(tasks[i],1);
            }
        }

        int minimum=0;
        foreach(KeyValuePair<int,int> kvp in dtask){
            if(kvp.Value==1)
            return -1;
            if(kvp.Value%3==0){
                minimum+=kvp.Value/3;
            }else{
                minimum+=kvp.Value/3+1;
            }


        }
       
        return minimum;

    }
}

Sample Test Case: [2,2,3,3,2,4,4,4,4,4]

- Title Slug: check-if-matrix-is-x-matrix
Question FrontEnd Id: 2319
Title: Check if Matrix Is X-Matrix
Difficulty: Easy
Status: ac
Stats: {"totalAccepted": "37.9K", "totalSubmission": "56.9K", "totalAcceptedRaw": 37874, "totalSubmissionRaw": 56919, "acRate": "66.5%"}
Submissions: 1
ID: 859989345
Language Name: csharp
Language Verbose Name: C#
Question ID: 2398
URL: 
Code: public class Solution {
    public bool CheckXMatrix(int[][] grid) {
        for(int y=0;y<grid.Length;y++){
            for(int x=0;x<grid.Length;x++){
               // Console.WriteLine($"{y},{x} = {grid[y][x]}");
                if(y==x || y==grid.Length-x-1){
                    
                    if(grid[y][x]==0)
                    return false;
                }else{
                    if(grid[y][x]!=0)
                    return false;
                }
            }
        }
        return true;
    }
}

Sample Test Case: [[2,0,0,1],[0,3,1,0],[0,5,2,0],[4,0,0,2]]

- Title Slug: number-of-arithmetic-triplets
Question FrontEnd Id: 2367
Title: Number of Arithmetic Triplets
Difficulty: Easy
Status: ac
Stats: {"totalAccepted": "69.4K", "totalSubmission": "83K", "totalAcceptedRaw": 69360, "totalSubmissionRaw": 82999, "acRate": "83.6%"}
Submissions: 1
ID: 860019976
Language Name: csharp
Language Verbose Name: C#
Question ID: 2442
URL: 
Code: public class Solution {
    public int ArithmeticTriplets(int[] nums, int diff) {
        int counter=0;
        for(int i=0;i<nums.Length-2;i++){
            for(int j=i+1;j<nums.Length-1;j++){
                for(int k = j+1;k<nums.Length;k++){
                    if(nums[j]-nums[i]==diff &&nums[k]-nums[j]==diff)
                    counter++;
                }
            }
        }
    return counter;
    }
    
}

Sample Test Case: [0,1,4,6,7,10]
3

- Title Slug: smallest-even-multiple
Question FrontEnd Id: 2413
Title: Smallest Even Multiple
Difficulty: Easy
Status: ac
Stats: {"totalAccepted": "82.6K", "totalSubmission": "94.2K", "totalAcceptedRaw": 82630, "totalSubmissionRaw": 94193, "acRate": "87.7%"}
Submissions: 1
ID: 863055856
Language Name: csharp
Language Verbose Name: C#
Question ID: 2491
URL: 
Code: public class Solution {
    public int SmallestEvenMultiple(int n) {
     return n*(n%2+1);
    }
}

Sample Test Case: 5

- Title Slug: length-of-the-longest-alphabetical-continuous-substring
Question FrontEnd Id: 2414
Title: Length of the Longest Alphabetical Continuous Substring
Difficulty: Medium
Status: ac
Stats: {"totalAccepted": "32.9K", "totalSubmission": "58.4K", "totalAcceptedRaw": 32850, "totalSubmissionRaw": 58407, "acRate": "56.2%"}
Submissions: 1
ID: 860513299
Language Name: csharp
Language Verbose Name: C#
Question ID: 2492
URL: 
Code: public class Solution {
    int longest;
    public int LongestContinuousSubstring(string s) {
        longest=1;
        int pointer=0;
        int temp =1;
       while(pointer<s.Length-1){
           
            if(s[pointer+1]-s[pointer]==1){
                temp++;
            }else{
                temp=1;
            }

             if(longest<temp)
                longest=temp;

            pointer++;
        }

        return longest;
    }
}
/*
"abacaba"


*/

Sample Test Case: "abacaba"

- Title Slug: count-number-of-distinct-integers-after-reverse-operations
Question FrontEnd Id: 2442
Title: Count Number of Distinct Integers After Reverse Operations
Difficulty: Medium
Status: ac
Stats: {"totalAccepted": "36.9K", "totalSubmission": "46.9K", "totalAcceptedRaw": 36889, "totalSubmissionRaw": 46864, "acRate": "78.7%"}
Submissions: 1
ID: 860507539
Language Name: csharp
Language Verbose Name: C#
Question ID: 2525
URL: 
Code: public class Solution {
    public int CountDistinctIntegers(int[] nums) {
        HashSet<int> set = new HashSet<int>();
        for(int i=0;i<nums.Length;i++){
            set.Add(nums[i]);
            int revNum =0;
            while(nums[i]>0){
                revNum*=10;
                revNum+=nums[i]%10;
                nums[i]/=10;
            }

            set.Add(revNum);
        }

         return set.Count;
    }

   


}

/*
while(num >10){
revNum*10;
revNum+=num%10;
}

revNum=0;
13


30+1=31

*/

Sample Test Case: [1,13,10,12,31]

- Title Slug: sum-of-number-and-its-reverse
Question FrontEnd Id: 2443
Title: Sum of Number and Its Reverse
Difficulty: Medium
Status: ac
Stats: {"totalAccepted": "28.2K", "totalSubmission": "61.5K", "totalAcceptedRaw": 28175, "totalSubmissionRaw": 61542, "acRate": "45.8%"}
Submissions: 1
ID: 871582466
Language Name: csharp
Language Verbose Name: C#
Question ID: 2541
URL: 
Code: public class Solution {
    public bool SumOfNumberAndReverse(int num) {
        for(int i=0;i<=num;i++){
            int  rev = reverse(i);
            if(i+rev==num)
            return true;
        }
        return false;
    }

    public int reverse(int num){
        int ret = 0;
        while(num>0){
            ret*=10;
            ret+=num%10;
            num/=10;
        }
        return ret;
    }
}

Sample Test Case: 443

- Title Slug: find-the-pivot-integer
Question FrontEnd Id: 2485
Title: Find the Pivot Integer
Difficulty: Easy
Status: ac
Stats: {"totalAccepted": "34.5K", "totalSubmission": "43K", "totalAcceptedRaw": 34450, "totalSubmissionRaw": 42977, "acRate": "80.2%"}
Submissions: 1
ID: 860033254
Language Name: csharp
Language Verbose Name: C#
Question ID: 2571
URL: 
Code: public class Solution {
    public int PivotInteger(int n) {
        int left=1;
        int max= (n*(n+1))/2;
        int right = max;

        int pivot =1;
        while(left<right){
            pivot++;
            left = (pivot*(pivot+1))/2;
            right = max-left+pivot;
        }
        

        if(left==right)
        return pivot;

        return -1;
    }
}

Sample Test Case: 8

- Title Slug: circular-sentence
Question FrontEnd Id: 2490
Title: Circular Sentence
Difficulty: Easy
Status: ac
Stats: {"totalAccepted": "27.4K", "totalSubmission": "42.7K", "totalAcceptedRaw": 27415, "totalSubmissionRaw": 42732, "acRate": "64.2%"}
Submissions: 1
ID: 857382550
Language Name: csharp
Language Verbose Name: C#
Question ID: 2580
URL: 
Code: public class Solution {
    public bool IsCircularSentence(string sentence) {
        string[] words = sentence.Split(' ');
        for(int i=0;i<words.Length-1;i++){
            if(!words[i].EndsWith(words[i+1][0]))
                return false;
        }
        
        if(words[words.Length-1].EndsWith(words[0][0]))
            return true;
        
        return false;
    }
}

Sample Test Case: "leetcode exercises sound delightful"

- Title Slug: count-pairs-of-similar-strings
Question FrontEnd Id: 2506
Title: Count Pairs Of Similar Strings
Difficulty: Easy
Status: ac
Stats: {"totalAccepted": "26.5K", "totalSubmission": "37.5K", "totalAcceptedRaw": 26460, "totalSubmissionRaw": 37528, "acRate": "70.5%"}
Submissions: 1
ID: 861543216
Language Name: csharp
Language Verbose Name: C#
Question ID: 2594
URL: 
Code: public class Solution {
    public int SimilarPairs(string[] words) {
        List<HashSet<char>> wordSets = new List<HashSet<char>>();
        
        for(int i=0;i<words.Length;i++){
            HashSet<char> hSet= new HashSet<char>(); 
            for(int j=0;j<words[i].Length;j++){
                hSet.Add(words[i][j]);
            }
            wordSets.Add(hSet);
        }
        
        int counter=0;
        for(int i=0;i<wordSets.Count-1;i++){
            for(int j=i+1;j<wordSets.Count;j++){
                if(wordSets[i].SetEquals(words[j]))
                    counter++;
            }
        }
        return counter;
        
    }
}

Sample Test Case: ["aba","aabb","abcd","bac","aabc"]

- Title Slug: smallest-value-after-replacing-with-sum-of-prime-factors
Question FrontEnd Id: 2507
Title: Smallest Value After Replacing With Sum of Prime Factors
Difficulty: Medium
Status: ac
Stats: {"totalAccepted": "16.3K", "totalSubmission": "33.5K", "totalAcceptedRaw": 16332, "totalSubmissionRaw": 33514, "acRate": "48.7%"}
Submissions: 1
ID: 861552911
Language Name: csharp
Language Verbose Name: C#
Question ID: 2595
URL: 
Code: public class Solution {
    public int SmallestValue(int n) {
        int oldN = n;
        bool isPrime=true;
        for(int i=2;i<=Math.Sqrt(n);i++){
            
            if(n%i==0){
                isPrime=false;
                break;
            }
        }
        if(isPrime){
      //      Console.WriteLine($"{n} is prime");
            return n;
        }
        
        
        int newN=0;
        while(n>0){
            bool wasFactored=false;
            for(int i=2;i<=Math.Sqrt(n);i++){
                // Console.WriteLine($"{n}%{i}= {n%i}");
                if(n%i==0){
                   
                    newN+=i;
                  //  Console.WriteLine($"newN now is {newN}");
                    n/=i;
                  //  Console.WriteLine($"n now is {n}");
                    wasFactored=true;
                    break;
                }
            }
            if(!wasFactored){
                newN+=n;
                break;
            }
            
           
        }
        if(newN==oldN)
            return oldN;
         return SmallestValue(newN);

        
        
    }
}

Sample Test Case: 15

- Title Slug: maximum-enemy-forts-that-can-be-captured
Question FrontEnd Id: 2511
Title: Maximum Enemy Forts That Can Be Captured
Difficulty: Easy
Status: ac
Stats: {"totalAccepted": "15.8K", "totalSubmission": "42K", "totalAcceptedRaw": 15816, "totalSubmissionRaw": 42047, "acRate": "37.6%"}
Submissions: 1
ID: 864776271
Language Name: csharp
Language Verbose Name: C#
Question ID: 2602
URL: 
Code: public class Solution {
    public int CaptureForts(int[] forts) {
        int max =0;
        for(int i=0;i<forts.Length-1;i++){
            for(int j=i+1;j<forts.Length;j++){
                if(forts[i]==forts[j] && forts[i]!=0){
                    i=j;
                }else
                if(Math.Min(forts[i],forts[j])< 0 && Math.Max(forts[i],forts[j])>0){
                    if(max<j-i-1)
                        max=j-i-1;
                    
                    i=j;
                }
                
            }
        }
        
        return max;
    }
}

Sample Test Case: [1,0,0,-1,0,0,0,0,1]

- Title Slug: count-the-digits-that-divide-a-number
Question FrontEnd Id: 2520
Title: Count the Digits That Divide a Number
Difficulty: Easy
Status: ac
Stats: {"totalAccepted": "39.9K", "totalSubmission": "47K", "totalAcceptedRaw": 39919, "totalSubmissionRaw": 47030, "acRate": "84.9%"}
Submissions: 1
ID: 868788881
Language Name: csharp
Language Verbose Name: C#
Question ID: 2608
URL: 
Code: public class Solution {
    public int CountDigits(int num) {
        int counter = 0;
        int test = num;
        while(test>0){
            int temp = test%10;
            if(num%temp==0)
                counter++;
            
            test/=10;
        }
        return counter;
    }
}

Sample Test Case: 7

- Title Slug: distinct-prime-factors-of-product-of-array
Question FrontEnd Id: 2521
Title: Distinct Prime Factors of Product of Array
Difficulty: Medium
Status: ac
Stats: {"totalAccepted": "20.5K", "totalSubmission": "40.8K", "totalAcceptedRaw": 20457, "totalSubmissionRaw": 40816, "acRate": "50.1%"}
Submissions: 1
ID: 868801947
Language Name: csharp
Language Verbose Name: C#
Question ID: 2609
URL: 
Code: public class Solution {
    public int DistinctPrimeFactors(int[] nums) {
        HashSet<int> primes = new HashSet<int>();
        for(int i=0;i<nums.Length;i++){
          //  Console.WriteLine($"\t Checking for {nums[i]}");
            for(int b=2;nums[i]>1;b++){
                int x=0;
                while(nums[i]%b==0){
                    nums[i]/=b;
                    x++;
                   // Console.WriteLine($"{b} is a factor");
                    primes.Add(b);
                }
                
                //Console.WriteLine($"\t\t The count is now {primes.Count}");
            }
        }
        return primes.Count;
        
    }
}

/*
for (b = 2; a > 1; b++)
    if (a % b == 0)
    {
        int x = 0;
        while (a % b == 0)
        {
            a /= b;
            x++;
        }
        Console.WriteLine($"{b} is a prime factor {x} times!");
    }
*/

Sample Test Case: [2,4,3,7,10,6]

- Title Slug: prime-in-diagonal
Question FrontEnd Id: 2614
Title: Prime In Diagonal
Difficulty: Easy
Status: ac
Stats: {"totalAccepted": "21.7K", "totalSubmission": "67.3K", "totalAcceptedRaw": 21685, "totalSubmissionRaw": 67294, "acRate": "32.2%"}
Submissions: 1
ID: 930433859
Language Name: csharp
Language Verbose Name: C#
Question ID: 2722
URL: 
Code: public class Solution {
    public int DiagonalPrime(int[][] nums) {
        List<int> primes = new();
        for(int i=0;i<nums.Length;i++){
            
            if(isPrime(nums[i][i])) primes.Add(nums[i][i]);
            
            if(isPrime(nums[i][nums.Length-1-i])) primes.Add(nums[i][nums.Length-1-i]);
        }
        
        if(primes.Count==0)return 0;
        
        int max=0;
        for(int i=0;i<primes.Count;i++){
            if(max<primes[i])
                max=primes[i];
        }
        
     
        return max;
    }
    
    private bool isPrime(int i){
        if(i<2) return false;
        

        for(int j=2;j<=(int)Math.Floor(Math.Sqrt(i));j++){
            
            if(i%j==0)return false;
        }
        
        return true;
    }
}

Sample Test Case: [[1,2,3],[5,6,7],[9,10,11]]

]



----------------------------------------------------------



Contest Overview:
Attended contests count: 12
Current rating: 1504
Global ranking: 156432/386520
Top percentage: 41%



----------------------------------------------------------



Contests:
[
- Contest Name: Weekly Contest 280
Attended: True
Trend direction: DOWN
Problems solved: 1
Total problems: 4
Finish time in seconds: 00:07:32
Rating: 1494
Ranking: 9224

- Contest Name: Biweekly Contest 74
Attended: True
Trend direction: DOWN
Problems solved: 1
Total problems: 4
Finish time in seconds: 00:03:46
Rating: 1484
Ranking: 8394

- Contest Name: Weekly Contest 285
Attended: True
Trend direction: DOWN
Problems solved: 0
Total problems: 4
Finish time in seconds: 00:00:00
Rating: 1431
Ranking: 15296

- Contest Name: Weekly Contest 289
Attended: True
Trend direction: DOWN
Problems solved: 2
Total problems: 4
Finish time in seconds: 01:40:49
Rating: 1422
Ranking: 11061

- Contest Name: Biweekly Contest 94
Attended: True
Trend direction: UP
Problems solved: 1
Total problems: 4
Finish time in seconds: 00:32:40
Rating: 1433
Ranking: 6448

- Contest Name: Weekly Contest 326
Attended: True
Trend direction: UP
Problems solved: 2
Total problems: 4
Finish time in seconds: 00:16:01
Rating: 1438
Ranking: 6846

- Contest Name: Biweekly Contest 95
Attended: True
Trend direction: UP
Problems solved: 2
Total problems: 4
Finish time in seconds: 01:13:11
Rating: 1442
Ranking: 9407

- Contest Name: Weekly Contest 327
Attended: True
Trend direction: UP
Problems solved: 2
Total problems: 4
Finish time in seconds: 00:25:37
Rating: 1458
Ranking: 7901

- Contest Name: Weekly Contest 328
Attended: True
Trend direction: UP
Problems solved: 2
Total problems: 4
Finish time in seconds: 00:08:59
Rating: 1507
Ranking: 4000

- Contest Name: Biweekly Contest 101
Attended: True
Trend direction: DOWN
Problems solved: 1
Total problems: 4
Finish time in seconds: 00:20:56
Rating: 1488
Ranking: 12199

- Contest Name: Weekly Contest 339
Attended: True
Trend direction: UP
Problems solved: 2
Total problems: 4
Finish time in seconds: 00:23:36
Rating: 1502
Ranking: 7971

- Contest Name: Weekly Contest 340
Attended: True
Trend direction: UP
Problems solved: 1
Total problems: 4
Finish time in seconds: 00:36:37
Rating: 1504
Ranking: 9058

]
